
tim_ic_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d5c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08005f60  08005f60  00006f60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006358  08006358  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006358  08006358  00007358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006360  08006360  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006360  08006360  00007360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006364  08006364  00007364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006368  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  200001d4  0800653c  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  0800653c  000084b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8ad  00000000  00000000  00008202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b52  00000000  00000000  00016aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  00018608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094b  00000000  00000000  000191d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032e8c  00000000  00000000  00019b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fff0  00000000  00000000  0004c9af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013e26f  00000000  00000000  0005c99f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019ac0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042c0  00000000  00000000  0019ac54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0019ef14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	08005f44 	.word	0x08005f44

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	08005f44 	.word	0x08005f44

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <SysTick_Handler>:
#include "stm32f7xx_hal.h"
#include "timerIC.h"

extern TIM_HandleTypeDef htim10;

void SysTick_Handler(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005e4:	f000 fb98 	bl	8000d18 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80005e8:	f000 fce4 	bl	8000fb4 <HAL_SYSTICK_IRQHandler>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim10);
 80005f4:	4802      	ldr	r0, [pc, #8]	@ (8000600 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80005f6:	f001 fd67 	bl	80020c8 <HAL_TIM_IRQHandler>
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200001f0 	.word	0x200001f0

08000604 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000608:	2002      	movs	r0, #2
 800060a:	f000 fea5 	bl	8001358 <HAL_GPIO_EXTI_IRQHandler>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <main>:
uint32_t input_captures[2];
uint8_t count;
uint8_t is_capture_done;
uint16_t outer_count = 0;

int main() {
 8000614:	b580      	push	{r7, lr}
 8000616:	b08c      	sub	sp, #48	@ 0x30
 8000618:	af02      	add	r7, sp, #8
  // Init HAL
  HAL_Init(); 
 800061a:	f000 fb40 	bl	8000c9e <HAL_Init>

  /***********************************************************************
   ***************             Configure Clock             ***************
   ***********************************************************************/
  SystemClock_Config();
 800061e:	f000 f9b9 	bl	8000994 <SystemClock_Config>

  /***********************************************************************
   ***************             Configure UART6             ***************
   ***********************************************************************/
  memset(&huart6, 0, sizeof(huart6));
 8000622:	2288      	movs	r2, #136	@ 0x88
 8000624:	2100      	movs	r1, #0
 8000626:	4887      	ldr	r0, [pc, #540]	@ (8000844 <main+0x230>)
 8000628:	f003 fbe7 	bl	8003dfa <memset>
  UART6_Init();
 800062c:	f000 fa80 	bl	8000b30 <UART6_Init>
  memset(msg, 0, strlen(msg));
 8000630:	4885      	ldr	r0, [pc, #532]	@ (8000848 <main+0x234>)
 8000632:	f7ff fe55 	bl	80002e0 <strlen>
 8000636:	4603      	mov	r3, r0
 8000638:	461a      	mov	r2, r3
 800063a:	2100      	movs	r1, #0
 800063c:	4882      	ldr	r0, [pc, #520]	@ (8000848 <main+0x234>)
 800063e:	f003 fbdc 	bl	8003dfa <memset>
  sprintf(msg, "Let's use Timer10's IC1 to clock the LSE speed\n");
 8000642:	4982      	ldr	r1, [pc, #520]	@ (800084c <main+0x238>)
 8000644:	4880      	ldr	r0, [pc, #512]	@ (8000848 <main+0x234>)
 8000646:	f003 fb75 	bl	8003d34 <siprintf>
  if(HAL_UART_Transmit(&huart6, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY) != HAL_OK) {
 800064a:	487f      	ldr	r0, [pc, #508]	@ (8000848 <main+0x234>)
 800064c:	f7ff fe48 	bl	80002e0 <strlen>
 8000650:	4603      	mov	r3, r0
 8000652:	b29a      	uxth	r2, r3
 8000654:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000658:	497b      	ldr	r1, [pc, #492]	@ (8000848 <main+0x234>)
 800065a:	487a      	ldr	r0, [pc, #488]	@ (8000844 <main+0x230>)
 800065c:	f002 f967 	bl	800292e <HAL_UART_Transmit>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <main+0x56>
	Error_Handler();
 8000666:	f000 faed 	bl	8000c44 <Error_Handler>
  }

  memset(msg, 0, strlen(msg));
 800066a:	4877      	ldr	r0, [pc, #476]	@ (8000848 <main+0x234>)
 800066c:	f7ff fe38 	bl	80002e0 <strlen>
 8000670:	4603      	mov	r3, r0
 8000672:	461a      	mov	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	4874      	ldr	r0, [pc, #464]	@ (8000848 <main+0x234>)
 8000678:	f003 fbbf 	bl	8003dfa <memset>
  sprintf(msg, "==============================================\r\n");
 800067c:	4974      	ldr	r1, [pc, #464]	@ (8000850 <main+0x23c>)
 800067e:	4872      	ldr	r0, [pc, #456]	@ (8000848 <main+0x234>)
 8000680:	f003 fb58 	bl	8003d34 <siprintf>
  if(HAL_UART_Transmit(&huart6, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY) != HAL_OK) {
 8000684:	4870      	ldr	r0, [pc, #448]	@ (8000848 <main+0x234>)
 8000686:	f7ff fe2b 	bl	80002e0 <strlen>
 800068a:	4603      	mov	r3, r0
 800068c:	b29a      	uxth	r2, r3
 800068e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000692:	496d      	ldr	r1, [pc, #436]	@ (8000848 <main+0x234>)
 8000694:	486b      	ldr	r0, [pc, #428]	@ (8000844 <main+0x230>)
 8000696:	f002 f94a 	bl	800292e <HAL_UART_Transmit>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <main+0x90>
	Error_Handler();
 80006a0:	f000 fad0 	bl	8000c44 <Error_Handler>
  }

  /***********************************************************************
   ***************           Configure BTN GPIO           ****************
   ***********************************************************************/
  BTN_GPIO_Init();
 80006a4:	f000 fa78 	bl	8000b98 <BTN_GPIO_Init>
  while(HAL_GPIO_ReadPin(GPIOJ, GPIO_PIN_1) == GPIO_PIN_SET);
 80006a8:	bf00      	nop
 80006aa:	2102      	movs	r1, #2
 80006ac:	4869      	ldr	r0, [pc, #420]	@ (8000854 <main+0x240>)
 80006ae:	f000 fe3b 	bl	8001328 <HAL_GPIO_ReadPin>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d0f8      	beq.n	80006aa <main+0x96>

  /***********************************************************************
   ***************           Configure LSE OSCI           ****************
   ***********************************************************************/
  LSE_Init();
 80006b8:	f000 fa30 	bl	8000b1c <LSE_Init>
   ***********************************************************************/

  /*
   * Clear the Handle for the timer
   */
  memset(&htim10, 0, sizeof(htim10));
 80006bc:	224c      	movs	r2, #76	@ 0x4c
 80006be:	2100      	movs	r1, #0
 80006c0:	4865      	ldr	r0, [pc, #404]	@ (8000858 <main+0x244>)
 80006c2:	f003 fb9a 	bl	8003dfa <memset>

  /*
   * Declare and Initialize the InitTypeDef Structure for the timer
   */

  memset(&Init, 0, sizeof(Init));
 80006c6:	2218      	movs	r2, #24
 80006c8:	2100      	movs	r1, #0
 80006ca:	4864      	ldr	r0, [pc, #400]	@ (800085c <main+0x248>)
 80006cc:	f003 fb95 	bl	8003dfa <memset>
  Init.Prescaler = 1;
 80006d0:	4b62      	ldr	r3, [pc, #392]	@ (800085c <main+0x248>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	601a      	str	r2, [r3, #0]
  Init.Period = 0xFFFFFFFF;
 80006d6:	4b61      	ldr	r3, [pc, #388]	@ (800085c <main+0x248>)
 80006d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80006dc:	609a      	str	r2, [r3, #8]
  Init.CounterMode = TIM_COUNTERMODE_UP;
 80006de:	4b5f      	ldr	r3, [pc, #380]	@ (800085c <main+0x248>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	605a      	str	r2, [r3, #4]

  /*
   * Configure TIM Input Capture  structure and clear
   */

  memset(&sConfig_nonConst, 0, sizeof(sConfig_nonConst));
 80006e4:	2210      	movs	r2, #16
 80006e6:	2100      	movs	r1, #0
 80006e8:	485d      	ldr	r0, [pc, #372]	@ (8000860 <main+0x24c>)
 80006ea:	f003 fb86 	bl	8003dfa <memset>
  sConfig_nonConst.ICPolarity = TIM_ICPOLARITY_RISING;
 80006ee:	4b5c      	ldr	r3, [pc, #368]	@ (8000860 <main+0x24c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
  sConfig_nonConst.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80006f4:	4b5a      	ldr	r3, [pc, #360]	@ (8000860 <main+0x24c>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	605a      	str	r2, [r3, #4]
  sConfig_nonConst.ICPrescaler = TIM_ICPSC_DIV1;
 80006fa:	4b59      	ldr	r3, [pc, #356]	@ (8000860 <main+0x24c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  sConfig_nonConst.ICFilter = 0;
 8000700:	4b57      	ldr	r3, [pc, #348]	@ (8000860 <main+0x24c>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]

  /*
   * Define which channel of the timer will be used
   */
  uint32_t Channel;
  Channel = TIM_CHANNEL_1;
 8000706:	2300      	movs	r3, #0
 8000708:	623b      	str	r3, [r7, #32]

  /*
   * Initialize Timer
   */
  Timer_Config(TIM10, sConfig_nonConst, Channel);
 800070a:	4b55      	ldr	r3, [pc, #340]	@ (8000860 <main+0x24c>)
 800070c:	6a3a      	ldr	r2, [r7, #32]
 800070e:	9201      	str	r2, [sp, #4]
 8000710:	68da      	ldr	r2, [r3, #12]
 8000712:	9200      	str	r2, [sp, #0]
 8000714:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000716:	4853      	ldr	r0, [pc, #332]	@ (8000864 <main+0x250>)
 8000718:	f000 f98a 	bl	8000a30 <Timer_Config>

  /***********************************************************************
   ***************               Start Timer               ***************
   ***********************************************************************/
  count = 1;
 800071c:	4b52      	ldr	r3, [pc, #328]	@ (8000868 <main+0x254>)
 800071e:	2201      	movs	r2, #1
 8000720:	701a      	strb	r2, [r3, #0]
  HAL_TIM_IC_Start_IT(&htim10, Channel);
 8000722:	6a39      	ldr	r1, [r7, #32]
 8000724:	484c      	ldr	r0, [pc, #304]	@ (8000858 <main+0x244>)
 8000726:	f001 fb7f 	bl	8001e28 <HAL_TIM_IC_Start_IT>

  uint32_t diff = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	627b      	str	r3, [r7, #36]	@ 0x24
  double timer10_cnt_freq = 0;
 800072e:	f04f 0200 	mov.w	r2, #0
 8000732:	f04f 0300 	mov.w	r3, #0
 8000736:	e9c7 2306 	strd	r2, r3, [r7, #24]
  double timer10_cnt_res = 0;
 800073a:	f04f 0200 	mov.w	r2, #0
 800073e:	f04f 0300 	mov.w	r3, #0
 8000742:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double user_signal_time_period = 0;
 8000746:	f04f 0200 	mov.w	r2, #0
 800074a:	f04f 0300 	mov.w	r3, #0
 800074e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  double user_signal_freq = 0;
 8000752:	f04f 0200 	mov.w	r2, #0
 8000756:	f04f 0300 	mov.w	r3, #0
 800075a:	e9c7 2300 	strd	r2, r3, [r7]

  while(1) {
	  if (is_capture_done != FALSE) {
 800075e:	4b43      	ldr	r3, [pc, #268]	@ (800086c <main+0x258>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d0fb      	beq.n	800075e <main+0x14a>
	    outer_count++;
 8000766:	4b42      	ldr	r3, [pc, #264]	@ (8000870 <main+0x25c>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	3301      	adds	r3, #1
 800076c:	b29a      	uxth	r2, r3
 800076e:	4b40      	ldr	r3, [pc, #256]	@ (8000870 <main+0x25c>)
 8000770:	801a      	strh	r2, [r3, #0]
	    if(outer_count == 18500){
 8000772:	4b3f      	ldr	r3, [pc, #252]	@ (8000870 <main+0x25c>)
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	f644 0244 	movw	r2, #18500	@ 0x4844
 800077a:	4293      	cmp	r3, r2
 800077c:	d15e      	bne.n	800083c <main+0x228>
	      if(input_captures[1] > input_captures[0])
 800077e:	4b3d      	ldr	r3, [pc, #244]	@ (8000874 <main+0x260>)
 8000780:	685a      	ldr	r2, [r3, #4]
 8000782:	4b3c      	ldr	r3, [pc, #240]	@ (8000874 <main+0x260>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	429a      	cmp	r2, r3
 8000788:	d906      	bls.n	8000798 <main+0x184>
		      diff = input_captures[1] - input_captures[0];
 800078a:	4b3a      	ldr	r3, [pc, #232]	@ (8000874 <main+0x260>)
 800078c:	685a      	ldr	r2, [r3, #4]
 800078e:	4b39      	ldr	r3, [pc, #228]	@ (8000874 <main+0x260>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	1ad3      	subs	r3, r2, r3
 8000794:	627b      	str	r3, [r7, #36]	@ 0x24
 8000796:	e006      	b.n	80007a6 <main+0x192>
	      else
		      diff = (0xFFFFFFFF - input_captures[0] + input_captures[1]);
 8000798:	4b36      	ldr	r3, [pc, #216]	@ (8000874 <main+0x260>)
 800079a:	685a      	ldr	r2, [r3, #4]
 800079c:	4b35      	ldr	r3, [pc, #212]	@ (8000874 <main+0x260>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	3b01      	subs	r3, #1
 80007a4:	627b      	str	r3, [r7, #36]	@ 0x24

	      timer10_cnt_freq = HAL_RCC_GetPCLK2Freq() / (htim10.Init.Prescaler + 1);
 80007a6:	f001 fad3 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 80007aa:	4602      	mov	r2, r0
 80007ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000858 <main+0x244>)
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	3301      	adds	r3, #1
 80007b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b6:	ee07 3a90 	vmov	s15, r3
 80007ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80007be:	ed87 7b06 	vstr	d7, [r7, #24]
	      timer10_cnt_res = 1/timer10_cnt_freq;
 80007c2:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 80007c6:	ed97 6b06 	vldr	d6, [r7, #24]
 80007ca:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007ce:	ed87 7b04 	vstr	d7, [r7, #16]
	      user_signal_time_period = diff*timer10_cnt_res;
 80007d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007d4:	ee07 3a90 	vmov	s15, r3
 80007d8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80007dc:	ed97 6b04 	vldr	d6, [r7, #16]
 80007e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007e4:	ed87 7b02 	vstr	d7, [r7, #8]
	      user_signal_freq = 1/user_signal_time_period;
 80007e8:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 80007ec:	ed97 6b02 	vldr	d6, [r7, #8]
 80007f0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007f4:	ed87 7b00 	vstr	d7, [r7]

	      memset(msg, 0, strlen(msg));
 80007f8:	4813      	ldr	r0, [pc, #76]	@ (8000848 <main+0x234>)
 80007fa:	f7ff fd71 	bl	80002e0 <strlen>
 80007fe:	4603      	mov	r3, r0
 8000800:	461a      	mov	r2, r3
 8000802:	2100      	movs	r1, #0
 8000804:	4810      	ldr	r0, [pc, #64]	@ (8000848 <main+0x234>)
 8000806:	f003 faf8 	bl	8003dfa <memset>
	      sprintf(msg, "%f\n", user_signal_freq);
 800080a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800080e:	491a      	ldr	r1, [pc, #104]	@ (8000878 <main+0x264>)
 8000810:	480d      	ldr	r0, [pc, #52]	@ (8000848 <main+0x234>)
 8000812:	f003 fa8f 	bl	8003d34 <siprintf>
	      if(HAL_UART_Transmit(&huart6, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY) != HAL_OK) {
 8000816:	480c      	ldr	r0, [pc, #48]	@ (8000848 <main+0x234>)
 8000818:	f7ff fd62 	bl	80002e0 <strlen>
 800081c:	4603      	mov	r3, r0
 800081e:	b29a      	uxth	r2, r3
 8000820:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000824:	4908      	ldr	r1, [pc, #32]	@ (8000848 <main+0x234>)
 8000826:	4807      	ldr	r0, [pc, #28]	@ (8000844 <main+0x230>)
 8000828:	f002 f881 	bl	800292e <HAL_UART_Transmit>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <main+0x222>
		    Error_Handler();
 8000832:	f000 fa07 	bl	8000c44 <Error_Handler>
	      }
	      outer_count = 0;
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <main+0x25c>)
 8000838:	2200      	movs	r2, #0
 800083a:	801a      	strh	r2, [r3, #0]
	    }
	    is_capture_done = FALSE;
 800083c:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <main+0x258>)
 800083e:	2200      	movs	r2, #0
 8000840:	701a      	strb	r2, [r3, #0]
	  if (is_capture_done != FALSE) {
 8000842:	e78c      	b.n	800075e <main+0x14a>
 8000844:	20000264 	.word	0x20000264
 8000848:	200002ec 	.word	0x200002ec
 800084c:	08005f60 	.word	0x08005f60
 8000850:	08005f90 	.word	0x08005f90
 8000854:	40022400 	.word	0x40022400
 8000858:	200001f0 	.word	0x200001f0
 800085c:	2000023c 	.word	0x2000023c
 8000860:	20000254 	.word	0x20000254
 8000864:	40014400 	.word	0x40014400
 8000868:	20000358 	.word	0x20000358
 800086c:	20000359 	.word	0x20000359
 8000870:	2000035a 	.word	0x2000035a
 8000874:	20000350 	.word	0x20000350
 8000878:	08005fc4 	.word	0x08005fc4

0800087c <HAL_MspInit>:

#include "stm32f7xx_hal.h"
#include "timerIC.h"

void HAL_MspInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	// Perform the low level processor specific inits here using processor specific API's provided by the Cube HAL layer in Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_cortex.c
	// 1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000880:	2003      	movs	r0, #3
 8000882:	f000 fb39 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>

	// 2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= (0x7 << 16);
 8000886:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <HAL_MspInit+0x40>)
 8000888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800088a:	4a0c      	ldr	r2, [pc, #48]	@ (80008bc <HAL_MspInit+0x40>)
 800088c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000890:	6253      	str	r3, [r2, #36]	@ 0x24

	// 3. Configure the prority for the system
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	f06f 000b 	mvn.w	r0, #11
 800089a:	f000 fb38 	bl	8000f0e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	f06f 000a 	mvn.w	r0, #10
 80008a6:	f000 fb32 	bl	8000f0e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	f06f 0009 	mvn.w	r0, #9
 80008b2:	f000 fb2c 	bl	8000f0e <HAL_NVIC_SetPriority>
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	// Start GPIOC Clock
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000900 <HAL_UART_MspInit+0x40>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000900 <HAL_UART_MspInit+0x40>)
 80008ce:	f043 0304 	orr.w	r3, r3, #4
 80008d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000900 <HAL_UART_MspInit+0x40>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef gpio_uart_init;
	gpio_uart_init.Pin = GPIO_PIN_6;
 80008e0:	2340      	movs	r3, #64	@ 0x40
 80008e2:	60fb      	str	r3, [r7, #12]
	gpio_uart_init.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	613b      	str	r3, [r7, #16]
	gpio_uart_init.Alternate = GPIO_AF8_USART6;
 80008e8:	2308      	movs	r3, #8
 80008ea:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &gpio_uart_init);
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	4619      	mov	r1, r3
 80008f2:	4804      	ldr	r0, [pc, #16]	@ (8000904 <HAL_UART_MspInit+0x44>)
 80008f4:	f000 fb6c 	bl	8000fd0 <HAL_GPIO_Init>
}
 80008f8:	bf00      	nop
 80008fa:	3720      	adds	r7, #32
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40023800 	.word	0x40023800
 8000904:	40020800 	.word	0x40020800

08000908 <HAL_TIM_IC_MspInit>:


void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	 ***********************************************************************/

	/*
	 * Start GPIOF Clock
	 */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000910:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <HAL_TIM_IC_MspInit+0x60>)
 8000912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000914:	4a14      	ldr	r2, [pc, #80]	@ (8000968 <HAL_TIM_IC_MspInit+0x60>)
 8000916:	f043 0320 	orr.w	r3, r3, #32
 800091a:	6313      	str	r3, [r2, #48]	@ 0x30
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <HAL_TIM_IC_MspInit+0x60>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000920:	f003 0320 	and.w	r3, r3, #32
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]

	/*
	 * Initialize and populate member of InitTypeDef structure for GPIO Peripheral
	 */
	GPIO_InitTypeDef GPIO_Init;
	memset(&GPIO_Init, 0, sizeof(GPIO_Init));
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	2214      	movs	r2, #20
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f003 fa62 	bl	8003dfa <memset>
	GPIO_Init.Pin = GPIO_PIN_6;
 8000936:	2340      	movs	r3, #64	@ 0x40
 8000938:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	613b      	str	r3, [r7, #16]
	GPIO_Init.Alternate = GPIO_AF3_TIM10;
 800093e:	2303      	movs	r3, #3
 8000940:	61fb      	str	r3, [r7, #28]

	/*
	 * Inititialize GPIOF Peripheral
	 */
	HAL_GPIO_Init(GPIOF, &GPIO_Init);
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	4619      	mov	r1, r3
 8000948:	4808      	ldr	r0, [pc, #32]	@ (800096c <HAL_TIM_IC_MspInit+0x64>)
 800094a:	f000 fb41 	bl	8000fd0 <HAL_GPIO_Init>

	/***********************************************************************
	 ***************          Configure PF6 for AF3          ***************
	 ***********************************************************************/
	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	210f      	movs	r1, #15
 8000952:	2019      	movs	r0, #25
 8000954:	f000 fadb 	bl	8000f0e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000958:	2019      	movs	r0, #25
 800095a:	f000 faf4 	bl	8000f46 <HAL_NVIC_EnableIRQ>

}
 800095e:	bf00      	nop
 8000960:	3720      	adds	r7, #32
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800
 800096c:	40021400 	.word	0x40021400

08000970 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <SystemInit+0x20>)
 8000976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800097a:	4a05      	ldr	r2, [pc, #20]	@ (8000990 <SystemInit+0x20>)
 800097c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000980:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <SystemClock_Config>:
extern char msg[100];
extern uint32_t input_captures[2];
extern uint8_t count;
extern uint8_t is_capture_done;

void SystemClock_Config(void) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b092      	sub	sp, #72	@ 0x48
 8000998:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef  oscInit;
	RCC_ClkInitTypeDef  clkInit;

	oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
 800099a:	2305      	movs	r3, #5
 800099c:	617b      	str	r3, [r7, #20]
	oscInit.HSEState = RCC_HSE_BYPASS;
 800099e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80009a2:	61bb      	str	r3, [r7, #24]
	oscInit.LSEState = RCC_LSE_ON;
 80009a4:	2301      	movs	r3, #1
 80009a6:	61fb      	str	r3, [r7, #28]
	oscInit.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009ac:	633b      	str	r3, [r7, #48]	@ 0x30
	oscInit.PLL.PLLM = 19;
 80009ae:	2313      	movs	r3, #19
 80009b0:	637b      	str	r3, [r7, #52]	@ 0x34
	oscInit.PLL.PLLN = 152;
 80009b2:	2398      	movs	r3, #152	@ 0x98
 80009b4:	63bb      	str	r3, [r7, #56]	@ 0x38
	oscInit.PLL.PLLP = RCC_PLLP_DIV2;
 80009b6:	2302      	movs	r3, #2
 80009b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	oscInit.PLL.PLLState = RCC_PLL_ON;
 80009ba:	2302      	movs	r3, #2
 80009bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if(HAL_RCC_OscConfig(&oscInit) != HAL_OK) {
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 fce0 	bl	8001388 <HAL_RCC_OscConfig>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0x3e>
		Error_Handler();
 80009ce:	f000 f939 	bl	8000c44 <Error_Handler>
	}

	clkInit.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80009d2:	230f      	movs	r3, #15
 80009d4:	603b      	str	r3, [r7, #0]
	clkInit.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d6:	2302      	movs	r3, #2
 80009d8:	607b      	str	r3, [r7, #4]
	clkInit.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80009da:	2380      	movs	r3, #128	@ 0x80
 80009dc:	60bb      	str	r3, [r7, #8]
	clkInit.APB1CLKDivider = RCC_HCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
	clkInit.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
	if( HAL_RCC_ClockConfig(&clkInit, FLASH_ACR_LATENCY_1WS) != HAL_OK) {
 80009e6:	463b      	mov	r3, r7
 80009e8:	2101      	movs	r1, #1
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 ff7a 	bl	80018e4 <HAL_RCC_ClockConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0x66>
		Error_Handler();
 80009f6:	f000 f925 	bl	8000c44 <Error_Handler>
	}

	__HAL_RCC_HSI_DISABLE(); // Turn off the HSI to save power now
 80009fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000a28 <SystemClock_Config+0x94>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000a28 <SystemClock_Config+0x94>)
 8000a00:	f023 0301 	bic.w	r3, r3, #1
 8000a04:	6013      	str	r3, [r2, #0]

	// Reconfigure Systick now to work withe the new System Clock Frequency
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000a06:	f001 f983 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4a07      	ldr	r2, [pc, #28]	@ (8000a2c <SystemClock_Config+0x98>)
 8000a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a12:	099b      	lsrs	r3, r3, #6
 8000a14:	4618      	mov	r0, r3
 8000a16:	f000 faa4 	bl	8000f62 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000a1a:	2004      	movs	r0, #4
 8000a1c:	f000 faae 	bl	8000f7c <HAL_SYSTICK_CLKSourceConfig>

}
 8000a20:	bf00      	nop
 8000a22:	3748      	adds	r7, #72	@ 0x48
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	10624dd3 	.word	0x10624dd3

08000a30 <Timer_Config>:

void Timer_Config(TIM_TypeDef *Instance, TIM_IC_InitTypeDef sConfig_nonConst, uint32_t Channel) {
 8000a30:	b084      	sub	sp, #16
 8000a32:	b5b0      	push	{r4, r5, r7, lr}
 8000a34:	b088      	sub	sp, #32
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8000a3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	// Start Timer Peripheral Clock
	__HAL_RCC_TIM10_CLK_ENABLE();
 8000a42:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <Timer_Config+0x88>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a46:	4a1c      	ldr	r2, [pc, #112]	@ (8000ab8 <Timer_Config+0x88>)
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab8 <Timer_Config+0x88>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]

	// Initialize Input Capture Timer
	htim10.Instance = Instance;
 8000a5a:	4a18      	ldr	r2, [pc, #96]	@ (8000abc <Timer_Config+0x8c>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6013      	str	r3, [r2, #0]
	htim10.Init = Init;
 8000a60:	4b16      	ldr	r3, [pc, #88]	@ (8000abc <Timer_Config+0x8c>)
 8000a62:	4a17      	ldr	r2, [pc, #92]	@ (8000ac0 <Timer_Config+0x90>)
 8000a64:	1d1c      	adds	r4, r3, #4
 8000a66:	4615      	mov	r5, r2
 8000a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a70:	e884 0003 	stmia.w	r4, {r0, r1}
	if(HAL_TIM_IC_Init(&htim10) != HAL_OK) {
 8000a74:	4811      	ldr	r0, [pc, #68]	@ (8000abc <Timer_Config+0x8c>)
 8000a76:	f001 f97f 	bl	8001d78 <HAL_TIM_IC_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <Timer_Config+0x54>
		Error_Handler();
 8000a80:	f000 f8e0 	bl	8000c44 <Error_Handler>
	};

	const TIM_IC_InitTypeDef sConfig = sConfig_nonConst;
 8000a84:	f107 0410 	add.w	r4, r7, #16
 8000a88:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000a8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  // Configure the Channel for the Input Capture Timer
	if(HAL_TIM_IC_ConfigChannel(&htim10, &sConfig, Channel) != HAL_OK) {
 8000a92:	f107 0310 	add.w	r3, r7, #16
 8000a96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4808      	ldr	r0, [pc, #32]	@ (8000abc <Timer_Config+0x8c>)
 8000a9c:	f001 fc1b 	bl	80022d6 <HAL_TIM_IC_ConfigChannel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <Timer_Config+0x7a>
		Error_Handler();
 8000aa6:	f000 f8cd 	bl	8000c44 <Error_Handler>
	};
}
 8000aaa:	bf00      	nop
 8000aac:	3720      	adds	r7, #32
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000ab4:	b004      	add	sp, #16
 8000ab6:	4770      	bx	lr
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	200001f0 	.word	0x200001f0
 8000ac0:	2000023c 	.word	0x2000023c

08000ac4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

	if(count == 1) {
 8000acc:	4b10      	ldr	r3, [pc, #64]	@ (8000b10 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d10b      	bne.n	8000aec <HAL_TIM_IC_CaptureCallback+0x28>
		input_captures[0] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ada:	4a0e      	ldr	r2, [pc, #56]	@ (8000b14 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000adc:	6013      	str	r3, [r2, #0]
		count++;
 8000ade:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b10 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000ae8:	701a      	strb	r2, [r3, #0]
	else {
		input_captures[1] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
		count = 1;
		is_capture_done = TRUE;
	}
}
 8000aea:	e00a      	b.n	8000b02 <HAL_TIM_IC_CaptureCallback+0x3e>
		input_captures[1] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000af2:	4a08      	ldr	r2, [pc, #32]	@ (8000b14 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000af4:	6053      	str	r3, [r2, #4]
		count = 1;
 8000af6:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
		is_capture_done = TRUE;
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000358 	.word	0x20000358
 8000b14:	20000350 	.word	0x20000350
 8000b18:	20000359 	.word	0x20000359

08000b1c <LSE_Init>:

void LSE_Init(void){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	if(HAL_RCC_OscConfig(RCC_OscInitStruct) != HAL_ERROR) {
		Error_Handler();
	}
#endif

	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_LSE, RCC_MCODIV_1);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8000b26:	2000      	movs	r0, #0
 8000b28:	f000 ffc8 	bl	8001abc <HAL_RCC_MCOConfig>
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <UART6_Init>:

void UART6_Init() {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
	// Start USART6 Clock
	__HAL_RCC_USART6_CLK_ENABLE();
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <UART6_Init+0x5c>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3a:	4a14      	ldr	r2, [pc, #80]	@ (8000b8c <UART6_Init+0x5c>)
 8000b3c:	f043 0320 	orr.w	r3, r3, #32
 8000b40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b42:	4b12      	ldr	r3, [pc, #72]	@ (8000b8c <UART6_Init+0x5c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b46:	f003 0320 	and.w	r3, r3, #32
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]

	// Initialize USART6 Handle
	huart6.Instance = USART6;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <UART6_Init+0x60>)
 8000b50:	4a10      	ldr	r2, [pc, #64]	@ (8000b94 <UART6_Init+0x64>)
 8000b52:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8000b54:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <UART6_Init+0x60>)
 8000b56:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b5a:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <UART6_Init+0x60>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <UART6_Init+0x60>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	60da      	str	r2, [r3, #12]
	huart6.Init.Mode = UART_MODE_TX;
 8000b68:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <UART6_Init+0x60>)
 8000b6a:	2208      	movs	r2, #8
 8000b6c:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <UART6_Init+0x60>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
	if(HAL_UART_Init(&huart6) != HAL_OK) {
 8000b74:	4806      	ldr	r0, [pc, #24]	@ (8000b90 <UART6_Init+0x60>)
 8000b76:	f001 fe8c 	bl	8002892 <HAL_UART_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <UART6_Init+0x54>
		Error_Handler();
 8000b80:	f000 f860 	bl	8000c44 <Error_Handler>
	}
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	20000264 	.word	0x20000264
 8000b94:	40011400 	.word	0x40011400

08000b98 <BTN_GPIO_Init>:

void BTN_GPIO_Init(void) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b9e:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <BTN_GPIO_Init+0x4c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	4a10      	ldr	r2, [pc, #64]	@ (8000be4 <BTN_GPIO_Init+0x4c>)
 8000ba4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000baa:	4b0e      	ldr	r3, [pc, #56]	@ (8000be4 <BTN_GPIO_Init+0x4c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef gpioJ_Init;
	memset(&gpioJ_Init, 0, sizeof(gpioJ_Init));
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2214      	movs	r2, #20
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f003 f91c 	bl	8003dfa <memset>
	gpioJ_Init.Pin = GPIO_PIN_1;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	607b      	str	r3, [r7, #4]
	gpioJ_Init.Mode = GPIO_MODE_INPUT;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
	gpioJ_Init.Pull = GPIO_PULLUP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	60fb      	str	r3, [r7, #12]
	gpioJ_Init.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOJ, &gpioJ_Init);
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4804      	ldr	r0, [pc, #16]	@ (8000be8 <BTN_GPIO_Init+0x50>)
 8000bd8:	f000 f9fa 	bl	8000fd0 <HAL_GPIO_Init>

}
 8000bdc:	bf00      	nop
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40022400 	.word	0x40022400

08000bec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	80fb      	strh	r3, [r7, #6]
	  memset(msg, 0, strlen(msg));
 8000bf6:	4810      	ldr	r0, [pc, #64]	@ (8000c38 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000bf8:	f7ff fb72 	bl	80002e0 <strlen>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	461a      	mov	r2, r3
 8000c00:	2100      	movs	r1, #0
 8000c02:	480d      	ldr	r0, [pc, #52]	@ (8000c38 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000c04:	f003 f8f9 	bl	8003dfa <memset>
	  sprintf(msg, "0\n");
 8000c08:	490c      	ldr	r1, [pc, #48]	@ (8000c3c <HAL_GPIO_EXTI_Callback+0x50>)
 8000c0a:	480b      	ldr	r0, [pc, #44]	@ (8000c38 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000c0c:	f003 f892 	bl	8003d34 <siprintf>
	  if(HAL_UART_Transmit(&huart6, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY) != HAL_OK) {
 8000c10:	4809      	ldr	r0, [pc, #36]	@ (8000c38 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000c12:	f7ff fb65 	bl	80002e0 <strlen>
 8000c16:	4603      	mov	r3, r0
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c1e:	4906      	ldr	r1, [pc, #24]	@ (8000c38 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000c20:	4807      	ldr	r0, [pc, #28]	@ (8000c40 <HAL_GPIO_EXTI_Callback+0x54>)
 8000c22:	f001 fe84 	bl	800292e <HAL_UART_Transmit>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_GPIO_EXTI_Callback+0x44>
		Error_Handler();
 8000c2c:	f000 f80a 	bl	8000c44 <Error_Handler>
	  }
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	200002ec 	.word	0x200002ec
 8000c3c:	08005fc8 	.word	0x08005fc8
 8000c40:	20000264 	.word	0x20000264

08000c44 <Error_Handler>:


void Error_Handler(void) {
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
	while(1);
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <Error_Handler+0x4>

08000c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c84 <LoopFillZerobss+0xe>
 
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c50:	f7ff fe8e 	bl	8000970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c54:	480c      	ldr	r0, [pc, #48]	@ (8000c88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c56:	490d      	ldr	r1, [pc, #52]	@ (8000c8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c58:	4a0d      	ldr	r2, [pc, #52]	@ (8000c90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f003 f911 	bl	8003ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7e:	f7ff fcc9 	bl	8000614 <main>
  bx  lr    
 8000c82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c84:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8000c90:	08006368 	.word	0x08006368
  ldr r2, =_sbss
 8000c94:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000c98:	200004b0 	.word	0x200004b0

08000c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC_IRQHandler>

08000c9e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca2:	2003      	movs	r0, #3
 8000ca4:	f000 f928 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca8:	200f      	movs	r0, #15
 8000caa:	f000 f805 	bl	8000cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cae:	f7ff fde5 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb2:	2300      	movs	r3, #0
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <HAL_InitTick+0x54>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <HAL_InitTick+0x58>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f943 	bl	8000f62 <HAL_SYSTICK_Config>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00e      	b.n	8000d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d80a      	bhi.n	8000d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cec:	2200      	movs	r2, #0
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cf4:	f000 f90b 	bl	8000f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf8:	4a06      	ldr	r2, [pc, #24]	@ (8000d14 <HAL_InitTick+0x5c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e000      	b.n	8000d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000008 	.word	0x20000008
 8000d14:	20000004 	.word	0x20000004

08000d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	2000035c 	.word	0x2000035c

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b03      	ldr	r3, [pc, #12]	@ (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	2000035c 	.word	0x2000035c

08000d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <__NVIC_SetPriorityGrouping+0x40>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d74:	4013      	ands	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	4313      	orrs	r3, r2
 8000d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d86:	4a04      	ldr	r2, [pc, #16]	@ (8000d98 <__NVIC_SetPriorityGrouping+0x40>)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	60d3      	str	r3, [r2, #12]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00
 8000d9c:	05fa0000 	.word	0x05fa0000

08000da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da4:	4b04      	ldr	r3, [pc, #16]	@ (8000db8 <__NVIC_GetPriorityGrouping+0x18>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	f003 0307 	and.w	r3, r3, #7
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db0b      	blt.n	8000de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	f003 021f 	and.w	r2, r3, #31
 8000dd4:	4907      	ldr	r1, [pc, #28]	@ (8000df4 <__NVIC_EnableIRQ+0x38>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	095b      	lsrs	r3, r3, #5
 8000ddc:	2001      	movs	r0, #1
 8000dde:	fa00 f202 	lsl.w	r2, r0, r2
 8000de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000e100 	.word	0xe000e100

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	@ (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	@ (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	@ 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	@ 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ec4:	d301      	bcc.n	8000eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00f      	b.n	8000eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eca:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef4 <SysTick_Config+0x40>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ed8:	f7ff ff8e 	bl	8000df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000edc:	4b05      	ldr	r3, [pc, #20]	@ (8000ef4 <SysTick_Config+0x40>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee2:	4b04      	ldr	r3, [pc, #16]	@ (8000ef4 <SysTick_Config+0x40>)
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	e000e010 	.word	0xe000e010

08000ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff29 	bl	8000d58 <__NVIC_SetPriorityGrouping>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f20:	f7ff ff3e 	bl	8000da0 <__NVIC_GetPriorityGrouping>
 8000f24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	6978      	ldr	r0, [r7, #20]
 8000f2c:	f7ff ff8e 	bl	8000e4c <NVIC_EncodePriority>
 8000f30:	4602      	mov	r2, r0
 8000f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff5d 	bl	8000df8 <__NVIC_SetPriority>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff31 	bl	8000dbc <__NVIC_EnableIRQ>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ffa2 	bl	8000eb4 <SysTick_Config>
 8000f70:	4603      	mov	r3, r0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	d106      	bne.n	8000f98 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f8a:	4b09      	ldr	r3, [pc, #36]	@ (8000fb0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a08      	ldr	r2, [pc, #32]	@ (8000fb0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000f96:	e005      	b.n	8000fa4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000f98:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a04      	ldr	r2, [pc, #16]	@ (8000fb0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f9e:	f023 0304 	bic.w	r3, r3, #4
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000e010 	.word	0xe000e010

08000fb4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000fb8:	f000 f802 	bl	8000fc0 <HAL_SYSTICK_Callback>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	@ 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
 8000fee:	e175      	b.n	80012dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	429a      	cmp	r2, r3
 800100a:	f040 8164 	bne.w	80012d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	2b01      	cmp	r3, #1
 8001018:	d005      	beq.n	8001026 <HAL_GPIO_Init+0x56>
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d130      	bne.n	8001088 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	2203      	movs	r2, #3
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800105c:	2201      	movs	r2, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	091b      	lsrs	r3, r3, #4
 8001072:	f003 0201 	and.w	r2, r3, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0303 	and.w	r3, r3, #3
 8001090:	2b03      	cmp	r3, #3
 8001092:	d017      	beq.n	80010c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d123      	bne.n	8001118 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	08da      	lsrs	r2, r3, #3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3208      	adds	r2, #8
 80010d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	220f      	movs	r2, #15
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	691a      	ldr	r2, [r3, #16]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	08da      	lsrs	r2, r3, #3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3208      	adds	r2, #8
 8001112:	69b9      	ldr	r1, [r7, #24]
 8001114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0203 	and.w	r2, r3, #3
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 80be 	beq.w	80012d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	4b66      	ldr	r3, [pc, #408]	@ (80012f4 <HAL_GPIO_Init+0x324>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115e:	4a65      	ldr	r2, [pc, #404]	@ (80012f4 <HAL_GPIO_Init+0x324>)
 8001160:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001164:	6453      	str	r3, [r2, #68]	@ 0x44
 8001166:	4b63      	ldr	r3, [pc, #396]	@ (80012f4 <HAL_GPIO_Init+0x324>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001172:	4a61      	ldr	r2, [pc, #388]	@ (80012f8 <HAL_GPIO_Init+0x328>)
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	089b      	lsrs	r3, r3, #2
 8001178:	3302      	adds	r3, #2
 800117a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	220f      	movs	r2, #15
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a58      	ldr	r2, [pc, #352]	@ (80012fc <HAL_GPIO_Init+0x32c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d037      	beq.n	800120e <HAL_GPIO_Init+0x23e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a57      	ldr	r2, [pc, #348]	@ (8001300 <HAL_GPIO_Init+0x330>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d031      	beq.n	800120a <HAL_GPIO_Init+0x23a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a56      	ldr	r2, [pc, #344]	@ (8001304 <HAL_GPIO_Init+0x334>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d02b      	beq.n	8001206 <HAL_GPIO_Init+0x236>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a55      	ldr	r2, [pc, #340]	@ (8001308 <HAL_GPIO_Init+0x338>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d025      	beq.n	8001202 <HAL_GPIO_Init+0x232>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a54      	ldr	r2, [pc, #336]	@ (800130c <HAL_GPIO_Init+0x33c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d01f      	beq.n	80011fe <HAL_GPIO_Init+0x22e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a53      	ldr	r2, [pc, #332]	@ (8001310 <HAL_GPIO_Init+0x340>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d019      	beq.n	80011fa <HAL_GPIO_Init+0x22a>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a52      	ldr	r2, [pc, #328]	@ (8001314 <HAL_GPIO_Init+0x344>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d013      	beq.n	80011f6 <HAL_GPIO_Init+0x226>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a51      	ldr	r2, [pc, #324]	@ (8001318 <HAL_GPIO_Init+0x348>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d00d      	beq.n	80011f2 <HAL_GPIO_Init+0x222>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a50      	ldr	r2, [pc, #320]	@ (800131c <HAL_GPIO_Init+0x34c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d007      	beq.n	80011ee <HAL_GPIO_Init+0x21e>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001320 <HAL_GPIO_Init+0x350>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d101      	bne.n	80011ea <HAL_GPIO_Init+0x21a>
 80011e6:	2309      	movs	r3, #9
 80011e8:	e012      	b.n	8001210 <HAL_GPIO_Init+0x240>
 80011ea:	230a      	movs	r3, #10
 80011ec:	e010      	b.n	8001210 <HAL_GPIO_Init+0x240>
 80011ee:	2308      	movs	r3, #8
 80011f0:	e00e      	b.n	8001210 <HAL_GPIO_Init+0x240>
 80011f2:	2307      	movs	r3, #7
 80011f4:	e00c      	b.n	8001210 <HAL_GPIO_Init+0x240>
 80011f6:	2306      	movs	r3, #6
 80011f8:	e00a      	b.n	8001210 <HAL_GPIO_Init+0x240>
 80011fa:	2305      	movs	r3, #5
 80011fc:	e008      	b.n	8001210 <HAL_GPIO_Init+0x240>
 80011fe:	2304      	movs	r3, #4
 8001200:	e006      	b.n	8001210 <HAL_GPIO_Init+0x240>
 8001202:	2303      	movs	r3, #3
 8001204:	e004      	b.n	8001210 <HAL_GPIO_Init+0x240>
 8001206:	2302      	movs	r3, #2
 8001208:	e002      	b.n	8001210 <HAL_GPIO_Init+0x240>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <HAL_GPIO_Init+0x240>
 800120e:	2300      	movs	r3, #0
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	f002 0203 	and.w	r2, r2, #3
 8001216:	0092      	lsls	r2, r2, #2
 8001218:	4093      	lsls	r3, r2
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001220:	4935      	ldr	r1, [pc, #212]	@ (80012f8 <HAL_GPIO_Init+0x328>)
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	3302      	adds	r3, #2
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800122e:	4b3d      	ldr	r3, [pc, #244]	@ (8001324 <HAL_GPIO_Init+0x354>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001252:	4a34      	ldr	r2, [pc, #208]	@ (8001324 <HAL_GPIO_Init+0x354>)
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001258:	4b32      	ldr	r3, [pc, #200]	@ (8001324 <HAL_GPIO_Init+0x354>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800127c:	4a29      	ldr	r2, [pc, #164]	@ (8001324 <HAL_GPIO_Init+0x354>)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001282:	4b28      	ldr	r3, [pc, #160]	@ (8001324 <HAL_GPIO_Init+0x354>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001324 <HAL_GPIO_Init+0x354>)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <HAL_GPIO_Init+0x354>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012d0:	4a14      	ldr	r2, [pc, #80]	@ (8001324 <HAL_GPIO_Init+0x354>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3301      	adds	r3, #1
 80012da:	61fb      	str	r3, [r7, #28]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	2b0f      	cmp	r3, #15
 80012e0:	f67f ae86 	bls.w	8000ff0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3724      	adds	r7, #36	@ 0x24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40013800 	.word	0x40013800
 80012fc:	40020000 	.word	0x40020000
 8001300:	40020400 	.word	0x40020400
 8001304:	40020800 	.word	0x40020800
 8001308:	40020c00 	.word	0x40020c00
 800130c:	40021000 	.word	0x40021000
 8001310:	40021400 	.word	0x40021400
 8001314:	40021800 	.word	0x40021800
 8001318:	40021c00 	.word	0x40021c00
 800131c:	40022000 	.word	0x40022000
 8001320:	40022400 	.word	0x40022400
 8001324:	40013c00 	.word	0x40013c00

08001328 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691a      	ldr	r2, [r3, #16]
 8001338:	887b      	ldrh	r3, [r7, #2]
 800133a:	4013      	ands	r3, r2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d002      	beq.n	8001346 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001340:	2301      	movs	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
 8001344:	e001      	b.n	800134a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001346:	2300      	movs	r3, #0
 8001348:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800134a:	7bfb      	ldrb	r3, [r7, #15]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001362:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001364:	695a      	ldr	r2, [r3, #20]
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	4013      	ands	r3, r2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d006      	beq.n	800137c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800136e:	4a05      	ldr	r2, [pc, #20]	@ (8001384 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fc38 	bl	8000bec <HAL_GPIO_EXTI_Callback>
  }
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40013c00 	.word	0x40013c00

08001388 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001390:	2300      	movs	r3, #0
 8001392:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e29b      	b.n	80018d6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 8087 	beq.w	80014ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013ac:	4b96      	ldr	r3, [pc, #600]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 030c 	and.w	r3, r3, #12
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d00c      	beq.n	80013d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013b8:	4b93      	ldr	r3, [pc, #588]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 030c 	and.w	r3, r3, #12
 80013c0:	2b08      	cmp	r3, #8
 80013c2:	d112      	bne.n	80013ea <HAL_RCC_OscConfig+0x62>
 80013c4:	4b90      	ldr	r3, [pc, #576]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013d0:	d10b      	bne.n	80013ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d2:	4b8d      	ldr	r3, [pc, #564]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d06c      	beq.n	80014b8 <HAL_RCC_OscConfig+0x130>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d168      	bne.n	80014b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e275      	b.n	80018d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013f2:	d106      	bne.n	8001402 <HAL_RCC_OscConfig+0x7a>
 80013f4:	4b84      	ldr	r3, [pc, #528]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a83      	ldr	r2, [pc, #524]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 80013fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	e02e      	b.n	8001460 <HAL_RCC_OscConfig+0xd8>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d10c      	bne.n	8001424 <HAL_RCC_OscConfig+0x9c>
 800140a:	4b7f      	ldr	r3, [pc, #508]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a7e      	ldr	r2, [pc, #504]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 8001410:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	4b7c      	ldr	r3, [pc, #496]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a7b      	ldr	r2, [pc, #492]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 800141c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e01d      	b.n	8001460 <HAL_RCC_OscConfig+0xd8>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800142c:	d10c      	bne.n	8001448 <HAL_RCC_OscConfig+0xc0>
 800142e:	4b76      	ldr	r3, [pc, #472]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a75      	ldr	r2, [pc, #468]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 8001434:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	4b73      	ldr	r3, [pc, #460]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a72      	ldr	r2, [pc, #456]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 8001440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	e00b      	b.n	8001460 <HAL_RCC_OscConfig+0xd8>
 8001448:	4b6f      	ldr	r3, [pc, #444]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a6e      	ldr	r2, [pc, #440]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 800144e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	4b6c      	ldr	r3, [pc, #432]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a6b      	ldr	r2, [pc, #428]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 800145a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800145e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d013      	beq.n	8001490 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001468:	f7ff fc6a 	bl	8000d40 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001470:	f7ff fc66 	bl	8000d40 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b64      	cmp	r3, #100	@ 0x64
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e229      	b.n	80018d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001482:	4b61      	ldr	r3, [pc, #388]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0f0      	beq.n	8001470 <HAL_RCC_OscConfig+0xe8>
 800148e:	e014      	b.n	80014ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001490:	f7ff fc56 	bl	8000d40 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001498:	f7ff fc52 	bl	8000d40 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b64      	cmp	r3, #100	@ 0x64
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e215      	b.n	80018d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014aa:	4b57      	ldr	r3, [pc, #348]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0x110>
 80014b6:	e000      	b.n	80014ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d069      	beq.n	800159a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014c6:	4b50      	ldr	r3, [pc, #320]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00b      	beq.n	80014ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d11c      	bne.n	8001518 <HAL_RCC_OscConfig+0x190>
 80014de:	4b4a      	ldr	r3, [pc, #296]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d116      	bne.n	8001518 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ea:	4b47      	ldr	r3, [pc, #284]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d005      	beq.n	8001502 <HAL_RCC_OscConfig+0x17a>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d001      	beq.n	8001502 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e1e9      	b.n	80018d6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001502:	4b41      	ldr	r3, [pc, #260]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	493d      	ldr	r1, [pc, #244]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 8001512:	4313      	orrs	r3, r2
 8001514:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001516:	e040      	b.n	800159a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d023      	beq.n	8001568 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001520:	4b39      	ldr	r3, [pc, #228]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a38      	ldr	r2, [pc, #224]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152c:	f7ff fc08 	bl	8000d40 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001534:	f7ff fc04 	bl	8000d40 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e1c7      	b.n	80018d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001546:	4b30      	ldr	r3, [pc, #192]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001552:	4b2d      	ldr	r3, [pc, #180]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	4929      	ldr	r1, [pc, #164]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 8001562:	4313      	orrs	r3, r2
 8001564:	600b      	str	r3, [r1, #0]
 8001566:	e018      	b.n	800159a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001568:	4b27      	ldr	r3, [pc, #156]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a26      	ldr	r2, [pc, #152]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 800156e:	f023 0301 	bic.w	r3, r3, #1
 8001572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001574:	f7ff fbe4 	bl	8000d40 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800157c:	f7ff fbe0 	bl	8000d40 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e1a3      	b.n	80018d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158e:	4b1e      	ldr	r3, [pc, #120]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d038      	beq.n	8001618 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d019      	beq.n	80015e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ae:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 80015b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015b2:	4a15      	ldr	r2, [pc, #84]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ba:	f7ff fbc1 	bl	8000d40 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c2:	f7ff fbbd 	bl	8000d40 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e180      	b.n	80018d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 80015d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0x23a>
 80015e0:	e01a      	b.n	8001618 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e2:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 80015e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015e6:	4a08      	ldr	r2, [pc, #32]	@ (8001608 <HAL_RCC_OscConfig+0x280>)
 80015e8:	f023 0301 	bic.w	r3, r3, #1
 80015ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ee:	f7ff fba7 	bl	8000d40 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f4:	e00a      	b.n	800160c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f6:	f7ff fba3 	bl	8000d40 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d903      	bls.n	800160c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e166      	b.n	80018d6 <HAL_RCC_OscConfig+0x54e>
 8001608:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800160c:	4b92      	ldr	r3, [pc, #584]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 800160e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1ee      	bne.n	80015f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 80a4 	beq.w	800176e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001626:	4b8c      	ldr	r3, [pc, #560]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10d      	bne.n	800164e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	4b89      	ldr	r3, [pc, #548]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001636:	4a88      	ldr	r2, [pc, #544]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800163c:	6413      	str	r3, [r2, #64]	@ 0x40
 800163e:	4b86      	ldr	r3, [pc, #536]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800164a:	2301      	movs	r3, #1
 800164c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800164e:	4b83      	ldr	r3, [pc, #524]	@ (800185c <HAL_RCC_OscConfig+0x4d4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001656:	2b00      	cmp	r3, #0
 8001658:	d118      	bne.n	800168c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800165a:	4b80      	ldr	r3, [pc, #512]	@ (800185c <HAL_RCC_OscConfig+0x4d4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a7f      	ldr	r2, [pc, #508]	@ (800185c <HAL_RCC_OscConfig+0x4d4>)
 8001660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001666:	f7ff fb6b 	bl	8000d40 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800166e:	f7ff fb67 	bl	8000d40 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b64      	cmp	r3, #100	@ 0x64
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e12a      	b.n	80018d6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001680:	4b76      	ldr	r3, [pc, #472]	@ (800185c <HAL_RCC_OscConfig+0x4d4>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0f0      	beq.n	800166e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d106      	bne.n	80016a2 <HAL_RCC_OscConfig+0x31a>
 8001694:	4b70      	ldr	r3, [pc, #448]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 8001696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001698:	4a6f      	ldr	r2, [pc, #444]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6713      	str	r3, [r2, #112]	@ 0x70
 80016a0:	e02d      	b.n	80016fe <HAL_RCC_OscConfig+0x376>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x33c>
 80016aa:	4b6b      	ldr	r3, [pc, #428]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 80016ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ae:	4a6a      	ldr	r2, [pc, #424]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80016b6:	4b68      	ldr	r3, [pc, #416]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 80016b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ba:	4a67      	ldr	r2, [pc, #412]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 80016bc:	f023 0304 	bic.w	r3, r3, #4
 80016c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80016c2:	e01c      	b.n	80016fe <HAL_RCC_OscConfig+0x376>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2b05      	cmp	r3, #5
 80016ca:	d10c      	bne.n	80016e6 <HAL_RCC_OscConfig+0x35e>
 80016cc:	4b62      	ldr	r3, [pc, #392]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 80016ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d0:	4a61      	ldr	r2, [pc, #388]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 80016d2:	f043 0304 	orr.w	r3, r3, #4
 80016d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80016d8:	4b5f      	ldr	r3, [pc, #380]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016dc:	4a5e      	ldr	r2, [pc, #376]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016e4:	e00b      	b.n	80016fe <HAL_RCC_OscConfig+0x376>
 80016e6:	4b5c      	ldr	r3, [pc, #368]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 80016e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ea:	4a5b      	ldr	r2, [pc, #364]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 80016ec:	f023 0301 	bic.w	r3, r3, #1
 80016f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80016f2:	4b59      	ldr	r3, [pc, #356]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 80016f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016f6:	4a58      	ldr	r2, [pc, #352]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 80016f8:	f023 0304 	bic.w	r3, r3, #4
 80016fc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d015      	beq.n	8001732 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001706:	f7ff fb1b 	bl	8000d40 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800170c:	e00a      	b.n	8001724 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170e:	f7ff fb17 	bl	8000d40 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800171c:	4293      	cmp	r3, r2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e0d8      	b.n	80018d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001724:	4b4c      	ldr	r3, [pc, #304]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 8001726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0ee      	beq.n	800170e <HAL_RCC_OscConfig+0x386>
 8001730:	e014      	b.n	800175c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001732:	f7ff fb05 	bl	8000d40 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001738:	e00a      	b.n	8001750 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173a:	f7ff fb01 	bl	8000d40 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001748:	4293      	cmp	r3, r2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e0c2      	b.n	80018d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001750:	4b41      	ldr	r3, [pc, #260]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 8001752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1ee      	bne.n	800173a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800175c:	7dfb      	ldrb	r3, [r7, #23]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d105      	bne.n	800176e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001762:	4b3d      	ldr	r3, [pc, #244]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	4a3c      	ldr	r2, [pc, #240]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 8001768:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800176c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 80ae 	beq.w	80018d4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001778:	4b37      	ldr	r3, [pc, #220]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 030c 	and.w	r3, r3, #12
 8001780:	2b08      	cmp	r3, #8
 8001782:	d06d      	beq.n	8001860 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d14b      	bne.n	8001824 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178c:	4b32      	ldr	r3, [pc, #200]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a31      	ldr	r2, [pc, #196]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 8001792:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001798:	f7ff fad2 	bl	8000d40 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a0:	f7ff face 	bl	8000d40 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e091      	b.n	80018d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b2:	4b29      	ldr	r3, [pc, #164]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69da      	ldr	r2, [r3, #28]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017cc:	019b      	lsls	r3, r3, #6
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d4:	085b      	lsrs	r3, r3, #1
 80017d6:	3b01      	subs	r3, #1
 80017d8:	041b      	lsls	r3, r3, #16
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e0:	061b      	lsls	r3, r3, #24
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e8:	071b      	lsls	r3, r3, #28
 80017ea:	491b      	ldr	r1, [pc, #108]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017f0:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a18      	ldr	r2, [pc, #96]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 80017f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fc:	f7ff faa0 	bl	8000d40 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001804:	f7ff fa9c 	bl	8000d40 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e05f      	b.n	80018d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001816:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0x47c>
 8001822:	e057      	b.n	80018d4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001824:	4b0c      	ldr	r3, [pc, #48]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0b      	ldr	r2, [pc, #44]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 800182a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800182e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff fa86 	bl	8000d40 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001838:	f7ff fa82 	bl	8000d40 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e045      	b.n	80018d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184a:	4b03      	ldr	r3, [pc, #12]	@ (8001858 <HAL_RCC_OscConfig+0x4d0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x4b0>
 8001856:	e03d      	b.n	80018d4 <HAL_RCC_OscConfig+0x54c>
 8001858:	40023800 	.word	0x40023800
 800185c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001860:	4b1f      	ldr	r3, [pc, #124]	@ (80018e0 <HAL_RCC_OscConfig+0x558>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d030      	beq.n	80018d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001878:	429a      	cmp	r2, r3
 800187a:	d129      	bne.n	80018d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001886:	429a      	cmp	r2, r3
 8001888:	d122      	bne.n	80018d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001890:	4013      	ands	r3, r2
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001896:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001898:	4293      	cmp	r3, r2
 800189a:	d119      	bne.n	80018d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a6:	085b      	lsrs	r3, r3, #1
 80018a8:	3b01      	subs	r3, #1
 80018aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d10f      	bne.n	80018d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d107      	bne.n	80018d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800

080018e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0d0      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018fc:	4b6a      	ldr	r3, [pc, #424]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 030f 	and.w	r3, r3, #15
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d910      	bls.n	800192c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190a:	4b67      	ldr	r3, [pc, #412]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f023 020f 	bic.w	r2, r3, #15
 8001912:	4965      	ldr	r1, [pc, #404]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	4313      	orrs	r3, r2
 8001918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800191a:	4b63      	ldr	r3, [pc, #396]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d001      	beq.n	800192c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0b8      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d020      	beq.n	800197a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001944:	4b59      	ldr	r3, [pc, #356]	@ (8001aac <HAL_RCC_ClockConfig+0x1c8>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	4a58      	ldr	r2, [pc, #352]	@ (8001aac <HAL_RCC_ClockConfig+0x1c8>)
 800194a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800194e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0308 	and.w	r3, r3, #8
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800195c:	4b53      	ldr	r3, [pc, #332]	@ (8001aac <HAL_RCC_ClockConfig+0x1c8>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	4a52      	ldr	r2, [pc, #328]	@ (8001aac <HAL_RCC_ClockConfig+0x1c8>)
 8001962:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001966:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001968:	4b50      	ldr	r3, [pc, #320]	@ (8001aac <HAL_RCC_ClockConfig+0x1c8>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	494d      	ldr	r1, [pc, #308]	@ (8001aac <HAL_RCC_ClockConfig+0x1c8>)
 8001976:	4313      	orrs	r3, r2
 8001978:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d040      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d107      	bne.n	800199e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198e:	4b47      	ldr	r3, [pc, #284]	@ (8001aac <HAL_RCC_ClockConfig+0x1c8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d115      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e07f      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a6:	4b41      	ldr	r3, [pc, #260]	@ (8001aac <HAL_RCC_ClockConfig+0x1c8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d109      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e073      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b6:	4b3d      	ldr	r3, [pc, #244]	@ (8001aac <HAL_RCC_ClockConfig+0x1c8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e06b      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019c6:	4b39      	ldr	r3, [pc, #228]	@ (8001aac <HAL_RCC_ClockConfig+0x1c8>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f023 0203 	bic.w	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4936      	ldr	r1, [pc, #216]	@ (8001aac <HAL_RCC_ClockConfig+0x1c8>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019d8:	f7ff f9b2 	bl	8000d40 <HAL_GetTick>
 80019dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019de:	e00a      	b.n	80019f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e0:	f7ff f9ae 	bl	8000d40 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e053      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f6:	4b2d      	ldr	r3, [pc, #180]	@ (8001aac <HAL_RCC_ClockConfig+0x1c8>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 020c 	and.w	r2, r3, #12
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d1eb      	bne.n	80019e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a08:	4b27      	ldr	r3, [pc, #156]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d210      	bcs.n	8001a38 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a16:	4b24      	ldr	r3, [pc, #144]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 020f 	bic.w	r2, r3, #15
 8001a1e:	4922      	ldr	r1, [pc, #136]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a26:	4b20      	ldr	r3, [pc, #128]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e032      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d008      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a44:	4b19      	ldr	r3, [pc, #100]	@ (8001aac <HAL_RCC_ClockConfig+0x1c8>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	4916      	ldr	r1, [pc, #88]	@ (8001aac <HAL_RCC_ClockConfig+0x1c8>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d009      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a62:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <HAL_RCC_ClockConfig+0x1c8>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	490e      	ldr	r1, [pc, #56]	@ (8001aac <HAL_RCC_ClockConfig+0x1c8>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a76:	f000 f885 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001aac <HAL_RCC_ClockConfig+0x1c8>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	091b      	lsrs	r3, r3, #4
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	490a      	ldr	r1, [pc, #40]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1cc>)
 8001a88:	5ccb      	ldrb	r3, [r1, r3]
 8001a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8e:	4a09      	ldr	r2, [pc, #36]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1d0>)
 8001a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a92:	4b09      	ldr	r3, [pc, #36]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1d4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff f90e 	bl	8000cb8 <HAL_InitTick>

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023c00 	.word	0x40023c00
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	08005fcc 	.word	0x08005fcc
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	20000004 	.word	0x20000004

08001abc <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08c      	sub	sp, #48	@ 0x30
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d127      	bne.n	8001b1e <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8001ace:	4b2a      	ldr	r3, [pc, #168]	@ (8001b78 <HAL_RCC_MCOConfig+0xbc>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	4a29      	ldr	r2, [pc, #164]	@ (8001b78 <HAL_RCC_MCOConfig+0xbc>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ada:	4b27      	ldr	r3, [pc, #156]	@ (8001b78 <HAL_RCC_MCOConfig+0xbc>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	61bb      	str	r3, [r7, #24]
 8001ae4:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8001ae6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001af8:	2300      	movs	r3, #0
 8001afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001afc:	f107 031c 	add.w	r3, r7, #28
 8001b00:	4619      	mov	r1, r3
 8001b02:	481e      	ldr	r0, [pc, #120]	@ (8001b7c <HAL_RCC_MCOConfig+0xc0>)
 8001b04:	f7ff fa64 	bl	8000fd0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8001b08:	4b1b      	ldr	r3, [pc, #108]	@ (8001b78 <HAL_RCC_MCOConfig+0xbc>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	430b      	orrs	r3, r1
 8001b16:	4918      	ldr	r1, [pc, #96]	@ (8001b78 <HAL_RCC_MCOConfig+0xbc>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 8001b1c:	e027      	b.n	8001b6e <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 8001b1e:	4b16      	ldr	r3, [pc, #88]	@ (8001b78 <HAL_RCC_MCOConfig+0xbc>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	4a15      	ldr	r2, [pc, #84]	@ (8001b78 <HAL_RCC_MCOConfig+0xbc>)
 8001b24:	f043 0304 	orr.w	r3, r3, #4
 8001b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2a:	4b13      	ldr	r3, [pc, #76]	@ (8001b78 <HAL_RCC_MCOConfig+0xbc>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8001b36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001b40:	2303      	movs	r3, #3
 8001b42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	4619      	mov	r1, r3
 8001b52:	480b      	ldr	r0, [pc, #44]	@ (8001b80 <HAL_RCC_MCOConfig+0xc4>)
 8001b54:	f7ff fa3c 	bl	8000fd0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 8001b58:	4b07      	ldr	r3, [pc, #28]	@ (8001b78 <HAL_RCC_MCOConfig+0xbc>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	00d9      	lsls	r1, r3, #3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	430b      	orrs	r3, r1
 8001b68:	4903      	ldr	r1, [pc, #12]	@ (8001b78 <HAL_RCC_MCOConfig+0xbc>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
}
 8001b6e:	bf00      	nop
 8001b70:	3730      	adds	r7, #48	@ 0x30
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	40020800 	.word	0x40020800

08001b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b88:	b090      	sub	sp, #64	@ 0x40
 8001b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b90:	2300      	movs	r3, #0
 8001b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b94:	2300      	movs	r3, #0
 8001b96:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b9c:	4b59      	ldr	r3, [pc, #356]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 030c 	and.w	r3, r3, #12
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d00d      	beq.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	f200 80a1 	bhi.w	8001cf0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d003      	beq.n	8001bbe <HAL_RCC_GetSysClockFreq+0x3a>
 8001bb6:	e09b      	b.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bb8:	4b53      	ldr	r3, [pc, #332]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bbc:	e09b      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bbe:	4b53      	ldr	r3, [pc, #332]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x188>)
 8001bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bc2:	e098      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bc4:	4b4f      	ldr	r3, [pc, #316]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bcc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001bce:	4b4d      	ldr	r3, [pc, #308]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d028      	beq.n	8001c2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bda:	4b4a      	ldr	r3, [pc, #296]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	099b      	lsrs	r3, r3, #6
 8001be0:	2200      	movs	r2, #0
 8001be2:	623b      	str	r3, [r7, #32]
 8001be4:	627a      	str	r2, [r7, #36]	@ 0x24
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bec:	2100      	movs	r1, #0
 8001bee:	4b47      	ldr	r3, [pc, #284]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x188>)
 8001bf0:	fb03 f201 	mul.w	r2, r3, r1
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	fb00 f303 	mul.w	r3, r0, r3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	4a43      	ldr	r2, [pc, #268]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x188>)
 8001bfe:	fba0 1202 	umull	r1, r2, r0, r2
 8001c02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c04:	460a      	mov	r2, r1
 8001c06:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001c08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c0a:	4413      	add	r3, r2
 8001c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c10:	2200      	movs	r2, #0
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	61fa      	str	r2, [r7, #28]
 8001c16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c1e:	f7fe fb67 	bl	80002f0 <__aeabi_uldivmod>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4613      	mov	r3, r2
 8001c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c2a:	e053      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2c:	4b35      	ldr	r3, [pc, #212]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	099b      	lsrs	r3, r3, #6
 8001c32:	2200      	movs	r2, #0
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	617a      	str	r2, [r7, #20]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c3e:	f04f 0b00 	mov.w	fp, #0
 8001c42:	4652      	mov	r2, sl
 8001c44:	465b      	mov	r3, fp
 8001c46:	f04f 0000 	mov.w	r0, #0
 8001c4a:	f04f 0100 	mov.w	r1, #0
 8001c4e:	0159      	lsls	r1, r3, #5
 8001c50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c54:	0150      	lsls	r0, r2, #5
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	ebb2 080a 	subs.w	r8, r2, sl
 8001c5e:	eb63 090b 	sbc.w	r9, r3, fp
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c76:	ebb2 0408 	subs.w	r4, r2, r8
 8001c7a:	eb63 0509 	sbc.w	r5, r3, r9
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	00eb      	lsls	r3, r5, #3
 8001c88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c8c:	00e2      	lsls	r2, r4, #3
 8001c8e:	4614      	mov	r4, r2
 8001c90:	461d      	mov	r5, r3
 8001c92:	eb14 030a 	adds.w	r3, r4, sl
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	eb45 030b 	adc.w	r3, r5, fp
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001caa:	4629      	mov	r1, r5
 8001cac:	028b      	lsls	r3, r1, #10
 8001cae:	4621      	mov	r1, r4
 8001cb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cb4:	4621      	mov	r1, r4
 8001cb6:	028a      	lsls	r2, r1, #10
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	60fa      	str	r2, [r7, #12]
 8001cc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cc8:	f7fe fb12 	bl	80002f0 <__aeabi_uldivmod>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	0c1b      	lsrs	r3, r3, #16
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	3301      	adds	r3, #1
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001ce4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001cee:	e002      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cf0:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001cf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3740      	adds	r7, #64	@ 0x40
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	00f42400 	.word	0x00f42400
 8001d0c:	017d7840 	.word	0x017d7840

08001d10 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d14:	4b03      	ldr	r3, [pc, #12]	@ (8001d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000000 	.word	0x20000000

08001d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d2c:	f7ff fff0 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b05      	ldr	r3, [pc, #20]	@ (8001d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	0a9b      	lsrs	r3, r3, #10
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	4903      	ldr	r1, [pc, #12]	@ (8001d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d3e:	5ccb      	ldrb	r3, [r1, r3]
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	08005fdc 	.word	0x08005fdc

08001d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d54:	f7ff ffdc 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	0b5b      	lsrs	r3, r3, #13
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	4903      	ldr	r1, [pc, #12]	@ (8001d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	08005fdc 	.word	0x08005fdc

08001d78 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e049      	b.n	8001e1e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d106      	bne.n	8001da4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7fe fdb2 	bl	8000908 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2202      	movs	r2, #2
 8001da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3304      	adds	r3, #4
 8001db4:	4619      	mov	r1, r3
 8001db6:	4610      	mov	r0, r2
 8001db8:	f000 fb52 	bl	8002460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d104      	bne.n	8001e46 <HAL_TIM_IC_Start_IT+0x1e>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	e023      	b.n	8001e8e <HAL_TIM_IC_Start_IT+0x66>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d104      	bne.n	8001e56 <HAL_TIM_IC_Start_IT+0x2e>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	e01b      	b.n	8001e8e <HAL_TIM_IC_Start_IT+0x66>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d104      	bne.n	8001e66 <HAL_TIM_IC_Start_IT+0x3e>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	e013      	b.n	8001e8e <HAL_TIM_IC_Start_IT+0x66>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2b0c      	cmp	r3, #12
 8001e6a:	d104      	bne.n	8001e76 <HAL_TIM_IC_Start_IT+0x4e>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	e00b      	b.n	8001e8e <HAL_TIM_IC_Start_IT+0x66>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	2b10      	cmp	r3, #16
 8001e7a:	d104      	bne.n	8001e86 <HAL_TIM_IC_Start_IT+0x5e>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	e003      	b.n	8001e8e <HAL_TIM_IC_Start_IT+0x66>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d104      	bne.n	8001ea0 <HAL_TIM_IC_Start_IT+0x78>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	e013      	b.n	8001ec8 <HAL_TIM_IC_Start_IT+0xa0>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d104      	bne.n	8001eb0 <HAL_TIM_IC_Start_IT+0x88>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	e00b      	b.n	8001ec8 <HAL_TIM_IC_Start_IT+0xa0>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d104      	bne.n	8001ec0 <HAL_TIM_IC_Start_IT+0x98>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	e003      	b.n	8001ec8 <HAL_TIM_IC_Start_IT+0xa0>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001eca:	7bbb      	ldrb	r3, [r7, #14]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d102      	bne.n	8001ed6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001ed0:	7b7b      	ldrb	r3, [r7, #13]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d001      	beq.n	8001eda <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e0e2      	b.n	80020a0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d104      	bne.n	8001eea <HAL_TIM_IC_Start_IT+0xc2>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ee8:	e023      	b.n	8001f32 <HAL_TIM_IC_Start_IT+0x10a>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d104      	bne.n	8001efa <HAL_TIM_IC_Start_IT+0xd2>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ef8:	e01b      	b.n	8001f32 <HAL_TIM_IC_Start_IT+0x10a>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d104      	bne.n	8001f0a <HAL_TIM_IC_Start_IT+0xe2>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2202      	movs	r2, #2
 8001f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f08:	e013      	b.n	8001f32 <HAL_TIM_IC_Start_IT+0x10a>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2b0c      	cmp	r3, #12
 8001f0e:	d104      	bne.n	8001f1a <HAL_TIM_IC_Start_IT+0xf2>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001f18:	e00b      	b.n	8001f32 <HAL_TIM_IC_Start_IT+0x10a>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2b10      	cmp	r3, #16
 8001f1e:	d104      	bne.n	8001f2a <HAL_TIM_IC_Start_IT+0x102>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f28:	e003      	b.n	8001f32 <HAL_TIM_IC_Start_IT+0x10a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d104      	bne.n	8001f42 <HAL_TIM_IC_Start_IT+0x11a>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f40:	e013      	b.n	8001f6a <HAL_TIM_IC_Start_IT+0x142>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d104      	bne.n	8001f52 <HAL_TIM_IC_Start_IT+0x12a>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001f50:	e00b      	b.n	8001f6a <HAL_TIM_IC_Start_IT+0x142>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d104      	bne.n	8001f62 <HAL_TIM_IC_Start_IT+0x13a>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001f60:	e003      	b.n	8001f6a <HAL_TIM_IC_Start_IT+0x142>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2202      	movs	r2, #2
 8001f66:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2b0c      	cmp	r3, #12
 8001f6e:	d841      	bhi.n	8001ff4 <HAL_TIM_IC_Start_IT+0x1cc>
 8001f70:	a201      	add	r2, pc, #4	@ (adr r2, 8001f78 <HAL_TIM_IC_Start_IT+0x150>)
 8001f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f76:	bf00      	nop
 8001f78:	08001fad 	.word	0x08001fad
 8001f7c:	08001ff5 	.word	0x08001ff5
 8001f80:	08001ff5 	.word	0x08001ff5
 8001f84:	08001ff5 	.word	0x08001ff5
 8001f88:	08001fbf 	.word	0x08001fbf
 8001f8c:	08001ff5 	.word	0x08001ff5
 8001f90:	08001ff5 	.word	0x08001ff5
 8001f94:	08001ff5 	.word	0x08001ff5
 8001f98:	08001fd1 	.word	0x08001fd1
 8001f9c:	08001ff5 	.word	0x08001ff5
 8001fa0:	08001ff5 	.word	0x08001ff5
 8001fa4:	08001ff5 	.word	0x08001ff5
 8001fa8:	08001fe3 	.word	0x08001fe3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0202 	orr.w	r2, r2, #2
 8001fba:	60da      	str	r2, [r3, #12]
      break;
 8001fbc:	e01d      	b.n	8001ffa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 0204 	orr.w	r2, r2, #4
 8001fcc:	60da      	str	r2, [r3, #12]
      break;
 8001fce:	e014      	b.n	8001ffa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0208 	orr.w	r2, r2, #8
 8001fde:	60da      	str	r2, [r3, #12]
      break;
 8001fe0:	e00b      	b.n	8001ffa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 0210 	orr.w	r2, r2, #16
 8001ff0:	60da      	str	r2, [r3, #12]
      break;
 8001ff2:	e002      	b.n	8001ffa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ff8:	bf00      	nop
  }

  if (status == HAL_OK)
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d14e      	bne.n	800209e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2201      	movs	r2, #1
 8002006:	6839      	ldr	r1, [r7, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f000 fbff 	bl	800280c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a25      	ldr	r2, [pc, #148]	@ (80020a8 <HAL_TIM_IC_Start_IT+0x280>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d022      	beq.n	800205e <HAL_TIM_IC_Start_IT+0x236>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002020:	d01d      	beq.n	800205e <HAL_TIM_IC_Start_IT+0x236>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a21      	ldr	r2, [pc, #132]	@ (80020ac <HAL_TIM_IC_Start_IT+0x284>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d018      	beq.n	800205e <HAL_TIM_IC_Start_IT+0x236>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a1f      	ldr	r2, [pc, #124]	@ (80020b0 <HAL_TIM_IC_Start_IT+0x288>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d013      	beq.n	800205e <HAL_TIM_IC_Start_IT+0x236>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a1e      	ldr	r2, [pc, #120]	@ (80020b4 <HAL_TIM_IC_Start_IT+0x28c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d00e      	beq.n	800205e <HAL_TIM_IC_Start_IT+0x236>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a1c      	ldr	r2, [pc, #112]	@ (80020b8 <HAL_TIM_IC_Start_IT+0x290>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d009      	beq.n	800205e <HAL_TIM_IC_Start_IT+0x236>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a1b      	ldr	r2, [pc, #108]	@ (80020bc <HAL_TIM_IC_Start_IT+0x294>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d004      	beq.n	800205e <HAL_TIM_IC_Start_IT+0x236>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a19      	ldr	r2, [pc, #100]	@ (80020c0 <HAL_TIM_IC_Start_IT+0x298>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d115      	bne.n	800208a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	4b17      	ldr	r3, [pc, #92]	@ (80020c4 <HAL_TIM_IC_Start_IT+0x29c>)
 8002066:	4013      	ands	r3, r2
 8002068:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	2b06      	cmp	r3, #6
 800206e:	d015      	beq.n	800209c <HAL_TIM_IC_Start_IT+0x274>
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002076:	d011      	beq.n	800209c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0201 	orr.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002088:	e008      	b.n	800209c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 0201 	orr.w	r2, r2, #1
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	e000      	b.n	800209e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800209c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800209e:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40010000 	.word	0x40010000
 80020ac:	40000400 	.word	0x40000400
 80020b0:	40000800 	.word	0x40000800
 80020b4:	40000c00 	.word	0x40000c00
 80020b8:	40010400 	.word	0x40010400
 80020bc:	40014000 	.word	0x40014000
 80020c0:	40001800 	.word	0x40001800
 80020c4:	00010007 	.word	0x00010007

080020c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d020      	beq.n	800212c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d01b      	beq.n	800212c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f06f 0202 	mvn.w	r2, #2
 80020fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7fe fcd6 	bl	8000ac4 <HAL_TIM_IC_CaptureCallback>
 8002118:	e005      	b.n	8002126 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f981 	bl	8002422 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f988 	bl	8002436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b00      	cmp	r3, #0
 8002134:	d020      	beq.n	8002178 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d01b      	beq.n	8002178 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0204 	mvn.w	r2, #4
 8002148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2202      	movs	r2, #2
 800214e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7fe fcb0 	bl	8000ac4 <HAL_TIM_IC_CaptureCallback>
 8002164:	e005      	b.n	8002172 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f95b 	bl	8002422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f962 	bl	8002436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d020      	beq.n	80021c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b00      	cmp	r3, #0
 800218a:	d01b      	beq.n	80021c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f06f 0208 	mvn.w	r2, #8
 8002194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2204      	movs	r2, #4
 800219a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7fe fc8a 	bl	8000ac4 <HAL_TIM_IC_CaptureCallback>
 80021b0:	e005      	b.n	80021be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f935 	bl	8002422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f93c 	bl	8002436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d020      	beq.n	8002210 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d01b      	beq.n	8002210 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0210 	mvn.w	r2, #16
 80021e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2208      	movs	r2, #8
 80021e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7fe fc64 	bl	8000ac4 <HAL_TIM_IC_CaptureCallback>
 80021fc:	e005      	b.n	800220a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f90f 	bl	8002422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f916 	bl	8002436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00c      	beq.n	8002234 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d007      	beq.n	8002234 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f06f 0201 	mvn.w	r2, #1
 800222c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f8ed 	bl	800240e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800223a:	2b00      	cmp	r3, #0
 800223c:	d104      	bne.n	8002248 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00c      	beq.n	8002262 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800224e:	2b00      	cmp	r3, #0
 8002250:	d007      	beq.n	8002262 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800225a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 fb04 	bl	800286a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00c      	beq.n	8002286 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002272:	2b00      	cmp	r3, #0
 8002274:	d007      	beq.n	8002286 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800227e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 fafc 	bl	800287e <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00c      	beq.n	80022aa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002296:	2b00      	cmp	r3, #0
 8002298:	d007      	beq.n	80022aa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80022a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f8d0 	bl	800244a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	f003 0320 	and.w	r3, r3, #32
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00c      	beq.n	80022ce <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d007      	beq.n	80022ce <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f06f 0220 	mvn.w	r2, #32
 80022c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 fac4 	bl	8002856 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b086      	sub	sp, #24
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e088      	b.n	8002406 <HAL_TIM_IC_ConfigChannel+0x130>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d11b      	bne.n	800233a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002312:	f000 f951 	bl	80025b8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	699a      	ldr	r2, [r3, #24]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 020c 	bic.w	r2, r2, #12
 8002324:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6999      	ldr	r1, [r3, #24]
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	619a      	str	r2, [r3, #24]
 8002338:	e060      	b.n	80023fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b04      	cmp	r3, #4
 800233e:	d11c      	bne.n	800237a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002350:	f000 f9a6 	bl	80026a0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699a      	ldr	r2, [r3, #24]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002362:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6999      	ldr	r1, [r3, #24]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	021a      	lsls	r2, r3, #8
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	619a      	str	r2, [r3, #24]
 8002378:	e040      	b.n	80023fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b08      	cmp	r3, #8
 800237e:	d11b      	bne.n	80023b8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002390:	f000 f9c3 	bl	800271a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	69da      	ldr	r2, [r3, #28]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 020c 	bic.w	r2, r2, #12
 80023a2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	69d9      	ldr	r1, [r3, #28]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	61da      	str	r2, [r3, #28]
 80023b6:	e021      	b.n	80023fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b0c      	cmp	r3, #12
 80023bc:	d11c      	bne.n	80023f8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80023ce:	f000 f9e0 	bl	8002792 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	69da      	ldr	r2, [r3, #28]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80023e0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	69d9      	ldr	r1, [r3, #28]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	021a      	lsls	r2, r3, #8
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	61da      	str	r2, [r3, #28]
 80023f6:	e001      	b.n	80023fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002404:	7dfb      	ldrb	r3, [r7, #23]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a46      	ldr	r2, [pc, #280]	@ (800258c <TIM_Base_SetConfig+0x12c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d013      	beq.n	80024a0 <TIM_Base_SetConfig+0x40>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800247e:	d00f      	beq.n	80024a0 <TIM_Base_SetConfig+0x40>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a43      	ldr	r2, [pc, #268]	@ (8002590 <TIM_Base_SetConfig+0x130>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d00b      	beq.n	80024a0 <TIM_Base_SetConfig+0x40>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a42      	ldr	r2, [pc, #264]	@ (8002594 <TIM_Base_SetConfig+0x134>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d007      	beq.n	80024a0 <TIM_Base_SetConfig+0x40>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a41      	ldr	r2, [pc, #260]	@ (8002598 <TIM_Base_SetConfig+0x138>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d003      	beq.n	80024a0 <TIM_Base_SetConfig+0x40>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a40      	ldr	r2, [pc, #256]	@ (800259c <TIM_Base_SetConfig+0x13c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d108      	bne.n	80024b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a35      	ldr	r2, [pc, #212]	@ (800258c <TIM_Base_SetConfig+0x12c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d02b      	beq.n	8002512 <TIM_Base_SetConfig+0xb2>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c0:	d027      	beq.n	8002512 <TIM_Base_SetConfig+0xb2>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a32      	ldr	r2, [pc, #200]	@ (8002590 <TIM_Base_SetConfig+0x130>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d023      	beq.n	8002512 <TIM_Base_SetConfig+0xb2>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a31      	ldr	r2, [pc, #196]	@ (8002594 <TIM_Base_SetConfig+0x134>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d01f      	beq.n	8002512 <TIM_Base_SetConfig+0xb2>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a30      	ldr	r2, [pc, #192]	@ (8002598 <TIM_Base_SetConfig+0x138>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d01b      	beq.n	8002512 <TIM_Base_SetConfig+0xb2>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a2f      	ldr	r2, [pc, #188]	@ (800259c <TIM_Base_SetConfig+0x13c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d017      	beq.n	8002512 <TIM_Base_SetConfig+0xb2>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a2e      	ldr	r2, [pc, #184]	@ (80025a0 <TIM_Base_SetConfig+0x140>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d013      	beq.n	8002512 <TIM_Base_SetConfig+0xb2>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a2d      	ldr	r2, [pc, #180]	@ (80025a4 <TIM_Base_SetConfig+0x144>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00f      	beq.n	8002512 <TIM_Base_SetConfig+0xb2>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a2c      	ldr	r2, [pc, #176]	@ (80025a8 <TIM_Base_SetConfig+0x148>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00b      	beq.n	8002512 <TIM_Base_SetConfig+0xb2>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a2b      	ldr	r2, [pc, #172]	@ (80025ac <TIM_Base_SetConfig+0x14c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d007      	beq.n	8002512 <TIM_Base_SetConfig+0xb2>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a2a      	ldr	r2, [pc, #168]	@ (80025b0 <TIM_Base_SetConfig+0x150>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d003      	beq.n	8002512 <TIM_Base_SetConfig+0xb2>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a29      	ldr	r2, [pc, #164]	@ (80025b4 <TIM_Base_SetConfig+0x154>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d108      	bne.n	8002524 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	4313      	orrs	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a10      	ldr	r2, [pc, #64]	@ (800258c <TIM_Base_SetConfig+0x12c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d003      	beq.n	8002558 <TIM_Base_SetConfig+0xf8>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a12      	ldr	r2, [pc, #72]	@ (800259c <TIM_Base_SetConfig+0x13c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d103      	bne.n	8002560 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b01      	cmp	r3, #1
 8002570:	d105      	bne.n	800257e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f023 0201 	bic.w	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	611a      	str	r2, [r3, #16]
  }
}
 800257e:	bf00      	nop
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40010000 	.word	0x40010000
 8002590:	40000400 	.word	0x40000400
 8002594:	40000800 	.word	0x40000800
 8002598:	40000c00 	.word	0x40000c00
 800259c:	40010400 	.word	0x40010400
 80025a0:	40014000 	.word	0x40014000
 80025a4:	40014400 	.word	0x40014400
 80025a8:	40014800 	.word	0x40014800
 80025ac:	40001800 	.word	0x40001800
 80025b0:	40001c00 	.word	0x40001c00
 80025b4:	40002000 	.word	0x40002000

080025b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
 80025c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	f023 0201 	bic.w	r2, r3, #1
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4a28      	ldr	r2, [pc, #160]	@ (8002684 <TIM_TI1_SetConfig+0xcc>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d01b      	beq.n	800261e <TIM_TI1_SetConfig+0x66>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025ec:	d017      	beq.n	800261e <TIM_TI1_SetConfig+0x66>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4a25      	ldr	r2, [pc, #148]	@ (8002688 <TIM_TI1_SetConfig+0xd0>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d013      	beq.n	800261e <TIM_TI1_SetConfig+0x66>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4a24      	ldr	r2, [pc, #144]	@ (800268c <TIM_TI1_SetConfig+0xd4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d00f      	beq.n	800261e <TIM_TI1_SetConfig+0x66>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4a23      	ldr	r2, [pc, #140]	@ (8002690 <TIM_TI1_SetConfig+0xd8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d00b      	beq.n	800261e <TIM_TI1_SetConfig+0x66>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4a22      	ldr	r2, [pc, #136]	@ (8002694 <TIM_TI1_SetConfig+0xdc>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d007      	beq.n	800261e <TIM_TI1_SetConfig+0x66>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4a21      	ldr	r2, [pc, #132]	@ (8002698 <TIM_TI1_SetConfig+0xe0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d003      	beq.n	800261e <TIM_TI1_SetConfig+0x66>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4a20      	ldr	r2, [pc, #128]	@ (800269c <TIM_TI1_SetConfig+0xe4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d101      	bne.n	8002622 <TIM_TI1_SetConfig+0x6a>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <TIM_TI1_SetConfig+0x6c>
 8002622:	2300      	movs	r3, #0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f023 0303 	bic.w	r3, r3, #3
 800262e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4313      	orrs	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	e003      	b.n	8002642 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002648:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	b2db      	uxtb	r3, r3
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	4313      	orrs	r3, r2
 8002654:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f023 030a 	bic.w	r3, r3, #10
 800265c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f003 030a 	and.w	r3, r3, #10
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	621a      	str	r2, [r3, #32]
}
 8002676:	bf00      	nop
 8002678:	371c      	adds	r7, #28
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40010000 	.word	0x40010000
 8002688:	40000400 	.word	0x40000400
 800268c:	40000800 	.word	0x40000800
 8002690:	40000c00 	.word	0x40000c00
 8002694:	40010400 	.word	0x40010400
 8002698:	40014000 	.word	0x40014000
 800269c:	40001800 	.word	0x40001800

080026a0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	f023 0210 	bic.w	r2, r3, #16
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	021b      	lsls	r3, r3, #8
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80026de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	031b      	lsls	r3, r3, #12
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80026f2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	4313      	orrs	r3, r2
 8002700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	621a      	str	r2, [r3, #32]
}
 800270e:	bf00      	nop
 8002710:	371c      	adds	r7, #28
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800271a:	b480      	push	{r7}
 800271c:	b087      	sub	sp, #28
 800271e:	af00      	add	r7, sp, #0
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	607a      	str	r2, [r7, #4]
 8002726:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	f023 0303 	bic.w	r3, r3, #3
 8002746:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002756:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	b2db      	uxtb	r3, r3
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800276a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	021b      	lsls	r3, r3, #8
 8002770:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	4313      	orrs	r3, r2
 8002778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	621a      	str	r2, [r3, #32]
}
 8002786:	bf00      	nop
 8002788:	371c      	adds	r7, #28
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002792:	b480      	push	{r7}
 8002794:	b087      	sub	sp, #28
 8002796:	af00      	add	r7, sp, #0
 8002798:	60f8      	str	r0, [r7, #12]
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	607a      	str	r2, [r7, #4]
 800279e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027be:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	021b      	lsls	r3, r3, #8
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80027d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	031b      	lsls	r3, r3, #12
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80027e4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	031b      	lsls	r3, r3, #12
 80027ea:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	621a      	str	r2, [r3, #32]
}
 8002800:	bf00      	nop
 8002802:	371c      	adds	r7, #28
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f003 031f 	and.w	r3, r3, #31
 800281e:	2201      	movs	r2, #1
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a1a      	ldr	r2, [r3, #32]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	43db      	mvns	r3, r3
 800282e:	401a      	ands	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a1a      	ldr	r2, [r3, #32]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f003 031f 	and.w	r3, r3, #31
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	fa01 f303 	lsl.w	r3, r1, r3
 8002844:	431a      	orrs	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	621a      	str	r2, [r3, #32]
}
 800284a:	bf00      	nop
 800284c:	371c      	adds	r7, #28
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e040      	b.n	8002926 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d106      	bne.n	80028ba <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7fe f803 	bl	80008c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2224      	movs	r2, #36	@ 0x24
 80028be:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0201 	bic.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 fb15 	bl	8002f08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f8ae 	bl	8002a40 <UART_SetConfig>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e01b      	b.n	8002926 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800290c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f042 0201 	orr.w	r2, r2, #1
 800291c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fb94 	bl	800304c <UART_CheckIdleState>
 8002924:	4603      	mov	r3, r0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b08a      	sub	sp, #40	@ 0x28
 8002932:	af02      	add	r7, sp, #8
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	603b      	str	r3, [r7, #0]
 800293a:	4613      	mov	r3, r2
 800293c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002942:	2b20      	cmp	r3, #32
 8002944:	d177      	bne.n	8002a36 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <HAL_UART_Transmit+0x24>
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e070      	b.n	8002a38 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2221      	movs	r2, #33	@ 0x21
 8002962:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002964:	f7fe f9ec 	bl	8000d40 <HAL_GetTick>
 8002968:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	88fa      	ldrh	r2, [r7, #6]
 800296e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	88fa      	ldrh	r2, [r7, #6]
 8002976:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002982:	d108      	bne.n	8002996 <HAL_UART_Transmit+0x68>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d104      	bne.n	8002996 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800298c:	2300      	movs	r3, #0
 800298e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	61bb      	str	r3, [r7, #24]
 8002994:	e003      	b.n	800299e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800299a:	2300      	movs	r3, #0
 800299c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800299e:	e02f      	b.n	8002a00 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	2200      	movs	r2, #0
 80029a8:	2180      	movs	r1, #128	@ 0x80
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 fbf6 	bl	800319c <UART_WaitOnFlagUntilTimeout>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d004      	beq.n	80029c0 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2220      	movs	r2, #32
 80029ba:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e03b      	b.n	8002a38 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10b      	bne.n	80029de <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	3302      	adds	r3, #2
 80029da:	61bb      	str	r3, [r7, #24]
 80029dc:	e007      	b.n	80029ee <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	781a      	ldrb	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	3301      	adds	r3, #1
 80029ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1c9      	bne.n	80029a0 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2200      	movs	r2, #0
 8002a14:	2140      	movs	r1, #64	@ 0x40
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 fbc0 	bl	800319c <UART_WaitOnFlagUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d004      	beq.n	8002a2c <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e005      	b.n	8002a38 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e000      	b.n	8002a38 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002a36:	2302      	movs	r3, #2
  }
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3720      	adds	r7, #32
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	431a      	orrs	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	4ba6      	ldr	r3, [pc, #664]	@ (8002d04 <UART_SetConfig+0x2c4>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	6979      	ldr	r1, [r7, #20]
 8002a74:	430b      	orrs	r3, r1
 8002a76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a94      	ldr	r2, [pc, #592]	@ (8002d08 <UART_SetConfig+0x2c8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d120      	bne.n	8002afe <UART_SetConfig+0xbe>
 8002abc:	4b93      	ldr	r3, [pc, #588]	@ (8002d0c <UART_SetConfig+0x2cc>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d816      	bhi.n	8002af8 <UART_SetConfig+0xb8>
 8002aca:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad0 <UART_SetConfig+0x90>)
 8002acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad0:	08002ae1 	.word	0x08002ae1
 8002ad4:	08002aed 	.word	0x08002aed
 8002ad8:	08002ae7 	.word	0x08002ae7
 8002adc:	08002af3 	.word	0x08002af3
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	77fb      	strb	r3, [r7, #31]
 8002ae4:	e150      	b.n	8002d88 <UART_SetConfig+0x348>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	77fb      	strb	r3, [r7, #31]
 8002aea:	e14d      	b.n	8002d88 <UART_SetConfig+0x348>
 8002aec:	2304      	movs	r3, #4
 8002aee:	77fb      	strb	r3, [r7, #31]
 8002af0:	e14a      	b.n	8002d88 <UART_SetConfig+0x348>
 8002af2:	2308      	movs	r3, #8
 8002af4:	77fb      	strb	r3, [r7, #31]
 8002af6:	e147      	b.n	8002d88 <UART_SetConfig+0x348>
 8002af8:	2310      	movs	r3, #16
 8002afa:	77fb      	strb	r3, [r7, #31]
 8002afc:	e144      	b.n	8002d88 <UART_SetConfig+0x348>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a83      	ldr	r2, [pc, #524]	@ (8002d10 <UART_SetConfig+0x2d0>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d132      	bne.n	8002b6e <UART_SetConfig+0x12e>
 8002b08:	4b80      	ldr	r3, [pc, #512]	@ (8002d0c <UART_SetConfig+0x2cc>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b0c      	cmp	r3, #12
 8002b14:	d828      	bhi.n	8002b68 <UART_SetConfig+0x128>
 8002b16:	a201      	add	r2, pc, #4	@ (adr r2, 8002b1c <UART_SetConfig+0xdc>)
 8002b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1c:	08002b51 	.word	0x08002b51
 8002b20:	08002b69 	.word	0x08002b69
 8002b24:	08002b69 	.word	0x08002b69
 8002b28:	08002b69 	.word	0x08002b69
 8002b2c:	08002b5d 	.word	0x08002b5d
 8002b30:	08002b69 	.word	0x08002b69
 8002b34:	08002b69 	.word	0x08002b69
 8002b38:	08002b69 	.word	0x08002b69
 8002b3c:	08002b57 	.word	0x08002b57
 8002b40:	08002b69 	.word	0x08002b69
 8002b44:	08002b69 	.word	0x08002b69
 8002b48:	08002b69 	.word	0x08002b69
 8002b4c:	08002b63 	.word	0x08002b63
 8002b50:	2300      	movs	r3, #0
 8002b52:	77fb      	strb	r3, [r7, #31]
 8002b54:	e118      	b.n	8002d88 <UART_SetConfig+0x348>
 8002b56:	2302      	movs	r3, #2
 8002b58:	77fb      	strb	r3, [r7, #31]
 8002b5a:	e115      	b.n	8002d88 <UART_SetConfig+0x348>
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	77fb      	strb	r3, [r7, #31]
 8002b60:	e112      	b.n	8002d88 <UART_SetConfig+0x348>
 8002b62:	2308      	movs	r3, #8
 8002b64:	77fb      	strb	r3, [r7, #31]
 8002b66:	e10f      	b.n	8002d88 <UART_SetConfig+0x348>
 8002b68:	2310      	movs	r3, #16
 8002b6a:	77fb      	strb	r3, [r7, #31]
 8002b6c:	e10c      	b.n	8002d88 <UART_SetConfig+0x348>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a68      	ldr	r2, [pc, #416]	@ (8002d14 <UART_SetConfig+0x2d4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d120      	bne.n	8002bba <UART_SetConfig+0x17a>
 8002b78:	4b64      	ldr	r3, [pc, #400]	@ (8002d0c <UART_SetConfig+0x2cc>)
 8002b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002b82:	2b30      	cmp	r3, #48	@ 0x30
 8002b84:	d013      	beq.n	8002bae <UART_SetConfig+0x16e>
 8002b86:	2b30      	cmp	r3, #48	@ 0x30
 8002b88:	d814      	bhi.n	8002bb4 <UART_SetConfig+0x174>
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	d009      	beq.n	8002ba2 <UART_SetConfig+0x162>
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	d810      	bhi.n	8002bb4 <UART_SetConfig+0x174>
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <UART_SetConfig+0x15c>
 8002b96:	2b10      	cmp	r3, #16
 8002b98:	d006      	beq.n	8002ba8 <UART_SetConfig+0x168>
 8002b9a:	e00b      	b.n	8002bb4 <UART_SetConfig+0x174>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	77fb      	strb	r3, [r7, #31]
 8002ba0:	e0f2      	b.n	8002d88 <UART_SetConfig+0x348>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	77fb      	strb	r3, [r7, #31]
 8002ba6:	e0ef      	b.n	8002d88 <UART_SetConfig+0x348>
 8002ba8:	2304      	movs	r3, #4
 8002baa:	77fb      	strb	r3, [r7, #31]
 8002bac:	e0ec      	b.n	8002d88 <UART_SetConfig+0x348>
 8002bae:	2308      	movs	r3, #8
 8002bb0:	77fb      	strb	r3, [r7, #31]
 8002bb2:	e0e9      	b.n	8002d88 <UART_SetConfig+0x348>
 8002bb4:	2310      	movs	r3, #16
 8002bb6:	77fb      	strb	r3, [r7, #31]
 8002bb8:	e0e6      	b.n	8002d88 <UART_SetConfig+0x348>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a56      	ldr	r2, [pc, #344]	@ (8002d18 <UART_SetConfig+0x2d8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d120      	bne.n	8002c06 <UART_SetConfig+0x1c6>
 8002bc4:	4b51      	ldr	r3, [pc, #324]	@ (8002d0c <UART_SetConfig+0x2cc>)
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002bce:	2bc0      	cmp	r3, #192	@ 0xc0
 8002bd0:	d013      	beq.n	8002bfa <UART_SetConfig+0x1ba>
 8002bd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002bd4:	d814      	bhi.n	8002c00 <UART_SetConfig+0x1c0>
 8002bd6:	2b80      	cmp	r3, #128	@ 0x80
 8002bd8:	d009      	beq.n	8002bee <UART_SetConfig+0x1ae>
 8002bda:	2b80      	cmp	r3, #128	@ 0x80
 8002bdc:	d810      	bhi.n	8002c00 <UART_SetConfig+0x1c0>
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <UART_SetConfig+0x1a8>
 8002be2:	2b40      	cmp	r3, #64	@ 0x40
 8002be4:	d006      	beq.n	8002bf4 <UART_SetConfig+0x1b4>
 8002be6:	e00b      	b.n	8002c00 <UART_SetConfig+0x1c0>
 8002be8:	2300      	movs	r3, #0
 8002bea:	77fb      	strb	r3, [r7, #31]
 8002bec:	e0cc      	b.n	8002d88 <UART_SetConfig+0x348>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	77fb      	strb	r3, [r7, #31]
 8002bf2:	e0c9      	b.n	8002d88 <UART_SetConfig+0x348>
 8002bf4:	2304      	movs	r3, #4
 8002bf6:	77fb      	strb	r3, [r7, #31]
 8002bf8:	e0c6      	b.n	8002d88 <UART_SetConfig+0x348>
 8002bfa:	2308      	movs	r3, #8
 8002bfc:	77fb      	strb	r3, [r7, #31]
 8002bfe:	e0c3      	b.n	8002d88 <UART_SetConfig+0x348>
 8002c00:	2310      	movs	r3, #16
 8002c02:	77fb      	strb	r3, [r7, #31]
 8002c04:	e0c0      	b.n	8002d88 <UART_SetConfig+0x348>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a44      	ldr	r2, [pc, #272]	@ (8002d1c <UART_SetConfig+0x2dc>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d125      	bne.n	8002c5c <UART_SetConfig+0x21c>
 8002c10:	4b3e      	ldr	r3, [pc, #248]	@ (8002d0c <UART_SetConfig+0x2cc>)
 8002c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c1e:	d017      	beq.n	8002c50 <UART_SetConfig+0x210>
 8002c20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c24:	d817      	bhi.n	8002c56 <UART_SetConfig+0x216>
 8002c26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c2a:	d00b      	beq.n	8002c44 <UART_SetConfig+0x204>
 8002c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c30:	d811      	bhi.n	8002c56 <UART_SetConfig+0x216>
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <UART_SetConfig+0x1fe>
 8002c36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c3a:	d006      	beq.n	8002c4a <UART_SetConfig+0x20a>
 8002c3c:	e00b      	b.n	8002c56 <UART_SetConfig+0x216>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	77fb      	strb	r3, [r7, #31]
 8002c42:	e0a1      	b.n	8002d88 <UART_SetConfig+0x348>
 8002c44:	2302      	movs	r3, #2
 8002c46:	77fb      	strb	r3, [r7, #31]
 8002c48:	e09e      	b.n	8002d88 <UART_SetConfig+0x348>
 8002c4a:	2304      	movs	r3, #4
 8002c4c:	77fb      	strb	r3, [r7, #31]
 8002c4e:	e09b      	b.n	8002d88 <UART_SetConfig+0x348>
 8002c50:	2308      	movs	r3, #8
 8002c52:	77fb      	strb	r3, [r7, #31]
 8002c54:	e098      	b.n	8002d88 <UART_SetConfig+0x348>
 8002c56:	2310      	movs	r3, #16
 8002c58:	77fb      	strb	r3, [r7, #31]
 8002c5a:	e095      	b.n	8002d88 <UART_SetConfig+0x348>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a2f      	ldr	r2, [pc, #188]	@ (8002d20 <UART_SetConfig+0x2e0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d125      	bne.n	8002cb2 <UART_SetConfig+0x272>
 8002c66:	4b29      	ldr	r3, [pc, #164]	@ (8002d0c <UART_SetConfig+0x2cc>)
 8002c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002c74:	d017      	beq.n	8002ca6 <UART_SetConfig+0x266>
 8002c76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002c7a:	d817      	bhi.n	8002cac <UART_SetConfig+0x26c>
 8002c7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c80:	d00b      	beq.n	8002c9a <UART_SetConfig+0x25a>
 8002c82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c86:	d811      	bhi.n	8002cac <UART_SetConfig+0x26c>
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <UART_SetConfig+0x254>
 8002c8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c90:	d006      	beq.n	8002ca0 <UART_SetConfig+0x260>
 8002c92:	e00b      	b.n	8002cac <UART_SetConfig+0x26c>
 8002c94:	2301      	movs	r3, #1
 8002c96:	77fb      	strb	r3, [r7, #31]
 8002c98:	e076      	b.n	8002d88 <UART_SetConfig+0x348>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	77fb      	strb	r3, [r7, #31]
 8002c9e:	e073      	b.n	8002d88 <UART_SetConfig+0x348>
 8002ca0:	2304      	movs	r3, #4
 8002ca2:	77fb      	strb	r3, [r7, #31]
 8002ca4:	e070      	b.n	8002d88 <UART_SetConfig+0x348>
 8002ca6:	2308      	movs	r3, #8
 8002ca8:	77fb      	strb	r3, [r7, #31]
 8002caa:	e06d      	b.n	8002d88 <UART_SetConfig+0x348>
 8002cac:	2310      	movs	r3, #16
 8002cae:	77fb      	strb	r3, [r7, #31]
 8002cb0:	e06a      	b.n	8002d88 <UART_SetConfig+0x348>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8002d24 <UART_SetConfig+0x2e4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d138      	bne.n	8002d2e <UART_SetConfig+0x2ee>
 8002cbc:	4b13      	ldr	r3, [pc, #76]	@ (8002d0c <UART_SetConfig+0x2cc>)
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002cc6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002cca:	d017      	beq.n	8002cfc <UART_SetConfig+0x2bc>
 8002ccc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002cd0:	d82a      	bhi.n	8002d28 <UART_SetConfig+0x2e8>
 8002cd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cd6:	d00b      	beq.n	8002cf0 <UART_SetConfig+0x2b0>
 8002cd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cdc:	d824      	bhi.n	8002d28 <UART_SetConfig+0x2e8>
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <UART_SetConfig+0x2aa>
 8002ce2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ce6:	d006      	beq.n	8002cf6 <UART_SetConfig+0x2b6>
 8002ce8:	e01e      	b.n	8002d28 <UART_SetConfig+0x2e8>
 8002cea:	2300      	movs	r3, #0
 8002cec:	77fb      	strb	r3, [r7, #31]
 8002cee:	e04b      	b.n	8002d88 <UART_SetConfig+0x348>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	77fb      	strb	r3, [r7, #31]
 8002cf4:	e048      	b.n	8002d88 <UART_SetConfig+0x348>
 8002cf6:	2304      	movs	r3, #4
 8002cf8:	77fb      	strb	r3, [r7, #31]
 8002cfa:	e045      	b.n	8002d88 <UART_SetConfig+0x348>
 8002cfc:	2308      	movs	r3, #8
 8002cfe:	77fb      	strb	r3, [r7, #31]
 8002d00:	e042      	b.n	8002d88 <UART_SetConfig+0x348>
 8002d02:	bf00      	nop
 8002d04:	efff69f3 	.word	0xefff69f3
 8002d08:	40011000 	.word	0x40011000
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	40004400 	.word	0x40004400
 8002d14:	40004800 	.word	0x40004800
 8002d18:	40004c00 	.word	0x40004c00
 8002d1c:	40005000 	.word	0x40005000
 8002d20:	40011400 	.word	0x40011400
 8002d24:	40007800 	.word	0x40007800
 8002d28:	2310      	movs	r3, #16
 8002d2a:	77fb      	strb	r3, [r7, #31]
 8002d2c:	e02c      	b.n	8002d88 <UART_SetConfig+0x348>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a72      	ldr	r2, [pc, #456]	@ (8002efc <UART_SetConfig+0x4bc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d125      	bne.n	8002d84 <UART_SetConfig+0x344>
 8002d38:	4b71      	ldr	r3, [pc, #452]	@ (8002f00 <UART_SetConfig+0x4c0>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d3e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002d42:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002d46:	d017      	beq.n	8002d78 <UART_SetConfig+0x338>
 8002d48:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002d4c:	d817      	bhi.n	8002d7e <UART_SetConfig+0x33e>
 8002d4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d52:	d00b      	beq.n	8002d6c <UART_SetConfig+0x32c>
 8002d54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d58:	d811      	bhi.n	8002d7e <UART_SetConfig+0x33e>
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <UART_SetConfig+0x326>
 8002d5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d62:	d006      	beq.n	8002d72 <UART_SetConfig+0x332>
 8002d64:	e00b      	b.n	8002d7e <UART_SetConfig+0x33e>
 8002d66:	2300      	movs	r3, #0
 8002d68:	77fb      	strb	r3, [r7, #31]
 8002d6a:	e00d      	b.n	8002d88 <UART_SetConfig+0x348>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	77fb      	strb	r3, [r7, #31]
 8002d70:	e00a      	b.n	8002d88 <UART_SetConfig+0x348>
 8002d72:	2304      	movs	r3, #4
 8002d74:	77fb      	strb	r3, [r7, #31]
 8002d76:	e007      	b.n	8002d88 <UART_SetConfig+0x348>
 8002d78:	2308      	movs	r3, #8
 8002d7a:	77fb      	strb	r3, [r7, #31]
 8002d7c:	e004      	b.n	8002d88 <UART_SetConfig+0x348>
 8002d7e:	2310      	movs	r3, #16
 8002d80:	77fb      	strb	r3, [r7, #31]
 8002d82:	e001      	b.n	8002d88 <UART_SetConfig+0x348>
 8002d84:	2310      	movs	r3, #16
 8002d86:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d90:	d15b      	bne.n	8002e4a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002d92:	7ffb      	ldrb	r3, [r7, #31]
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d828      	bhi.n	8002dea <UART_SetConfig+0x3aa>
 8002d98:	a201      	add	r2, pc, #4	@ (adr r2, 8002da0 <UART_SetConfig+0x360>)
 8002d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9e:	bf00      	nop
 8002da0:	08002dc5 	.word	0x08002dc5
 8002da4:	08002dcd 	.word	0x08002dcd
 8002da8:	08002dd5 	.word	0x08002dd5
 8002dac:	08002deb 	.word	0x08002deb
 8002db0:	08002ddb 	.word	0x08002ddb
 8002db4:	08002deb 	.word	0x08002deb
 8002db8:	08002deb 	.word	0x08002deb
 8002dbc:	08002deb 	.word	0x08002deb
 8002dc0:	08002de3 	.word	0x08002de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dc4:	f7fe ffb0 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8002dc8:	61b8      	str	r0, [r7, #24]
        break;
 8002dca:	e013      	b.n	8002df4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002dcc:	f7fe ffc0 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 8002dd0:	61b8      	str	r0, [r7, #24]
        break;
 8002dd2:	e00f      	b.n	8002df4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dd4:	4b4b      	ldr	r3, [pc, #300]	@ (8002f04 <UART_SetConfig+0x4c4>)
 8002dd6:	61bb      	str	r3, [r7, #24]
        break;
 8002dd8:	e00c      	b.n	8002df4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dda:	f7fe fed3 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8002dde:	61b8      	str	r0, [r7, #24]
        break;
 8002de0:	e008      	b.n	8002df4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002de2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002de6:	61bb      	str	r3, [r7, #24]
        break;
 8002de8:	e004      	b.n	8002df4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	77bb      	strb	r3, [r7, #30]
        break;
 8002df2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d074      	beq.n	8002ee4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	005a      	lsls	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	085b      	lsrs	r3, r3, #1
 8002e04:	441a      	add	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	2b0f      	cmp	r3, #15
 8002e14:	d916      	bls.n	8002e44 <UART_SetConfig+0x404>
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e1c:	d212      	bcs.n	8002e44 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	f023 030f 	bic.w	r3, r3, #15
 8002e26:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	085b      	lsrs	r3, r3, #1
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	89fb      	ldrh	r3, [r7, #14]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	89fa      	ldrh	r2, [r7, #14]
 8002e40:	60da      	str	r2, [r3, #12]
 8002e42:	e04f      	b.n	8002ee4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	77bb      	strb	r3, [r7, #30]
 8002e48:	e04c      	b.n	8002ee4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e4a:	7ffb      	ldrb	r3, [r7, #31]
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d828      	bhi.n	8002ea2 <UART_SetConfig+0x462>
 8002e50:	a201      	add	r2, pc, #4	@ (adr r2, 8002e58 <UART_SetConfig+0x418>)
 8002e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e56:	bf00      	nop
 8002e58:	08002e7d 	.word	0x08002e7d
 8002e5c:	08002e85 	.word	0x08002e85
 8002e60:	08002e8d 	.word	0x08002e8d
 8002e64:	08002ea3 	.word	0x08002ea3
 8002e68:	08002e93 	.word	0x08002e93
 8002e6c:	08002ea3 	.word	0x08002ea3
 8002e70:	08002ea3 	.word	0x08002ea3
 8002e74:	08002ea3 	.word	0x08002ea3
 8002e78:	08002e9b 	.word	0x08002e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e7c:	f7fe ff54 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8002e80:	61b8      	str	r0, [r7, #24]
        break;
 8002e82:	e013      	b.n	8002eac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e84:	f7fe ff64 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 8002e88:	61b8      	str	r0, [r7, #24]
        break;
 8002e8a:	e00f      	b.n	8002eac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f04 <UART_SetConfig+0x4c4>)
 8002e8e:	61bb      	str	r3, [r7, #24]
        break;
 8002e90:	e00c      	b.n	8002eac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e92:	f7fe fe77 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8002e96:	61b8      	str	r0, [r7, #24]
        break;
 8002e98:	e008      	b.n	8002eac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e9e:	61bb      	str	r3, [r7, #24]
        break;
 8002ea0:	e004      	b.n	8002eac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	77bb      	strb	r3, [r7, #30]
        break;
 8002eaa:	bf00      	nop
    }

    if (pclk != 0U)
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d018      	beq.n	8002ee4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	085a      	lsrs	r2, r3, #1
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	441a      	add	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	2b0f      	cmp	r3, #15
 8002eca:	d909      	bls.n	8002ee0 <UART_SetConfig+0x4a0>
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ed2:	d205      	bcs.n	8002ee0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	e001      	b.n	8002ee4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002ef0:	7fbb      	ldrb	r3, [r7, #30]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3720      	adds	r7, #32
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40007c00 	.word	0x40007c00
 8002f00:	40023800 	.word	0x40023800
 8002f04:	00f42400 	.word	0x00f42400

08002f08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00a      	beq.n	8002f32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00a      	beq.n	8002f98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	f003 0310 	and.w	r3, r3, #16
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00a      	beq.n	8002fba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbe:	f003 0320 	and.w	r3, r3, #32
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00a      	beq.n	8002fdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d01a      	beq.n	800301e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003006:	d10a      	bne.n	800301e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	605a      	str	r2, [r3, #4]
  }
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b098      	sub	sp, #96	@ 0x60
 8003050:	af02      	add	r7, sp, #8
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800305c:	f7fd fe70 	bl	8000d40 <HAL_GetTick>
 8003060:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b08      	cmp	r3, #8
 800306e:	d12e      	bne.n	80030ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003070:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003078:	2200      	movs	r2, #0
 800307a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f88c 	bl	800319c <UART_WaitOnFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d021      	beq.n	80030ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003092:	e853 3f00 	ldrex	r3, [r3]
 8003096:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800309a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800309e:	653b      	str	r3, [r7, #80]	@ 0x50
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	461a      	mov	r2, r3
 80030a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80030aa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80030ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030b0:	e841 2300 	strex	r3, r2, [r1]
 80030b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80030b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1e6      	bne.n	800308a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e062      	b.n	8003194 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d149      	bne.n	8003170 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030e4:	2200      	movs	r2, #0
 80030e6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f856 	bl	800319c <UART_WaitOnFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d03c      	beq.n	8003170 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fe:	e853 3f00 	ldrex	r3, [r3]
 8003102:	623b      	str	r3, [r7, #32]
   return(result);
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800310a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	461a      	mov	r2, r3
 8003112:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003114:	633b      	str	r3, [r7, #48]	@ 0x30
 8003116:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003118:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800311a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800311c:	e841 2300 	strex	r3, r2, [r1]
 8003120:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e6      	bne.n	80030f6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3308      	adds	r3, #8
 800312e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	e853 3f00 	ldrex	r3, [r3]
 8003136:	60fb      	str	r3, [r7, #12]
   return(result);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f023 0301 	bic.w	r3, r3, #1
 800313e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3308      	adds	r3, #8
 8003146:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003148:	61fa      	str	r2, [r7, #28]
 800314a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314c:	69b9      	ldr	r1, [r7, #24]
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	e841 2300 	strex	r3, r2, [r1]
 8003154:	617b      	str	r3, [r7, #20]
   return(result);
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1e5      	bne.n	8003128 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2220      	movs	r2, #32
 8003160:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e011      	b.n	8003194 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2220      	movs	r2, #32
 8003174:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2220      	movs	r2, #32
 800317a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3758      	adds	r7, #88	@ 0x58
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	4613      	mov	r3, r2
 80031aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ac:	e04f      	b.n	800324e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031b4:	d04b      	beq.n	800324e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b6:	f7fd fdc3 	bl	8000d40 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d302      	bcc.n	80031cc <UART_WaitOnFlagUntilTimeout+0x30>
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e04e      	b.n	800326e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d037      	beq.n	800324e <UART_WaitOnFlagUntilTimeout+0xb2>
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2b80      	cmp	r3, #128	@ 0x80
 80031e2:	d034      	beq.n	800324e <UART_WaitOnFlagUntilTimeout+0xb2>
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b40      	cmp	r3, #64	@ 0x40
 80031e8:	d031      	beq.n	800324e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d110      	bne.n	800321a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2208      	movs	r2, #8
 80031fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f838 	bl	8003276 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2208      	movs	r2, #8
 800320a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e029      	b.n	800326e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003228:	d111      	bne.n	800324e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003232:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f81e 	bl	8003276 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2220      	movs	r2, #32
 800323e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e00f      	b.n	800326e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	4013      	ands	r3, r2
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	429a      	cmp	r2, r3
 800325c:	bf0c      	ite	eq
 800325e:	2301      	moveq	r3, #1
 8003260:	2300      	movne	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	429a      	cmp	r2, r3
 800326a:	d0a0      	beq.n	80031ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003276:	b480      	push	{r7}
 8003278:	b095      	sub	sp, #84	@ 0x54
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003286:	e853 3f00 	ldrex	r3, [r3]
 800328a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800328c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003292:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	461a      	mov	r2, r3
 800329a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800329c:	643b      	str	r3, [r7, #64]	@ 0x40
 800329e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032a4:	e841 2300 	strex	r3, r2, [r1]
 80032a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80032aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1e6      	bne.n	800327e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3308      	adds	r3, #8
 80032b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	e853 3f00 	ldrex	r3, [r3]
 80032be:	61fb      	str	r3, [r7, #28]
   return(result);
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f023 0301 	bic.w	r3, r3, #1
 80032c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3308      	adds	r3, #8
 80032ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032d8:	e841 2300 	strex	r3, r2, [r1]
 80032dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80032de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1e5      	bne.n	80032b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d118      	bne.n	800331e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	e853 3f00 	ldrex	r3, [r3]
 80032f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f023 0310 	bic.w	r3, r3, #16
 8003300:	647b      	str	r3, [r7, #68]	@ 0x44
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800330a:	61bb      	str	r3, [r7, #24]
 800330c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330e:	6979      	ldr	r1, [r7, #20]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	e841 2300 	strex	r3, r2, [r1]
 8003316:	613b      	str	r3, [r7, #16]
   return(result);
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1e6      	bne.n	80032ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2220      	movs	r2, #32
 8003322:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003332:	bf00      	nop
 8003334:	3754      	adds	r7, #84	@ 0x54
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <__cvt>:
 800333e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003340:	ed2d 8b02 	vpush	{d8}
 8003344:	eeb0 8b40 	vmov.f64	d8, d0
 8003348:	b085      	sub	sp, #20
 800334a:	4617      	mov	r7, r2
 800334c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800334e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003350:	ee18 2a90 	vmov	r2, s17
 8003354:	f025 0520 	bic.w	r5, r5, #32
 8003358:	2a00      	cmp	r2, #0
 800335a:	bfb6      	itet	lt
 800335c:	222d      	movlt	r2, #45	@ 0x2d
 800335e:	2200      	movge	r2, #0
 8003360:	eeb1 8b40 	vneglt.f64	d8, d0
 8003364:	2d46      	cmp	r5, #70	@ 0x46
 8003366:	460c      	mov	r4, r1
 8003368:	701a      	strb	r2, [r3, #0]
 800336a:	d004      	beq.n	8003376 <__cvt+0x38>
 800336c:	2d45      	cmp	r5, #69	@ 0x45
 800336e:	d100      	bne.n	8003372 <__cvt+0x34>
 8003370:	3401      	adds	r4, #1
 8003372:	2102      	movs	r1, #2
 8003374:	e000      	b.n	8003378 <__cvt+0x3a>
 8003376:	2103      	movs	r1, #3
 8003378:	ab03      	add	r3, sp, #12
 800337a:	9301      	str	r3, [sp, #4]
 800337c:	ab02      	add	r3, sp, #8
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	4622      	mov	r2, r4
 8003382:	4633      	mov	r3, r6
 8003384:	eeb0 0b48 	vmov.f64	d0, d8
 8003388:	f000 fe3a 	bl	8004000 <_dtoa_r>
 800338c:	2d47      	cmp	r5, #71	@ 0x47
 800338e:	d114      	bne.n	80033ba <__cvt+0x7c>
 8003390:	07fb      	lsls	r3, r7, #31
 8003392:	d50a      	bpl.n	80033aa <__cvt+0x6c>
 8003394:	1902      	adds	r2, r0, r4
 8003396:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800339a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339e:	bf08      	it	eq
 80033a0:	9203      	streq	r2, [sp, #12]
 80033a2:	2130      	movs	r1, #48	@ 0x30
 80033a4:	9b03      	ldr	r3, [sp, #12]
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d319      	bcc.n	80033de <__cvt+0xa0>
 80033aa:	9b03      	ldr	r3, [sp, #12]
 80033ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80033ae:	1a1b      	subs	r3, r3, r0
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	b005      	add	sp, #20
 80033b4:	ecbd 8b02 	vpop	{d8}
 80033b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033ba:	2d46      	cmp	r5, #70	@ 0x46
 80033bc:	eb00 0204 	add.w	r2, r0, r4
 80033c0:	d1e9      	bne.n	8003396 <__cvt+0x58>
 80033c2:	7803      	ldrb	r3, [r0, #0]
 80033c4:	2b30      	cmp	r3, #48	@ 0x30
 80033c6:	d107      	bne.n	80033d8 <__cvt+0x9a>
 80033c8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80033cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d0:	bf1c      	itt	ne
 80033d2:	f1c4 0401 	rsbne	r4, r4, #1
 80033d6:	6034      	strne	r4, [r6, #0]
 80033d8:	6833      	ldr	r3, [r6, #0]
 80033da:	441a      	add	r2, r3
 80033dc:	e7db      	b.n	8003396 <__cvt+0x58>
 80033de:	1c5c      	adds	r4, r3, #1
 80033e0:	9403      	str	r4, [sp, #12]
 80033e2:	7019      	strb	r1, [r3, #0]
 80033e4:	e7de      	b.n	80033a4 <__cvt+0x66>

080033e6 <__exponent>:
 80033e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033e8:	2900      	cmp	r1, #0
 80033ea:	bfba      	itte	lt
 80033ec:	4249      	neglt	r1, r1
 80033ee:	232d      	movlt	r3, #45	@ 0x2d
 80033f0:	232b      	movge	r3, #43	@ 0x2b
 80033f2:	2909      	cmp	r1, #9
 80033f4:	7002      	strb	r2, [r0, #0]
 80033f6:	7043      	strb	r3, [r0, #1]
 80033f8:	dd29      	ble.n	800344e <__exponent+0x68>
 80033fa:	f10d 0307 	add.w	r3, sp, #7
 80033fe:	461d      	mov	r5, r3
 8003400:	270a      	movs	r7, #10
 8003402:	461a      	mov	r2, r3
 8003404:	fbb1 f6f7 	udiv	r6, r1, r7
 8003408:	fb07 1416 	mls	r4, r7, r6, r1
 800340c:	3430      	adds	r4, #48	@ 0x30
 800340e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003412:	460c      	mov	r4, r1
 8003414:	2c63      	cmp	r4, #99	@ 0x63
 8003416:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800341a:	4631      	mov	r1, r6
 800341c:	dcf1      	bgt.n	8003402 <__exponent+0x1c>
 800341e:	3130      	adds	r1, #48	@ 0x30
 8003420:	1e94      	subs	r4, r2, #2
 8003422:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003426:	1c41      	adds	r1, r0, #1
 8003428:	4623      	mov	r3, r4
 800342a:	42ab      	cmp	r3, r5
 800342c:	d30a      	bcc.n	8003444 <__exponent+0x5e>
 800342e:	f10d 0309 	add.w	r3, sp, #9
 8003432:	1a9b      	subs	r3, r3, r2
 8003434:	42ac      	cmp	r4, r5
 8003436:	bf88      	it	hi
 8003438:	2300      	movhi	r3, #0
 800343a:	3302      	adds	r3, #2
 800343c:	4403      	add	r3, r0
 800343e:	1a18      	subs	r0, r3, r0
 8003440:	b003      	add	sp, #12
 8003442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003444:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003448:	f801 6f01 	strb.w	r6, [r1, #1]!
 800344c:	e7ed      	b.n	800342a <__exponent+0x44>
 800344e:	2330      	movs	r3, #48	@ 0x30
 8003450:	3130      	adds	r1, #48	@ 0x30
 8003452:	7083      	strb	r3, [r0, #2]
 8003454:	70c1      	strb	r1, [r0, #3]
 8003456:	1d03      	adds	r3, r0, #4
 8003458:	e7f1      	b.n	800343e <__exponent+0x58>
 800345a:	0000      	movs	r0, r0
 800345c:	0000      	movs	r0, r0
	...

08003460 <_printf_float>:
 8003460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003464:	b08d      	sub	sp, #52	@ 0x34
 8003466:	460c      	mov	r4, r1
 8003468:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800346c:	4616      	mov	r6, r2
 800346e:	461f      	mov	r7, r3
 8003470:	4605      	mov	r5, r0
 8003472:	f000 fccb 	bl	8003e0c <_localeconv_r>
 8003476:	f8d0 b000 	ldr.w	fp, [r0]
 800347a:	4658      	mov	r0, fp
 800347c:	f7fc ff30 	bl	80002e0 <strlen>
 8003480:	2300      	movs	r3, #0
 8003482:	930a      	str	r3, [sp, #40]	@ 0x28
 8003484:	f8d8 3000 	ldr.w	r3, [r8]
 8003488:	f894 9018 	ldrb.w	r9, [r4, #24]
 800348c:	6822      	ldr	r2, [r4, #0]
 800348e:	9005      	str	r0, [sp, #20]
 8003490:	3307      	adds	r3, #7
 8003492:	f023 0307 	bic.w	r3, r3, #7
 8003496:	f103 0108 	add.w	r1, r3, #8
 800349a:	f8c8 1000 	str.w	r1, [r8]
 800349e:	ed93 0b00 	vldr	d0, [r3]
 80034a2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8003700 <_printf_float+0x2a0>
 80034a6:	eeb0 7bc0 	vabs.f64	d7, d0
 80034aa:	eeb4 7b46 	vcmp.f64	d7, d6
 80034ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80034b6:	dd24      	ble.n	8003502 <_printf_float+0xa2>
 80034b8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80034bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c0:	d502      	bpl.n	80034c8 <_printf_float+0x68>
 80034c2:	232d      	movs	r3, #45	@ 0x2d
 80034c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034c8:	498f      	ldr	r1, [pc, #572]	@ (8003708 <_printf_float+0x2a8>)
 80034ca:	4b90      	ldr	r3, [pc, #576]	@ (800370c <_printf_float+0x2ac>)
 80034cc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80034d0:	bf94      	ite	ls
 80034d2:	4688      	movls	r8, r1
 80034d4:	4698      	movhi	r8, r3
 80034d6:	f022 0204 	bic.w	r2, r2, #4
 80034da:	2303      	movs	r3, #3
 80034dc:	6123      	str	r3, [r4, #16]
 80034de:	6022      	str	r2, [r4, #0]
 80034e0:	f04f 0a00 	mov.w	sl, #0
 80034e4:	9700      	str	r7, [sp, #0]
 80034e6:	4633      	mov	r3, r6
 80034e8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80034ea:	4621      	mov	r1, r4
 80034ec:	4628      	mov	r0, r5
 80034ee:	f000 f9d1 	bl	8003894 <_printf_common>
 80034f2:	3001      	adds	r0, #1
 80034f4:	f040 8089 	bne.w	800360a <_printf_float+0x1aa>
 80034f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034fc:	b00d      	add	sp, #52	@ 0x34
 80034fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003502:	eeb4 0b40 	vcmp.f64	d0, d0
 8003506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350a:	d709      	bvc.n	8003520 <_printf_float+0xc0>
 800350c:	ee10 3a90 	vmov	r3, s1
 8003510:	2b00      	cmp	r3, #0
 8003512:	bfbc      	itt	lt
 8003514:	232d      	movlt	r3, #45	@ 0x2d
 8003516:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800351a:	497d      	ldr	r1, [pc, #500]	@ (8003710 <_printf_float+0x2b0>)
 800351c:	4b7d      	ldr	r3, [pc, #500]	@ (8003714 <_printf_float+0x2b4>)
 800351e:	e7d5      	b.n	80034cc <_printf_float+0x6c>
 8003520:	6863      	ldr	r3, [r4, #4]
 8003522:	1c59      	adds	r1, r3, #1
 8003524:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8003528:	d139      	bne.n	800359e <_printf_float+0x13e>
 800352a:	2306      	movs	r3, #6
 800352c:	6063      	str	r3, [r4, #4]
 800352e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003532:	2300      	movs	r3, #0
 8003534:	6022      	str	r2, [r4, #0]
 8003536:	9303      	str	r3, [sp, #12]
 8003538:	ab0a      	add	r3, sp, #40	@ 0x28
 800353a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800353e:	ab09      	add	r3, sp, #36	@ 0x24
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	6861      	ldr	r1, [r4, #4]
 8003544:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003548:	4628      	mov	r0, r5
 800354a:	f7ff fef8 	bl	800333e <__cvt>
 800354e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003552:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003554:	4680      	mov	r8, r0
 8003556:	d129      	bne.n	80035ac <_printf_float+0x14c>
 8003558:	1cc8      	adds	r0, r1, #3
 800355a:	db02      	blt.n	8003562 <_printf_float+0x102>
 800355c:	6863      	ldr	r3, [r4, #4]
 800355e:	4299      	cmp	r1, r3
 8003560:	dd41      	ble.n	80035e6 <_printf_float+0x186>
 8003562:	f1a9 0902 	sub.w	r9, r9, #2
 8003566:	fa5f f989 	uxtb.w	r9, r9
 800356a:	3901      	subs	r1, #1
 800356c:	464a      	mov	r2, r9
 800356e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003572:	9109      	str	r1, [sp, #36]	@ 0x24
 8003574:	f7ff ff37 	bl	80033e6 <__exponent>
 8003578:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800357a:	1813      	adds	r3, r2, r0
 800357c:	2a01      	cmp	r2, #1
 800357e:	4682      	mov	sl, r0
 8003580:	6123      	str	r3, [r4, #16]
 8003582:	dc02      	bgt.n	800358a <_printf_float+0x12a>
 8003584:	6822      	ldr	r2, [r4, #0]
 8003586:	07d2      	lsls	r2, r2, #31
 8003588:	d501      	bpl.n	800358e <_printf_float+0x12e>
 800358a:	3301      	adds	r3, #1
 800358c:	6123      	str	r3, [r4, #16]
 800358e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0a6      	beq.n	80034e4 <_printf_float+0x84>
 8003596:	232d      	movs	r3, #45	@ 0x2d
 8003598:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800359c:	e7a2      	b.n	80034e4 <_printf_float+0x84>
 800359e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80035a2:	d1c4      	bne.n	800352e <_printf_float+0xce>
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1c2      	bne.n	800352e <_printf_float+0xce>
 80035a8:	2301      	movs	r3, #1
 80035aa:	e7bf      	b.n	800352c <_printf_float+0xcc>
 80035ac:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80035b0:	d9db      	bls.n	800356a <_printf_float+0x10a>
 80035b2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80035b6:	d118      	bne.n	80035ea <_printf_float+0x18a>
 80035b8:	2900      	cmp	r1, #0
 80035ba:	6863      	ldr	r3, [r4, #4]
 80035bc:	dd0b      	ble.n	80035d6 <_printf_float+0x176>
 80035be:	6121      	str	r1, [r4, #16]
 80035c0:	b913      	cbnz	r3, 80035c8 <_printf_float+0x168>
 80035c2:	6822      	ldr	r2, [r4, #0]
 80035c4:	07d0      	lsls	r0, r2, #31
 80035c6:	d502      	bpl.n	80035ce <_printf_float+0x16e>
 80035c8:	3301      	adds	r3, #1
 80035ca:	440b      	add	r3, r1
 80035cc:	6123      	str	r3, [r4, #16]
 80035ce:	65a1      	str	r1, [r4, #88]	@ 0x58
 80035d0:	f04f 0a00 	mov.w	sl, #0
 80035d4:	e7db      	b.n	800358e <_printf_float+0x12e>
 80035d6:	b913      	cbnz	r3, 80035de <_printf_float+0x17e>
 80035d8:	6822      	ldr	r2, [r4, #0]
 80035da:	07d2      	lsls	r2, r2, #31
 80035dc:	d501      	bpl.n	80035e2 <_printf_float+0x182>
 80035de:	3302      	adds	r3, #2
 80035e0:	e7f4      	b.n	80035cc <_printf_float+0x16c>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e7f2      	b.n	80035cc <_printf_float+0x16c>
 80035e6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80035ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80035ec:	4299      	cmp	r1, r3
 80035ee:	db05      	blt.n	80035fc <_printf_float+0x19c>
 80035f0:	6823      	ldr	r3, [r4, #0]
 80035f2:	6121      	str	r1, [r4, #16]
 80035f4:	07d8      	lsls	r0, r3, #31
 80035f6:	d5ea      	bpl.n	80035ce <_printf_float+0x16e>
 80035f8:	1c4b      	adds	r3, r1, #1
 80035fa:	e7e7      	b.n	80035cc <_printf_float+0x16c>
 80035fc:	2900      	cmp	r1, #0
 80035fe:	bfd4      	ite	le
 8003600:	f1c1 0202 	rsble	r2, r1, #2
 8003604:	2201      	movgt	r2, #1
 8003606:	4413      	add	r3, r2
 8003608:	e7e0      	b.n	80035cc <_printf_float+0x16c>
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	055a      	lsls	r2, r3, #21
 800360e:	d407      	bmi.n	8003620 <_printf_float+0x1c0>
 8003610:	6923      	ldr	r3, [r4, #16]
 8003612:	4642      	mov	r2, r8
 8003614:	4631      	mov	r1, r6
 8003616:	4628      	mov	r0, r5
 8003618:	47b8      	blx	r7
 800361a:	3001      	adds	r0, #1
 800361c:	d12a      	bne.n	8003674 <_printf_float+0x214>
 800361e:	e76b      	b.n	80034f8 <_printf_float+0x98>
 8003620:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8003624:	f240 80e0 	bls.w	80037e8 <_printf_float+0x388>
 8003628:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800362c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003634:	d133      	bne.n	800369e <_printf_float+0x23e>
 8003636:	4a38      	ldr	r2, [pc, #224]	@ (8003718 <_printf_float+0x2b8>)
 8003638:	2301      	movs	r3, #1
 800363a:	4631      	mov	r1, r6
 800363c:	4628      	mov	r0, r5
 800363e:	47b8      	blx	r7
 8003640:	3001      	adds	r0, #1
 8003642:	f43f af59 	beq.w	80034f8 <_printf_float+0x98>
 8003646:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800364a:	4543      	cmp	r3, r8
 800364c:	db02      	blt.n	8003654 <_printf_float+0x1f4>
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	07d8      	lsls	r0, r3, #31
 8003652:	d50f      	bpl.n	8003674 <_printf_float+0x214>
 8003654:	9b05      	ldr	r3, [sp, #20]
 8003656:	465a      	mov	r2, fp
 8003658:	4631      	mov	r1, r6
 800365a:	4628      	mov	r0, r5
 800365c:	47b8      	blx	r7
 800365e:	3001      	adds	r0, #1
 8003660:	f43f af4a 	beq.w	80034f8 <_printf_float+0x98>
 8003664:	f04f 0900 	mov.w	r9, #0
 8003668:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800366c:	f104 0a1a 	add.w	sl, r4, #26
 8003670:	45c8      	cmp	r8, r9
 8003672:	dc09      	bgt.n	8003688 <_printf_float+0x228>
 8003674:	6823      	ldr	r3, [r4, #0]
 8003676:	079b      	lsls	r3, r3, #30
 8003678:	f100 8107 	bmi.w	800388a <_printf_float+0x42a>
 800367c:	68e0      	ldr	r0, [r4, #12]
 800367e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003680:	4298      	cmp	r0, r3
 8003682:	bfb8      	it	lt
 8003684:	4618      	movlt	r0, r3
 8003686:	e739      	b.n	80034fc <_printf_float+0x9c>
 8003688:	2301      	movs	r3, #1
 800368a:	4652      	mov	r2, sl
 800368c:	4631      	mov	r1, r6
 800368e:	4628      	mov	r0, r5
 8003690:	47b8      	blx	r7
 8003692:	3001      	adds	r0, #1
 8003694:	f43f af30 	beq.w	80034f8 <_printf_float+0x98>
 8003698:	f109 0901 	add.w	r9, r9, #1
 800369c:	e7e8      	b.n	8003670 <_printf_float+0x210>
 800369e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	dc3b      	bgt.n	800371c <_printf_float+0x2bc>
 80036a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003718 <_printf_float+0x2b8>)
 80036a6:	2301      	movs	r3, #1
 80036a8:	4631      	mov	r1, r6
 80036aa:	4628      	mov	r0, r5
 80036ac:	47b8      	blx	r7
 80036ae:	3001      	adds	r0, #1
 80036b0:	f43f af22 	beq.w	80034f8 <_printf_float+0x98>
 80036b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80036b8:	ea59 0303 	orrs.w	r3, r9, r3
 80036bc:	d102      	bne.n	80036c4 <_printf_float+0x264>
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	07d9      	lsls	r1, r3, #31
 80036c2:	d5d7      	bpl.n	8003674 <_printf_float+0x214>
 80036c4:	9b05      	ldr	r3, [sp, #20]
 80036c6:	465a      	mov	r2, fp
 80036c8:	4631      	mov	r1, r6
 80036ca:	4628      	mov	r0, r5
 80036cc:	47b8      	blx	r7
 80036ce:	3001      	adds	r0, #1
 80036d0:	f43f af12 	beq.w	80034f8 <_printf_float+0x98>
 80036d4:	f04f 0a00 	mov.w	sl, #0
 80036d8:	f104 0b1a 	add.w	fp, r4, #26
 80036dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036de:	425b      	negs	r3, r3
 80036e0:	4553      	cmp	r3, sl
 80036e2:	dc01      	bgt.n	80036e8 <_printf_float+0x288>
 80036e4:	464b      	mov	r3, r9
 80036e6:	e794      	b.n	8003612 <_printf_float+0x1b2>
 80036e8:	2301      	movs	r3, #1
 80036ea:	465a      	mov	r2, fp
 80036ec:	4631      	mov	r1, r6
 80036ee:	4628      	mov	r0, r5
 80036f0:	47b8      	blx	r7
 80036f2:	3001      	adds	r0, #1
 80036f4:	f43f af00 	beq.w	80034f8 <_printf_float+0x98>
 80036f8:	f10a 0a01 	add.w	sl, sl, #1
 80036fc:	e7ee      	b.n	80036dc <_printf_float+0x27c>
 80036fe:	bf00      	nop
 8003700:	ffffffff 	.word	0xffffffff
 8003704:	7fefffff 	.word	0x7fefffff
 8003708:	08005fe4 	.word	0x08005fe4
 800370c:	08005fe8 	.word	0x08005fe8
 8003710:	08005fec 	.word	0x08005fec
 8003714:	08005ff0 	.word	0x08005ff0
 8003718:	08005ff4 	.word	0x08005ff4
 800371c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800371e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003722:	4553      	cmp	r3, sl
 8003724:	bfa8      	it	ge
 8003726:	4653      	movge	r3, sl
 8003728:	2b00      	cmp	r3, #0
 800372a:	4699      	mov	r9, r3
 800372c:	dc37      	bgt.n	800379e <_printf_float+0x33e>
 800372e:	2300      	movs	r3, #0
 8003730:	9307      	str	r3, [sp, #28]
 8003732:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003736:	f104 021a 	add.w	r2, r4, #26
 800373a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800373c:	9907      	ldr	r1, [sp, #28]
 800373e:	9306      	str	r3, [sp, #24]
 8003740:	eba3 0309 	sub.w	r3, r3, r9
 8003744:	428b      	cmp	r3, r1
 8003746:	dc31      	bgt.n	80037ac <_printf_float+0x34c>
 8003748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800374a:	459a      	cmp	sl, r3
 800374c:	dc3b      	bgt.n	80037c6 <_printf_float+0x366>
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	07da      	lsls	r2, r3, #31
 8003752:	d438      	bmi.n	80037c6 <_printf_float+0x366>
 8003754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003756:	ebaa 0903 	sub.w	r9, sl, r3
 800375a:	9b06      	ldr	r3, [sp, #24]
 800375c:	ebaa 0303 	sub.w	r3, sl, r3
 8003760:	4599      	cmp	r9, r3
 8003762:	bfa8      	it	ge
 8003764:	4699      	movge	r9, r3
 8003766:	f1b9 0f00 	cmp.w	r9, #0
 800376a:	dc34      	bgt.n	80037d6 <_printf_float+0x376>
 800376c:	f04f 0800 	mov.w	r8, #0
 8003770:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003774:	f104 0b1a 	add.w	fp, r4, #26
 8003778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800377a:	ebaa 0303 	sub.w	r3, sl, r3
 800377e:	eba3 0309 	sub.w	r3, r3, r9
 8003782:	4543      	cmp	r3, r8
 8003784:	f77f af76 	ble.w	8003674 <_printf_float+0x214>
 8003788:	2301      	movs	r3, #1
 800378a:	465a      	mov	r2, fp
 800378c:	4631      	mov	r1, r6
 800378e:	4628      	mov	r0, r5
 8003790:	47b8      	blx	r7
 8003792:	3001      	adds	r0, #1
 8003794:	f43f aeb0 	beq.w	80034f8 <_printf_float+0x98>
 8003798:	f108 0801 	add.w	r8, r8, #1
 800379c:	e7ec      	b.n	8003778 <_printf_float+0x318>
 800379e:	4642      	mov	r2, r8
 80037a0:	4631      	mov	r1, r6
 80037a2:	4628      	mov	r0, r5
 80037a4:	47b8      	blx	r7
 80037a6:	3001      	adds	r0, #1
 80037a8:	d1c1      	bne.n	800372e <_printf_float+0x2ce>
 80037aa:	e6a5      	b.n	80034f8 <_printf_float+0x98>
 80037ac:	2301      	movs	r3, #1
 80037ae:	4631      	mov	r1, r6
 80037b0:	4628      	mov	r0, r5
 80037b2:	9206      	str	r2, [sp, #24]
 80037b4:	47b8      	blx	r7
 80037b6:	3001      	adds	r0, #1
 80037b8:	f43f ae9e 	beq.w	80034f8 <_printf_float+0x98>
 80037bc:	9b07      	ldr	r3, [sp, #28]
 80037be:	9a06      	ldr	r2, [sp, #24]
 80037c0:	3301      	adds	r3, #1
 80037c2:	9307      	str	r3, [sp, #28]
 80037c4:	e7b9      	b.n	800373a <_printf_float+0x2da>
 80037c6:	9b05      	ldr	r3, [sp, #20]
 80037c8:	465a      	mov	r2, fp
 80037ca:	4631      	mov	r1, r6
 80037cc:	4628      	mov	r0, r5
 80037ce:	47b8      	blx	r7
 80037d0:	3001      	adds	r0, #1
 80037d2:	d1bf      	bne.n	8003754 <_printf_float+0x2f4>
 80037d4:	e690      	b.n	80034f8 <_printf_float+0x98>
 80037d6:	9a06      	ldr	r2, [sp, #24]
 80037d8:	464b      	mov	r3, r9
 80037da:	4442      	add	r2, r8
 80037dc:	4631      	mov	r1, r6
 80037de:	4628      	mov	r0, r5
 80037e0:	47b8      	blx	r7
 80037e2:	3001      	adds	r0, #1
 80037e4:	d1c2      	bne.n	800376c <_printf_float+0x30c>
 80037e6:	e687      	b.n	80034f8 <_printf_float+0x98>
 80037e8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80037ec:	f1b9 0f01 	cmp.w	r9, #1
 80037f0:	dc01      	bgt.n	80037f6 <_printf_float+0x396>
 80037f2:	07db      	lsls	r3, r3, #31
 80037f4:	d536      	bpl.n	8003864 <_printf_float+0x404>
 80037f6:	2301      	movs	r3, #1
 80037f8:	4642      	mov	r2, r8
 80037fa:	4631      	mov	r1, r6
 80037fc:	4628      	mov	r0, r5
 80037fe:	47b8      	blx	r7
 8003800:	3001      	adds	r0, #1
 8003802:	f43f ae79 	beq.w	80034f8 <_printf_float+0x98>
 8003806:	9b05      	ldr	r3, [sp, #20]
 8003808:	465a      	mov	r2, fp
 800380a:	4631      	mov	r1, r6
 800380c:	4628      	mov	r0, r5
 800380e:	47b8      	blx	r7
 8003810:	3001      	adds	r0, #1
 8003812:	f43f ae71 	beq.w	80034f8 <_printf_float+0x98>
 8003816:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800381a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800381e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003822:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8003826:	d018      	beq.n	800385a <_printf_float+0x3fa>
 8003828:	464b      	mov	r3, r9
 800382a:	f108 0201 	add.w	r2, r8, #1
 800382e:	4631      	mov	r1, r6
 8003830:	4628      	mov	r0, r5
 8003832:	47b8      	blx	r7
 8003834:	3001      	adds	r0, #1
 8003836:	d10c      	bne.n	8003852 <_printf_float+0x3f2>
 8003838:	e65e      	b.n	80034f8 <_printf_float+0x98>
 800383a:	2301      	movs	r3, #1
 800383c:	465a      	mov	r2, fp
 800383e:	4631      	mov	r1, r6
 8003840:	4628      	mov	r0, r5
 8003842:	47b8      	blx	r7
 8003844:	3001      	adds	r0, #1
 8003846:	f43f ae57 	beq.w	80034f8 <_printf_float+0x98>
 800384a:	f108 0801 	add.w	r8, r8, #1
 800384e:	45c8      	cmp	r8, r9
 8003850:	dbf3      	blt.n	800383a <_printf_float+0x3da>
 8003852:	4653      	mov	r3, sl
 8003854:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003858:	e6dc      	b.n	8003614 <_printf_float+0x1b4>
 800385a:	f04f 0800 	mov.w	r8, #0
 800385e:	f104 0b1a 	add.w	fp, r4, #26
 8003862:	e7f4      	b.n	800384e <_printf_float+0x3ee>
 8003864:	2301      	movs	r3, #1
 8003866:	4642      	mov	r2, r8
 8003868:	e7e1      	b.n	800382e <_printf_float+0x3ce>
 800386a:	2301      	movs	r3, #1
 800386c:	464a      	mov	r2, r9
 800386e:	4631      	mov	r1, r6
 8003870:	4628      	mov	r0, r5
 8003872:	47b8      	blx	r7
 8003874:	3001      	adds	r0, #1
 8003876:	f43f ae3f 	beq.w	80034f8 <_printf_float+0x98>
 800387a:	f108 0801 	add.w	r8, r8, #1
 800387e:	68e3      	ldr	r3, [r4, #12]
 8003880:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003882:	1a5b      	subs	r3, r3, r1
 8003884:	4543      	cmp	r3, r8
 8003886:	dcf0      	bgt.n	800386a <_printf_float+0x40a>
 8003888:	e6f8      	b.n	800367c <_printf_float+0x21c>
 800388a:	f04f 0800 	mov.w	r8, #0
 800388e:	f104 0919 	add.w	r9, r4, #25
 8003892:	e7f4      	b.n	800387e <_printf_float+0x41e>

08003894 <_printf_common>:
 8003894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003898:	4616      	mov	r6, r2
 800389a:	4698      	mov	r8, r3
 800389c:	688a      	ldr	r2, [r1, #8]
 800389e:	690b      	ldr	r3, [r1, #16]
 80038a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80038a4:	4293      	cmp	r3, r2
 80038a6:	bfb8      	it	lt
 80038a8:	4613      	movlt	r3, r2
 80038aa:	6033      	str	r3, [r6, #0]
 80038ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80038b0:	4607      	mov	r7, r0
 80038b2:	460c      	mov	r4, r1
 80038b4:	b10a      	cbz	r2, 80038ba <_printf_common+0x26>
 80038b6:	3301      	adds	r3, #1
 80038b8:	6033      	str	r3, [r6, #0]
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	0699      	lsls	r1, r3, #26
 80038be:	bf42      	ittt	mi
 80038c0:	6833      	ldrmi	r3, [r6, #0]
 80038c2:	3302      	addmi	r3, #2
 80038c4:	6033      	strmi	r3, [r6, #0]
 80038c6:	6825      	ldr	r5, [r4, #0]
 80038c8:	f015 0506 	ands.w	r5, r5, #6
 80038cc:	d106      	bne.n	80038dc <_printf_common+0x48>
 80038ce:	f104 0a19 	add.w	sl, r4, #25
 80038d2:	68e3      	ldr	r3, [r4, #12]
 80038d4:	6832      	ldr	r2, [r6, #0]
 80038d6:	1a9b      	subs	r3, r3, r2
 80038d8:	42ab      	cmp	r3, r5
 80038da:	dc26      	bgt.n	800392a <_printf_common+0x96>
 80038dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80038e0:	6822      	ldr	r2, [r4, #0]
 80038e2:	3b00      	subs	r3, #0
 80038e4:	bf18      	it	ne
 80038e6:	2301      	movne	r3, #1
 80038e8:	0692      	lsls	r2, r2, #26
 80038ea:	d42b      	bmi.n	8003944 <_printf_common+0xb0>
 80038ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80038f0:	4641      	mov	r1, r8
 80038f2:	4638      	mov	r0, r7
 80038f4:	47c8      	blx	r9
 80038f6:	3001      	adds	r0, #1
 80038f8:	d01e      	beq.n	8003938 <_printf_common+0xa4>
 80038fa:	6823      	ldr	r3, [r4, #0]
 80038fc:	6922      	ldr	r2, [r4, #16]
 80038fe:	f003 0306 	and.w	r3, r3, #6
 8003902:	2b04      	cmp	r3, #4
 8003904:	bf02      	ittt	eq
 8003906:	68e5      	ldreq	r5, [r4, #12]
 8003908:	6833      	ldreq	r3, [r6, #0]
 800390a:	1aed      	subeq	r5, r5, r3
 800390c:	68a3      	ldr	r3, [r4, #8]
 800390e:	bf0c      	ite	eq
 8003910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003914:	2500      	movne	r5, #0
 8003916:	4293      	cmp	r3, r2
 8003918:	bfc4      	itt	gt
 800391a:	1a9b      	subgt	r3, r3, r2
 800391c:	18ed      	addgt	r5, r5, r3
 800391e:	2600      	movs	r6, #0
 8003920:	341a      	adds	r4, #26
 8003922:	42b5      	cmp	r5, r6
 8003924:	d11a      	bne.n	800395c <_printf_common+0xc8>
 8003926:	2000      	movs	r0, #0
 8003928:	e008      	b.n	800393c <_printf_common+0xa8>
 800392a:	2301      	movs	r3, #1
 800392c:	4652      	mov	r2, sl
 800392e:	4641      	mov	r1, r8
 8003930:	4638      	mov	r0, r7
 8003932:	47c8      	blx	r9
 8003934:	3001      	adds	r0, #1
 8003936:	d103      	bne.n	8003940 <_printf_common+0xac>
 8003938:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800393c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003940:	3501      	adds	r5, #1
 8003942:	e7c6      	b.n	80038d2 <_printf_common+0x3e>
 8003944:	18e1      	adds	r1, r4, r3
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	2030      	movs	r0, #48	@ 0x30
 800394a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800394e:	4422      	add	r2, r4
 8003950:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003954:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003958:	3302      	adds	r3, #2
 800395a:	e7c7      	b.n	80038ec <_printf_common+0x58>
 800395c:	2301      	movs	r3, #1
 800395e:	4622      	mov	r2, r4
 8003960:	4641      	mov	r1, r8
 8003962:	4638      	mov	r0, r7
 8003964:	47c8      	blx	r9
 8003966:	3001      	adds	r0, #1
 8003968:	d0e6      	beq.n	8003938 <_printf_common+0xa4>
 800396a:	3601      	adds	r6, #1
 800396c:	e7d9      	b.n	8003922 <_printf_common+0x8e>
	...

08003970 <_printf_i>:
 8003970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003974:	7e0f      	ldrb	r7, [r1, #24]
 8003976:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003978:	2f78      	cmp	r7, #120	@ 0x78
 800397a:	4691      	mov	r9, r2
 800397c:	4680      	mov	r8, r0
 800397e:	460c      	mov	r4, r1
 8003980:	469a      	mov	sl, r3
 8003982:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003986:	d807      	bhi.n	8003998 <_printf_i+0x28>
 8003988:	2f62      	cmp	r7, #98	@ 0x62
 800398a:	d80a      	bhi.n	80039a2 <_printf_i+0x32>
 800398c:	2f00      	cmp	r7, #0
 800398e:	f000 80d2 	beq.w	8003b36 <_printf_i+0x1c6>
 8003992:	2f58      	cmp	r7, #88	@ 0x58
 8003994:	f000 80b9 	beq.w	8003b0a <_printf_i+0x19a>
 8003998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800399c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80039a0:	e03a      	b.n	8003a18 <_printf_i+0xa8>
 80039a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80039a6:	2b15      	cmp	r3, #21
 80039a8:	d8f6      	bhi.n	8003998 <_printf_i+0x28>
 80039aa:	a101      	add	r1, pc, #4	@ (adr r1, 80039b0 <_printf_i+0x40>)
 80039ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039b0:	08003a09 	.word	0x08003a09
 80039b4:	08003a1d 	.word	0x08003a1d
 80039b8:	08003999 	.word	0x08003999
 80039bc:	08003999 	.word	0x08003999
 80039c0:	08003999 	.word	0x08003999
 80039c4:	08003999 	.word	0x08003999
 80039c8:	08003a1d 	.word	0x08003a1d
 80039cc:	08003999 	.word	0x08003999
 80039d0:	08003999 	.word	0x08003999
 80039d4:	08003999 	.word	0x08003999
 80039d8:	08003999 	.word	0x08003999
 80039dc:	08003b1d 	.word	0x08003b1d
 80039e0:	08003a47 	.word	0x08003a47
 80039e4:	08003ad7 	.word	0x08003ad7
 80039e8:	08003999 	.word	0x08003999
 80039ec:	08003999 	.word	0x08003999
 80039f0:	08003b3f 	.word	0x08003b3f
 80039f4:	08003999 	.word	0x08003999
 80039f8:	08003a47 	.word	0x08003a47
 80039fc:	08003999 	.word	0x08003999
 8003a00:	08003999 	.word	0x08003999
 8003a04:	08003adf 	.word	0x08003adf
 8003a08:	6833      	ldr	r3, [r6, #0]
 8003a0a:	1d1a      	adds	r2, r3, #4
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6032      	str	r2, [r6, #0]
 8003a10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e09d      	b.n	8003b58 <_printf_i+0x1e8>
 8003a1c:	6833      	ldr	r3, [r6, #0]
 8003a1e:	6820      	ldr	r0, [r4, #0]
 8003a20:	1d19      	adds	r1, r3, #4
 8003a22:	6031      	str	r1, [r6, #0]
 8003a24:	0606      	lsls	r6, r0, #24
 8003a26:	d501      	bpl.n	8003a2c <_printf_i+0xbc>
 8003a28:	681d      	ldr	r5, [r3, #0]
 8003a2a:	e003      	b.n	8003a34 <_printf_i+0xc4>
 8003a2c:	0645      	lsls	r5, r0, #25
 8003a2e:	d5fb      	bpl.n	8003a28 <_printf_i+0xb8>
 8003a30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a34:	2d00      	cmp	r5, #0
 8003a36:	da03      	bge.n	8003a40 <_printf_i+0xd0>
 8003a38:	232d      	movs	r3, #45	@ 0x2d
 8003a3a:	426d      	negs	r5, r5
 8003a3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a40:	4859      	ldr	r0, [pc, #356]	@ (8003ba8 <_printf_i+0x238>)
 8003a42:	230a      	movs	r3, #10
 8003a44:	e011      	b.n	8003a6a <_printf_i+0xfa>
 8003a46:	6821      	ldr	r1, [r4, #0]
 8003a48:	6833      	ldr	r3, [r6, #0]
 8003a4a:	0608      	lsls	r0, r1, #24
 8003a4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a50:	d402      	bmi.n	8003a58 <_printf_i+0xe8>
 8003a52:	0649      	lsls	r1, r1, #25
 8003a54:	bf48      	it	mi
 8003a56:	b2ad      	uxthmi	r5, r5
 8003a58:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a5a:	4853      	ldr	r0, [pc, #332]	@ (8003ba8 <_printf_i+0x238>)
 8003a5c:	6033      	str	r3, [r6, #0]
 8003a5e:	bf14      	ite	ne
 8003a60:	230a      	movne	r3, #10
 8003a62:	2308      	moveq	r3, #8
 8003a64:	2100      	movs	r1, #0
 8003a66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a6a:	6866      	ldr	r6, [r4, #4]
 8003a6c:	60a6      	str	r6, [r4, #8]
 8003a6e:	2e00      	cmp	r6, #0
 8003a70:	bfa2      	ittt	ge
 8003a72:	6821      	ldrge	r1, [r4, #0]
 8003a74:	f021 0104 	bicge.w	r1, r1, #4
 8003a78:	6021      	strge	r1, [r4, #0]
 8003a7a:	b90d      	cbnz	r5, 8003a80 <_printf_i+0x110>
 8003a7c:	2e00      	cmp	r6, #0
 8003a7e:	d04b      	beq.n	8003b18 <_printf_i+0x1a8>
 8003a80:	4616      	mov	r6, r2
 8003a82:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a86:	fb03 5711 	mls	r7, r3, r1, r5
 8003a8a:	5dc7      	ldrb	r7, [r0, r7]
 8003a8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a90:	462f      	mov	r7, r5
 8003a92:	42bb      	cmp	r3, r7
 8003a94:	460d      	mov	r5, r1
 8003a96:	d9f4      	bls.n	8003a82 <_printf_i+0x112>
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d10b      	bne.n	8003ab4 <_printf_i+0x144>
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	07df      	lsls	r7, r3, #31
 8003aa0:	d508      	bpl.n	8003ab4 <_printf_i+0x144>
 8003aa2:	6923      	ldr	r3, [r4, #16]
 8003aa4:	6861      	ldr	r1, [r4, #4]
 8003aa6:	4299      	cmp	r1, r3
 8003aa8:	bfde      	ittt	le
 8003aaa:	2330      	movle	r3, #48	@ 0x30
 8003aac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ab0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003ab4:	1b92      	subs	r2, r2, r6
 8003ab6:	6122      	str	r2, [r4, #16]
 8003ab8:	f8cd a000 	str.w	sl, [sp]
 8003abc:	464b      	mov	r3, r9
 8003abe:	aa03      	add	r2, sp, #12
 8003ac0:	4621      	mov	r1, r4
 8003ac2:	4640      	mov	r0, r8
 8003ac4:	f7ff fee6 	bl	8003894 <_printf_common>
 8003ac8:	3001      	adds	r0, #1
 8003aca:	d14a      	bne.n	8003b62 <_printf_i+0x1f2>
 8003acc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ad0:	b004      	add	sp, #16
 8003ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ad6:	6823      	ldr	r3, [r4, #0]
 8003ad8:	f043 0320 	orr.w	r3, r3, #32
 8003adc:	6023      	str	r3, [r4, #0]
 8003ade:	4833      	ldr	r0, [pc, #204]	@ (8003bac <_printf_i+0x23c>)
 8003ae0:	2778      	movs	r7, #120	@ 0x78
 8003ae2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	6831      	ldr	r1, [r6, #0]
 8003aea:	061f      	lsls	r7, r3, #24
 8003aec:	f851 5b04 	ldr.w	r5, [r1], #4
 8003af0:	d402      	bmi.n	8003af8 <_printf_i+0x188>
 8003af2:	065f      	lsls	r7, r3, #25
 8003af4:	bf48      	it	mi
 8003af6:	b2ad      	uxthmi	r5, r5
 8003af8:	6031      	str	r1, [r6, #0]
 8003afa:	07d9      	lsls	r1, r3, #31
 8003afc:	bf44      	itt	mi
 8003afe:	f043 0320 	orrmi.w	r3, r3, #32
 8003b02:	6023      	strmi	r3, [r4, #0]
 8003b04:	b11d      	cbz	r5, 8003b0e <_printf_i+0x19e>
 8003b06:	2310      	movs	r3, #16
 8003b08:	e7ac      	b.n	8003a64 <_printf_i+0xf4>
 8003b0a:	4827      	ldr	r0, [pc, #156]	@ (8003ba8 <_printf_i+0x238>)
 8003b0c:	e7e9      	b.n	8003ae2 <_printf_i+0x172>
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	f023 0320 	bic.w	r3, r3, #32
 8003b14:	6023      	str	r3, [r4, #0]
 8003b16:	e7f6      	b.n	8003b06 <_printf_i+0x196>
 8003b18:	4616      	mov	r6, r2
 8003b1a:	e7bd      	b.n	8003a98 <_printf_i+0x128>
 8003b1c:	6833      	ldr	r3, [r6, #0]
 8003b1e:	6825      	ldr	r5, [r4, #0]
 8003b20:	6961      	ldr	r1, [r4, #20]
 8003b22:	1d18      	adds	r0, r3, #4
 8003b24:	6030      	str	r0, [r6, #0]
 8003b26:	062e      	lsls	r6, r5, #24
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	d501      	bpl.n	8003b30 <_printf_i+0x1c0>
 8003b2c:	6019      	str	r1, [r3, #0]
 8003b2e:	e002      	b.n	8003b36 <_printf_i+0x1c6>
 8003b30:	0668      	lsls	r0, r5, #25
 8003b32:	d5fb      	bpl.n	8003b2c <_printf_i+0x1bc>
 8003b34:	8019      	strh	r1, [r3, #0]
 8003b36:	2300      	movs	r3, #0
 8003b38:	6123      	str	r3, [r4, #16]
 8003b3a:	4616      	mov	r6, r2
 8003b3c:	e7bc      	b.n	8003ab8 <_printf_i+0x148>
 8003b3e:	6833      	ldr	r3, [r6, #0]
 8003b40:	1d1a      	adds	r2, r3, #4
 8003b42:	6032      	str	r2, [r6, #0]
 8003b44:	681e      	ldr	r6, [r3, #0]
 8003b46:	6862      	ldr	r2, [r4, #4]
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4630      	mov	r0, r6
 8003b4c:	f7fc fb78 	bl	8000240 <memchr>
 8003b50:	b108      	cbz	r0, 8003b56 <_printf_i+0x1e6>
 8003b52:	1b80      	subs	r0, r0, r6
 8003b54:	6060      	str	r0, [r4, #4]
 8003b56:	6863      	ldr	r3, [r4, #4]
 8003b58:	6123      	str	r3, [r4, #16]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b60:	e7aa      	b.n	8003ab8 <_printf_i+0x148>
 8003b62:	6923      	ldr	r3, [r4, #16]
 8003b64:	4632      	mov	r2, r6
 8003b66:	4649      	mov	r1, r9
 8003b68:	4640      	mov	r0, r8
 8003b6a:	47d0      	blx	sl
 8003b6c:	3001      	adds	r0, #1
 8003b6e:	d0ad      	beq.n	8003acc <_printf_i+0x15c>
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	079b      	lsls	r3, r3, #30
 8003b74:	d413      	bmi.n	8003b9e <_printf_i+0x22e>
 8003b76:	68e0      	ldr	r0, [r4, #12]
 8003b78:	9b03      	ldr	r3, [sp, #12]
 8003b7a:	4298      	cmp	r0, r3
 8003b7c:	bfb8      	it	lt
 8003b7e:	4618      	movlt	r0, r3
 8003b80:	e7a6      	b.n	8003ad0 <_printf_i+0x160>
 8003b82:	2301      	movs	r3, #1
 8003b84:	4632      	mov	r2, r6
 8003b86:	4649      	mov	r1, r9
 8003b88:	4640      	mov	r0, r8
 8003b8a:	47d0      	blx	sl
 8003b8c:	3001      	adds	r0, #1
 8003b8e:	d09d      	beq.n	8003acc <_printf_i+0x15c>
 8003b90:	3501      	adds	r5, #1
 8003b92:	68e3      	ldr	r3, [r4, #12]
 8003b94:	9903      	ldr	r1, [sp, #12]
 8003b96:	1a5b      	subs	r3, r3, r1
 8003b98:	42ab      	cmp	r3, r5
 8003b9a:	dcf2      	bgt.n	8003b82 <_printf_i+0x212>
 8003b9c:	e7eb      	b.n	8003b76 <_printf_i+0x206>
 8003b9e:	2500      	movs	r5, #0
 8003ba0:	f104 0619 	add.w	r6, r4, #25
 8003ba4:	e7f5      	b.n	8003b92 <_printf_i+0x222>
 8003ba6:	bf00      	nop
 8003ba8:	08005ff6 	.word	0x08005ff6
 8003bac:	08006007 	.word	0x08006007

08003bb0 <std>:
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	b510      	push	{r4, lr}
 8003bb4:	4604      	mov	r4, r0
 8003bb6:	e9c0 3300 	strd	r3, r3, [r0]
 8003bba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bbe:	6083      	str	r3, [r0, #8]
 8003bc0:	8181      	strh	r1, [r0, #12]
 8003bc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8003bc4:	81c2      	strh	r2, [r0, #14]
 8003bc6:	6183      	str	r3, [r0, #24]
 8003bc8:	4619      	mov	r1, r3
 8003bca:	2208      	movs	r2, #8
 8003bcc:	305c      	adds	r0, #92	@ 0x5c
 8003bce:	f000 f914 	bl	8003dfa <memset>
 8003bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8003c08 <std+0x58>)
 8003bd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8003bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8003c0c <std+0x5c>)
 8003bd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003bda:	4b0d      	ldr	r3, [pc, #52]	@ (8003c10 <std+0x60>)
 8003bdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003bde:	4b0d      	ldr	r3, [pc, #52]	@ (8003c14 <std+0x64>)
 8003be0:	6323      	str	r3, [r4, #48]	@ 0x30
 8003be2:	4b0d      	ldr	r3, [pc, #52]	@ (8003c18 <std+0x68>)
 8003be4:	6224      	str	r4, [r4, #32]
 8003be6:	429c      	cmp	r4, r3
 8003be8:	d006      	beq.n	8003bf8 <std+0x48>
 8003bea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003bee:	4294      	cmp	r4, r2
 8003bf0:	d002      	beq.n	8003bf8 <std+0x48>
 8003bf2:	33d0      	adds	r3, #208	@ 0xd0
 8003bf4:	429c      	cmp	r4, r3
 8003bf6:	d105      	bne.n	8003c04 <std+0x54>
 8003bf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c00:	f000 b972 	b.w	8003ee8 <__retarget_lock_init_recursive>
 8003c04:	bd10      	pop	{r4, pc}
 8003c06:	bf00      	nop
 8003c08:	08003d75 	.word	0x08003d75
 8003c0c:	08003d97 	.word	0x08003d97
 8003c10:	08003dcf 	.word	0x08003dcf
 8003c14:	08003df3 	.word	0x08003df3
 8003c18:	20000360 	.word	0x20000360

08003c1c <stdio_exit_handler>:
 8003c1c:	4a02      	ldr	r2, [pc, #8]	@ (8003c28 <stdio_exit_handler+0xc>)
 8003c1e:	4903      	ldr	r1, [pc, #12]	@ (8003c2c <stdio_exit_handler+0x10>)
 8003c20:	4803      	ldr	r0, [pc, #12]	@ (8003c30 <stdio_exit_handler+0x14>)
 8003c22:	f000 b869 	b.w	8003cf8 <_fwalk_sglue>
 8003c26:	bf00      	nop
 8003c28:	2000000c 	.word	0x2000000c
 8003c2c:	08005769 	.word	0x08005769
 8003c30:	2000001c 	.word	0x2000001c

08003c34 <cleanup_stdio>:
 8003c34:	6841      	ldr	r1, [r0, #4]
 8003c36:	4b0c      	ldr	r3, [pc, #48]	@ (8003c68 <cleanup_stdio+0x34>)
 8003c38:	4299      	cmp	r1, r3
 8003c3a:	b510      	push	{r4, lr}
 8003c3c:	4604      	mov	r4, r0
 8003c3e:	d001      	beq.n	8003c44 <cleanup_stdio+0x10>
 8003c40:	f001 fd92 	bl	8005768 <_fflush_r>
 8003c44:	68a1      	ldr	r1, [r4, #8]
 8003c46:	4b09      	ldr	r3, [pc, #36]	@ (8003c6c <cleanup_stdio+0x38>)
 8003c48:	4299      	cmp	r1, r3
 8003c4a:	d002      	beq.n	8003c52 <cleanup_stdio+0x1e>
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	f001 fd8b 	bl	8005768 <_fflush_r>
 8003c52:	68e1      	ldr	r1, [r4, #12]
 8003c54:	4b06      	ldr	r3, [pc, #24]	@ (8003c70 <cleanup_stdio+0x3c>)
 8003c56:	4299      	cmp	r1, r3
 8003c58:	d004      	beq.n	8003c64 <cleanup_stdio+0x30>
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c60:	f001 bd82 	b.w	8005768 <_fflush_r>
 8003c64:	bd10      	pop	{r4, pc}
 8003c66:	bf00      	nop
 8003c68:	20000360 	.word	0x20000360
 8003c6c:	200003c8 	.word	0x200003c8
 8003c70:	20000430 	.word	0x20000430

08003c74 <global_stdio_init.part.0>:
 8003c74:	b510      	push	{r4, lr}
 8003c76:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca4 <global_stdio_init.part.0+0x30>)
 8003c78:	4c0b      	ldr	r4, [pc, #44]	@ (8003ca8 <global_stdio_init.part.0+0x34>)
 8003c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8003cac <global_stdio_init.part.0+0x38>)
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	4620      	mov	r0, r4
 8003c80:	2200      	movs	r2, #0
 8003c82:	2104      	movs	r1, #4
 8003c84:	f7ff ff94 	bl	8003bb0 <std>
 8003c88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	2109      	movs	r1, #9
 8003c90:	f7ff ff8e 	bl	8003bb0 <std>
 8003c94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003c98:	2202      	movs	r2, #2
 8003c9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c9e:	2112      	movs	r1, #18
 8003ca0:	f7ff bf86 	b.w	8003bb0 <std>
 8003ca4:	20000498 	.word	0x20000498
 8003ca8:	20000360 	.word	0x20000360
 8003cac:	08003c1d 	.word	0x08003c1d

08003cb0 <__sfp_lock_acquire>:
 8003cb0:	4801      	ldr	r0, [pc, #4]	@ (8003cb8 <__sfp_lock_acquire+0x8>)
 8003cb2:	f000 b91a 	b.w	8003eea <__retarget_lock_acquire_recursive>
 8003cb6:	bf00      	nop
 8003cb8:	200004a1 	.word	0x200004a1

08003cbc <__sfp_lock_release>:
 8003cbc:	4801      	ldr	r0, [pc, #4]	@ (8003cc4 <__sfp_lock_release+0x8>)
 8003cbe:	f000 b915 	b.w	8003eec <__retarget_lock_release_recursive>
 8003cc2:	bf00      	nop
 8003cc4:	200004a1 	.word	0x200004a1

08003cc8 <__sinit>:
 8003cc8:	b510      	push	{r4, lr}
 8003cca:	4604      	mov	r4, r0
 8003ccc:	f7ff fff0 	bl	8003cb0 <__sfp_lock_acquire>
 8003cd0:	6a23      	ldr	r3, [r4, #32]
 8003cd2:	b11b      	cbz	r3, 8003cdc <__sinit+0x14>
 8003cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cd8:	f7ff bff0 	b.w	8003cbc <__sfp_lock_release>
 8003cdc:	4b04      	ldr	r3, [pc, #16]	@ (8003cf0 <__sinit+0x28>)
 8003cde:	6223      	str	r3, [r4, #32]
 8003ce0:	4b04      	ldr	r3, [pc, #16]	@ (8003cf4 <__sinit+0x2c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1f5      	bne.n	8003cd4 <__sinit+0xc>
 8003ce8:	f7ff ffc4 	bl	8003c74 <global_stdio_init.part.0>
 8003cec:	e7f2      	b.n	8003cd4 <__sinit+0xc>
 8003cee:	bf00      	nop
 8003cf0:	08003c35 	.word	0x08003c35
 8003cf4:	20000498 	.word	0x20000498

08003cf8 <_fwalk_sglue>:
 8003cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cfc:	4607      	mov	r7, r0
 8003cfe:	4688      	mov	r8, r1
 8003d00:	4614      	mov	r4, r2
 8003d02:	2600      	movs	r6, #0
 8003d04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d08:	f1b9 0901 	subs.w	r9, r9, #1
 8003d0c:	d505      	bpl.n	8003d1a <_fwalk_sglue+0x22>
 8003d0e:	6824      	ldr	r4, [r4, #0]
 8003d10:	2c00      	cmp	r4, #0
 8003d12:	d1f7      	bne.n	8003d04 <_fwalk_sglue+0xc>
 8003d14:	4630      	mov	r0, r6
 8003d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d1a:	89ab      	ldrh	r3, [r5, #12]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d907      	bls.n	8003d30 <_fwalk_sglue+0x38>
 8003d20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d24:	3301      	adds	r3, #1
 8003d26:	d003      	beq.n	8003d30 <_fwalk_sglue+0x38>
 8003d28:	4629      	mov	r1, r5
 8003d2a:	4638      	mov	r0, r7
 8003d2c:	47c0      	blx	r8
 8003d2e:	4306      	orrs	r6, r0
 8003d30:	3568      	adds	r5, #104	@ 0x68
 8003d32:	e7e9      	b.n	8003d08 <_fwalk_sglue+0x10>

08003d34 <siprintf>:
 8003d34:	b40e      	push	{r1, r2, r3}
 8003d36:	b500      	push	{lr}
 8003d38:	b09c      	sub	sp, #112	@ 0x70
 8003d3a:	ab1d      	add	r3, sp, #116	@ 0x74
 8003d3c:	9002      	str	r0, [sp, #8]
 8003d3e:	9006      	str	r0, [sp, #24]
 8003d40:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003d44:	4809      	ldr	r0, [pc, #36]	@ (8003d6c <siprintf+0x38>)
 8003d46:	9107      	str	r1, [sp, #28]
 8003d48:	9104      	str	r1, [sp, #16]
 8003d4a:	4909      	ldr	r1, [pc, #36]	@ (8003d70 <siprintf+0x3c>)
 8003d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d50:	9105      	str	r1, [sp, #20]
 8003d52:	6800      	ldr	r0, [r0, #0]
 8003d54:	9301      	str	r3, [sp, #4]
 8003d56:	a902      	add	r1, sp, #8
 8003d58:	f001 fb86 	bl	8005468 <_svfiprintf_r>
 8003d5c:	9b02      	ldr	r3, [sp, #8]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	701a      	strb	r2, [r3, #0]
 8003d62:	b01c      	add	sp, #112	@ 0x70
 8003d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d68:	b003      	add	sp, #12
 8003d6a:	4770      	bx	lr
 8003d6c:	20000018 	.word	0x20000018
 8003d70:	ffff0208 	.word	0xffff0208

08003d74 <__sread>:
 8003d74:	b510      	push	{r4, lr}
 8003d76:	460c      	mov	r4, r1
 8003d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d7c:	f000 f86c 	bl	8003e58 <_read_r>
 8003d80:	2800      	cmp	r0, #0
 8003d82:	bfab      	itete	ge
 8003d84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003d86:	89a3      	ldrhlt	r3, [r4, #12]
 8003d88:	181b      	addge	r3, r3, r0
 8003d8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003d8e:	bfac      	ite	ge
 8003d90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003d92:	81a3      	strhlt	r3, [r4, #12]
 8003d94:	bd10      	pop	{r4, pc}

08003d96 <__swrite>:
 8003d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d9a:	461f      	mov	r7, r3
 8003d9c:	898b      	ldrh	r3, [r1, #12]
 8003d9e:	05db      	lsls	r3, r3, #23
 8003da0:	4605      	mov	r5, r0
 8003da2:	460c      	mov	r4, r1
 8003da4:	4616      	mov	r6, r2
 8003da6:	d505      	bpl.n	8003db4 <__swrite+0x1e>
 8003da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dac:	2302      	movs	r3, #2
 8003dae:	2200      	movs	r2, #0
 8003db0:	f000 f840 	bl	8003e34 <_lseek_r>
 8003db4:	89a3      	ldrh	r3, [r4, #12]
 8003db6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003dbe:	81a3      	strh	r3, [r4, #12]
 8003dc0:	4632      	mov	r2, r6
 8003dc2:	463b      	mov	r3, r7
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dca:	f000 b857 	b.w	8003e7c <_write_r>

08003dce <__sseek>:
 8003dce:	b510      	push	{r4, lr}
 8003dd0:	460c      	mov	r4, r1
 8003dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dd6:	f000 f82d 	bl	8003e34 <_lseek_r>
 8003dda:	1c43      	adds	r3, r0, #1
 8003ddc:	89a3      	ldrh	r3, [r4, #12]
 8003dde:	bf15      	itete	ne
 8003de0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003de2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003de6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003dea:	81a3      	strheq	r3, [r4, #12]
 8003dec:	bf18      	it	ne
 8003dee:	81a3      	strhne	r3, [r4, #12]
 8003df0:	bd10      	pop	{r4, pc}

08003df2 <__sclose>:
 8003df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003df6:	f000 b80d 	b.w	8003e14 <_close_r>

08003dfa <memset>:
 8003dfa:	4402      	add	r2, r0
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d100      	bne.n	8003e04 <memset+0xa>
 8003e02:	4770      	bx	lr
 8003e04:	f803 1b01 	strb.w	r1, [r3], #1
 8003e08:	e7f9      	b.n	8003dfe <memset+0x4>
	...

08003e0c <_localeconv_r>:
 8003e0c:	4800      	ldr	r0, [pc, #0]	@ (8003e10 <_localeconv_r+0x4>)
 8003e0e:	4770      	bx	lr
 8003e10:	20000158 	.word	0x20000158

08003e14 <_close_r>:
 8003e14:	b538      	push	{r3, r4, r5, lr}
 8003e16:	4d06      	ldr	r5, [pc, #24]	@ (8003e30 <_close_r+0x1c>)
 8003e18:	2300      	movs	r3, #0
 8003e1a:	4604      	mov	r4, r0
 8003e1c:	4608      	mov	r0, r1
 8003e1e:	602b      	str	r3, [r5, #0]
 8003e20:	f002 f840 	bl	8005ea4 <_close>
 8003e24:	1c43      	adds	r3, r0, #1
 8003e26:	d102      	bne.n	8003e2e <_close_r+0x1a>
 8003e28:	682b      	ldr	r3, [r5, #0]
 8003e2a:	b103      	cbz	r3, 8003e2e <_close_r+0x1a>
 8003e2c:	6023      	str	r3, [r4, #0]
 8003e2e:	bd38      	pop	{r3, r4, r5, pc}
 8003e30:	2000049c 	.word	0x2000049c

08003e34 <_lseek_r>:
 8003e34:	b538      	push	{r3, r4, r5, lr}
 8003e36:	4d07      	ldr	r5, [pc, #28]	@ (8003e54 <_lseek_r+0x20>)
 8003e38:	4604      	mov	r4, r0
 8003e3a:	4608      	mov	r0, r1
 8003e3c:	4611      	mov	r1, r2
 8003e3e:	2200      	movs	r2, #0
 8003e40:	602a      	str	r2, [r5, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	f002 f856 	bl	8005ef4 <_lseek>
 8003e48:	1c43      	adds	r3, r0, #1
 8003e4a:	d102      	bne.n	8003e52 <_lseek_r+0x1e>
 8003e4c:	682b      	ldr	r3, [r5, #0]
 8003e4e:	b103      	cbz	r3, 8003e52 <_lseek_r+0x1e>
 8003e50:	6023      	str	r3, [r4, #0]
 8003e52:	bd38      	pop	{r3, r4, r5, pc}
 8003e54:	2000049c 	.word	0x2000049c

08003e58 <_read_r>:
 8003e58:	b538      	push	{r3, r4, r5, lr}
 8003e5a:	4d07      	ldr	r5, [pc, #28]	@ (8003e78 <_read_r+0x20>)
 8003e5c:	4604      	mov	r4, r0
 8003e5e:	4608      	mov	r0, r1
 8003e60:	4611      	mov	r1, r2
 8003e62:	2200      	movs	r2, #0
 8003e64:	602a      	str	r2, [r5, #0]
 8003e66:	461a      	mov	r2, r3
 8003e68:	f002 f84c 	bl	8005f04 <_read>
 8003e6c:	1c43      	adds	r3, r0, #1
 8003e6e:	d102      	bne.n	8003e76 <_read_r+0x1e>
 8003e70:	682b      	ldr	r3, [r5, #0]
 8003e72:	b103      	cbz	r3, 8003e76 <_read_r+0x1e>
 8003e74:	6023      	str	r3, [r4, #0]
 8003e76:	bd38      	pop	{r3, r4, r5, pc}
 8003e78:	2000049c 	.word	0x2000049c

08003e7c <_write_r>:
 8003e7c:	b538      	push	{r3, r4, r5, lr}
 8003e7e:	4d07      	ldr	r5, [pc, #28]	@ (8003e9c <_write_r+0x20>)
 8003e80:	4604      	mov	r4, r0
 8003e82:	4608      	mov	r0, r1
 8003e84:	4611      	mov	r1, r2
 8003e86:	2200      	movs	r2, #0
 8003e88:	602a      	str	r2, [r5, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	f002 f850 	bl	8005f30 <_write>
 8003e90:	1c43      	adds	r3, r0, #1
 8003e92:	d102      	bne.n	8003e9a <_write_r+0x1e>
 8003e94:	682b      	ldr	r3, [r5, #0]
 8003e96:	b103      	cbz	r3, 8003e9a <_write_r+0x1e>
 8003e98:	6023      	str	r3, [r4, #0]
 8003e9a:	bd38      	pop	{r3, r4, r5, pc}
 8003e9c:	2000049c 	.word	0x2000049c

08003ea0 <__libc_init_array>:
 8003ea0:	b570      	push	{r4, r5, r6, lr}
 8003ea2:	4d0d      	ldr	r5, [pc, #52]	@ (8003ed8 <__libc_init_array+0x38>)
 8003ea4:	4c0d      	ldr	r4, [pc, #52]	@ (8003edc <__libc_init_array+0x3c>)
 8003ea6:	1b64      	subs	r4, r4, r5
 8003ea8:	10a4      	asrs	r4, r4, #2
 8003eaa:	2600      	movs	r6, #0
 8003eac:	42a6      	cmp	r6, r4
 8003eae:	d109      	bne.n	8003ec4 <__libc_init_array+0x24>
 8003eb0:	4d0b      	ldr	r5, [pc, #44]	@ (8003ee0 <__libc_init_array+0x40>)
 8003eb2:	4c0c      	ldr	r4, [pc, #48]	@ (8003ee4 <__libc_init_array+0x44>)
 8003eb4:	f002 f846 	bl	8005f44 <_init>
 8003eb8:	1b64      	subs	r4, r4, r5
 8003eba:	10a4      	asrs	r4, r4, #2
 8003ebc:	2600      	movs	r6, #0
 8003ebe:	42a6      	cmp	r6, r4
 8003ec0:	d105      	bne.n	8003ece <__libc_init_array+0x2e>
 8003ec2:	bd70      	pop	{r4, r5, r6, pc}
 8003ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec8:	4798      	blx	r3
 8003eca:	3601      	adds	r6, #1
 8003ecc:	e7ee      	b.n	8003eac <__libc_init_array+0xc>
 8003ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ed2:	4798      	blx	r3
 8003ed4:	3601      	adds	r6, #1
 8003ed6:	e7f2      	b.n	8003ebe <__libc_init_array+0x1e>
 8003ed8:	08006360 	.word	0x08006360
 8003edc:	08006360 	.word	0x08006360
 8003ee0:	08006360 	.word	0x08006360
 8003ee4:	08006364 	.word	0x08006364

08003ee8 <__retarget_lock_init_recursive>:
 8003ee8:	4770      	bx	lr

08003eea <__retarget_lock_acquire_recursive>:
 8003eea:	4770      	bx	lr

08003eec <__retarget_lock_release_recursive>:
 8003eec:	4770      	bx	lr

08003eee <quorem>:
 8003eee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef2:	6903      	ldr	r3, [r0, #16]
 8003ef4:	690c      	ldr	r4, [r1, #16]
 8003ef6:	42a3      	cmp	r3, r4
 8003ef8:	4607      	mov	r7, r0
 8003efa:	db7e      	blt.n	8003ffa <quorem+0x10c>
 8003efc:	3c01      	subs	r4, #1
 8003efe:	f101 0814 	add.w	r8, r1, #20
 8003f02:	00a3      	lsls	r3, r4, #2
 8003f04:	f100 0514 	add.w	r5, r0, #20
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f0e:	9301      	str	r3, [sp, #4]
 8003f10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003f14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003f20:	fbb2 f6f3 	udiv	r6, r2, r3
 8003f24:	d32e      	bcc.n	8003f84 <quorem+0x96>
 8003f26:	f04f 0a00 	mov.w	sl, #0
 8003f2a:	46c4      	mov	ip, r8
 8003f2c:	46ae      	mov	lr, r5
 8003f2e:	46d3      	mov	fp, sl
 8003f30:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003f34:	b298      	uxth	r0, r3
 8003f36:	fb06 a000 	mla	r0, r6, r0, sl
 8003f3a:	0c02      	lsrs	r2, r0, #16
 8003f3c:	0c1b      	lsrs	r3, r3, #16
 8003f3e:	fb06 2303 	mla	r3, r6, r3, r2
 8003f42:	f8de 2000 	ldr.w	r2, [lr]
 8003f46:	b280      	uxth	r0, r0
 8003f48:	b292      	uxth	r2, r2
 8003f4a:	1a12      	subs	r2, r2, r0
 8003f4c:	445a      	add	r2, fp
 8003f4e:	f8de 0000 	ldr.w	r0, [lr]
 8003f52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003f5c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003f60:	b292      	uxth	r2, r2
 8003f62:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003f66:	45e1      	cmp	r9, ip
 8003f68:	f84e 2b04 	str.w	r2, [lr], #4
 8003f6c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003f70:	d2de      	bcs.n	8003f30 <quorem+0x42>
 8003f72:	9b00      	ldr	r3, [sp, #0]
 8003f74:	58eb      	ldr	r3, [r5, r3]
 8003f76:	b92b      	cbnz	r3, 8003f84 <quorem+0x96>
 8003f78:	9b01      	ldr	r3, [sp, #4]
 8003f7a:	3b04      	subs	r3, #4
 8003f7c:	429d      	cmp	r5, r3
 8003f7e:	461a      	mov	r2, r3
 8003f80:	d32f      	bcc.n	8003fe2 <quorem+0xf4>
 8003f82:	613c      	str	r4, [r7, #16]
 8003f84:	4638      	mov	r0, r7
 8003f86:	f001 f90b 	bl	80051a0 <__mcmp>
 8003f8a:	2800      	cmp	r0, #0
 8003f8c:	db25      	blt.n	8003fda <quorem+0xec>
 8003f8e:	4629      	mov	r1, r5
 8003f90:	2000      	movs	r0, #0
 8003f92:	f858 2b04 	ldr.w	r2, [r8], #4
 8003f96:	f8d1 c000 	ldr.w	ip, [r1]
 8003f9a:	fa1f fe82 	uxth.w	lr, r2
 8003f9e:	fa1f f38c 	uxth.w	r3, ip
 8003fa2:	eba3 030e 	sub.w	r3, r3, lr
 8003fa6:	4403      	add	r3, r0
 8003fa8:	0c12      	lsrs	r2, r2, #16
 8003faa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003fae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003fb8:	45c1      	cmp	r9, r8
 8003fba:	f841 3b04 	str.w	r3, [r1], #4
 8003fbe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003fc2:	d2e6      	bcs.n	8003f92 <quorem+0xa4>
 8003fc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003fc8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003fcc:	b922      	cbnz	r2, 8003fd8 <quorem+0xea>
 8003fce:	3b04      	subs	r3, #4
 8003fd0:	429d      	cmp	r5, r3
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	d30b      	bcc.n	8003fee <quorem+0x100>
 8003fd6:	613c      	str	r4, [r7, #16]
 8003fd8:	3601      	adds	r6, #1
 8003fda:	4630      	mov	r0, r6
 8003fdc:	b003      	add	sp, #12
 8003fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	3b04      	subs	r3, #4
 8003fe6:	2a00      	cmp	r2, #0
 8003fe8:	d1cb      	bne.n	8003f82 <quorem+0x94>
 8003fea:	3c01      	subs	r4, #1
 8003fec:	e7c6      	b.n	8003f7c <quorem+0x8e>
 8003fee:	6812      	ldr	r2, [r2, #0]
 8003ff0:	3b04      	subs	r3, #4
 8003ff2:	2a00      	cmp	r2, #0
 8003ff4:	d1ef      	bne.n	8003fd6 <quorem+0xe8>
 8003ff6:	3c01      	subs	r4, #1
 8003ff8:	e7ea      	b.n	8003fd0 <quorem+0xe2>
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	e7ee      	b.n	8003fdc <quorem+0xee>
	...

08004000 <_dtoa_r>:
 8004000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004004:	ed2d 8b02 	vpush	{d8}
 8004008:	69c7      	ldr	r7, [r0, #28]
 800400a:	b091      	sub	sp, #68	@ 0x44
 800400c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004010:	ec55 4b10 	vmov	r4, r5, d0
 8004014:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8004016:	9107      	str	r1, [sp, #28]
 8004018:	4681      	mov	r9, r0
 800401a:	9209      	str	r2, [sp, #36]	@ 0x24
 800401c:	930d      	str	r3, [sp, #52]	@ 0x34
 800401e:	b97f      	cbnz	r7, 8004040 <_dtoa_r+0x40>
 8004020:	2010      	movs	r0, #16
 8004022:	f000 fd8d 	bl	8004b40 <malloc>
 8004026:	4602      	mov	r2, r0
 8004028:	f8c9 001c 	str.w	r0, [r9, #28]
 800402c:	b920      	cbnz	r0, 8004038 <_dtoa_r+0x38>
 800402e:	4ba0      	ldr	r3, [pc, #640]	@ (80042b0 <_dtoa_r+0x2b0>)
 8004030:	21ef      	movs	r1, #239	@ 0xef
 8004032:	48a0      	ldr	r0, [pc, #640]	@ (80042b4 <_dtoa_r+0x2b4>)
 8004034:	f001 fbf8 	bl	8005828 <__assert_func>
 8004038:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800403c:	6007      	str	r7, [r0, #0]
 800403e:	60c7      	str	r7, [r0, #12]
 8004040:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004044:	6819      	ldr	r1, [r3, #0]
 8004046:	b159      	cbz	r1, 8004060 <_dtoa_r+0x60>
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	604a      	str	r2, [r1, #4]
 800404c:	2301      	movs	r3, #1
 800404e:	4093      	lsls	r3, r2
 8004050:	608b      	str	r3, [r1, #8]
 8004052:	4648      	mov	r0, r9
 8004054:	f000 fe6a 	bl	8004d2c <_Bfree>
 8004058:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	1e2b      	subs	r3, r5, #0
 8004062:	bfbb      	ittet	lt
 8004064:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004068:	9303      	strlt	r3, [sp, #12]
 800406a:	2300      	movge	r3, #0
 800406c:	2201      	movlt	r2, #1
 800406e:	bfac      	ite	ge
 8004070:	6033      	strge	r3, [r6, #0]
 8004072:	6032      	strlt	r2, [r6, #0]
 8004074:	4b90      	ldr	r3, [pc, #576]	@ (80042b8 <_dtoa_r+0x2b8>)
 8004076:	9e03      	ldr	r6, [sp, #12]
 8004078:	43b3      	bics	r3, r6
 800407a:	d110      	bne.n	800409e <_dtoa_r+0x9e>
 800407c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800407e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8004088:	4323      	orrs	r3, r4
 800408a:	f000 84de 	beq.w	8004a4a <_dtoa_r+0xa4a>
 800408e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004090:	4f8a      	ldr	r7, [pc, #552]	@ (80042bc <_dtoa_r+0x2bc>)
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 84e0 	beq.w	8004a58 <_dtoa_r+0xa58>
 8004098:	1cfb      	adds	r3, r7, #3
 800409a:	f000 bcdb 	b.w	8004a54 <_dtoa_r+0xa54>
 800409e:	ed9d 8b02 	vldr	d8, [sp, #8]
 80040a2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80040a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040aa:	d10a      	bne.n	80040c2 <_dtoa_r+0xc2>
 80040ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80040ae:	2301      	movs	r3, #1
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80040b4:	b113      	cbz	r3, 80040bc <_dtoa_r+0xbc>
 80040b6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80040b8:	4b81      	ldr	r3, [pc, #516]	@ (80042c0 <_dtoa_r+0x2c0>)
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	4f81      	ldr	r7, [pc, #516]	@ (80042c4 <_dtoa_r+0x2c4>)
 80040be:	f000 bccb 	b.w	8004a58 <_dtoa_r+0xa58>
 80040c2:	aa0e      	add	r2, sp, #56	@ 0x38
 80040c4:	a90f      	add	r1, sp, #60	@ 0x3c
 80040c6:	4648      	mov	r0, r9
 80040c8:	eeb0 0b48 	vmov.f64	d0, d8
 80040cc:	f001 f918 	bl	8005300 <__d2b>
 80040d0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80040d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80040d6:	9001      	str	r0, [sp, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d045      	beq.n	8004168 <_dtoa_r+0x168>
 80040dc:	eeb0 7b48 	vmov.f64	d7, d8
 80040e0:	ee18 1a90 	vmov	r1, s17
 80040e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80040e8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80040ec:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80040f0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80040f4:	2500      	movs	r5, #0
 80040f6:	ee07 1a90 	vmov	s15, r1
 80040fa:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80040fe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8004298 <_dtoa_r+0x298>
 8004102:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004106:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80042a0 <_dtoa_r+0x2a0>
 800410a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800410e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80042a8 <_dtoa_r+0x2a8>
 8004112:	ee07 3a90 	vmov	s15, r3
 8004116:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800411a:	eeb0 7b46 	vmov.f64	d7, d6
 800411e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8004122:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8004126:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800412a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800412e:	ee16 8a90 	vmov	r8, s13
 8004132:	d508      	bpl.n	8004146 <_dtoa_r+0x146>
 8004134:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8004138:	eeb4 6b47 	vcmp.f64	d6, d7
 800413c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004140:	bf18      	it	ne
 8004142:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8004146:	f1b8 0f16 	cmp.w	r8, #22
 800414a:	d82b      	bhi.n	80041a4 <_dtoa_r+0x1a4>
 800414c:	495e      	ldr	r1, [pc, #376]	@ (80042c8 <_dtoa_r+0x2c8>)
 800414e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8004152:	ed91 7b00 	vldr	d7, [r1]
 8004156:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800415a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800415e:	d501      	bpl.n	8004164 <_dtoa_r+0x164>
 8004160:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004164:	2100      	movs	r1, #0
 8004166:	e01e      	b.n	80041a6 <_dtoa_r+0x1a6>
 8004168:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800416a:	4413      	add	r3, r2
 800416c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8004170:	2920      	cmp	r1, #32
 8004172:	bfc1      	itttt	gt
 8004174:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8004178:	408e      	lslgt	r6, r1
 800417a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800417e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8004182:	bfd6      	itet	le
 8004184:	f1c1 0120 	rsble	r1, r1, #32
 8004188:	4331      	orrgt	r1, r6
 800418a:	fa04 f101 	lslle.w	r1, r4, r1
 800418e:	ee07 1a90 	vmov	s15, r1
 8004192:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004196:	3b01      	subs	r3, #1
 8004198:	ee17 1a90 	vmov	r1, s15
 800419c:	2501      	movs	r5, #1
 800419e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80041a2:	e7a8      	b.n	80040f6 <_dtoa_r+0xf6>
 80041a4:	2101      	movs	r1, #1
 80041a6:	1ad2      	subs	r2, r2, r3
 80041a8:	1e53      	subs	r3, r2, #1
 80041aa:	9306      	str	r3, [sp, #24]
 80041ac:	bf45      	ittet	mi
 80041ae:	f1c2 0301 	rsbmi	r3, r2, #1
 80041b2:	9305      	strmi	r3, [sp, #20]
 80041b4:	2300      	movpl	r3, #0
 80041b6:	2300      	movmi	r3, #0
 80041b8:	bf4c      	ite	mi
 80041ba:	9306      	strmi	r3, [sp, #24]
 80041bc:	9305      	strpl	r3, [sp, #20]
 80041be:	f1b8 0f00 	cmp.w	r8, #0
 80041c2:	910c      	str	r1, [sp, #48]	@ 0x30
 80041c4:	db18      	blt.n	80041f8 <_dtoa_r+0x1f8>
 80041c6:	9b06      	ldr	r3, [sp, #24]
 80041c8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80041cc:	4443      	add	r3, r8
 80041ce:	9306      	str	r3, [sp, #24]
 80041d0:	2300      	movs	r3, #0
 80041d2:	9a07      	ldr	r2, [sp, #28]
 80041d4:	2a09      	cmp	r2, #9
 80041d6:	d849      	bhi.n	800426c <_dtoa_r+0x26c>
 80041d8:	2a05      	cmp	r2, #5
 80041da:	bfc4      	itt	gt
 80041dc:	3a04      	subgt	r2, #4
 80041de:	9207      	strgt	r2, [sp, #28]
 80041e0:	9a07      	ldr	r2, [sp, #28]
 80041e2:	f1a2 0202 	sub.w	r2, r2, #2
 80041e6:	bfcc      	ite	gt
 80041e8:	2400      	movgt	r4, #0
 80041ea:	2401      	movle	r4, #1
 80041ec:	2a03      	cmp	r2, #3
 80041ee:	d848      	bhi.n	8004282 <_dtoa_r+0x282>
 80041f0:	e8df f002 	tbb	[pc, r2]
 80041f4:	3a2c2e0b 	.word	0x3a2c2e0b
 80041f8:	9b05      	ldr	r3, [sp, #20]
 80041fa:	2200      	movs	r2, #0
 80041fc:	eba3 0308 	sub.w	r3, r3, r8
 8004200:	9305      	str	r3, [sp, #20]
 8004202:	920a      	str	r2, [sp, #40]	@ 0x28
 8004204:	f1c8 0300 	rsb	r3, r8, #0
 8004208:	e7e3      	b.n	80041d2 <_dtoa_r+0x1d2>
 800420a:	2200      	movs	r2, #0
 800420c:	9208      	str	r2, [sp, #32]
 800420e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004210:	2a00      	cmp	r2, #0
 8004212:	dc39      	bgt.n	8004288 <_dtoa_r+0x288>
 8004214:	f04f 0b01 	mov.w	fp, #1
 8004218:	46da      	mov	sl, fp
 800421a:	465a      	mov	r2, fp
 800421c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8004220:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8004224:	2100      	movs	r1, #0
 8004226:	2004      	movs	r0, #4
 8004228:	f100 0614 	add.w	r6, r0, #20
 800422c:	4296      	cmp	r6, r2
 800422e:	d930      	bls.n	8004292 <_dtoa_r+0x292>
 8004230:	6079      	str	r1, [r7, #4]
 8004232:	4648      	mov	r0, r9
 8004234:	9304      	str	r3, [sp, #16]
 8004236:	f000 fd39 	bl	8004cac <_Balloc>
 800423a:	9b04      	ldr	r3, [sp, #16]
 800423c:	4607      	mov	r7, r0
 800423e:	2800      	cmp	r0, #0
 8004240:	d146      	bne.n	80042d0 <_dtoa_r+0x2d0>
 8004242:	4b22      	ldr	r3, [pc, #136]	@ (80042cc <_dtoa_r+0x2cc>)
 8004244:	4602      	mov	r2, r0
 8004246:	f240 11af 	movw	r1, #431	@ 0x1af
 800424a:	e6f2      	b.n	8004032 <_dtoa_r+0x32>
 800424c:	2201      	movs	r2, #1
 800424e:	e7dd      	b.n	800420c <_dtoa_r+0x20c>
 8004250:	2200      	movs	r2, #0
 8004252:	9208      	str	r2, [sp, #32]
 8004254:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004256:	eb08 0b02 	add.w	fp, r8, r2
 800425a:	f10b 0a01 	add.w	sl, fp, #1
 800425e:	4652      	mov	r2, sl
 8004260:	2a01      	cmp	r2, #1
 8004262:	bfb8      	it	lt
 8004264:	2201      	movlt	r2, #1
 8004266:	e7db      	b.n	8004220 <_dtoa_r+0x220>
 8004268:	2201      	movs	r2, #1
 800426a:	e7f2      	b.n	8004252 <_dtoa_r+0x252>
 800426c:	2401      	movs	r4, #1
 800426e:	2200      	movs	r2, #0
 8004270:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8004274:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8004278:	2100      	movs	r1, #0
 800427a:	46da      	mov	sl, fp
 800427c:	2212      	movs	r2, #18
 800427e:	9109      	str	r1, [sp, #36]	@ 0x24
 8004280:	e7ce      	b.n	8004220 <_dtoa_r+0x220>
 8004282:	2201      	movs	r2, #1
 8004284:	9208      	str	r2, [sp, #32]
 8004286:	e7f5      	b.n	8004274 <_dtoa_r+0x274>
 8004288:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800428c:	46da      	mov	sl, fp
 800428e:	465a      	mov	r2, fp
 8004290:	e7c6      	b.n	8004220 <_dtoa_r+0x220>
 8004292:	3101      	adds	r1, #1
 8004294:	0040      	lsls	r0, r0, #1
 8004296:	e7c7      	b.n	8004228 <_dtoa_r+0x228>
 8004298:	636f4361 	.word	0x636f4361
 800429c:	3fd287a7 	.word	0x3fd287a7
 80042a0:	8b60c8b3 	.word	0x8b60c8b3
 80042a4:	3fc68a28 	.word	0x3fc68a28
 80042a8:	509f79fb 	.word	0x509f79fb
 80042ac:	3fd34413 	.word	0x3fd34413
 80042b0:	08006025 	.word	0x08006025
 80042b4:	0800603c 	.word	0x0800603c
 80042b8:	7ff00000 	.word	0x7ff00000
 80042bc:	08006021 	.word	0x08006021
 80042c0:	08005ff5 	.word	0x08005ff5
 80042c4:	08005ff4 	.word	0x08005ff4
 80042c8:	08006138 	.word	0x08006138
 80042cc:	08006094 	.word	0x08006094
 80042d0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80042d4:	f1ba 0f0e 	cmp.w	sl, #14
 80042d8:	6010      	str	r0, [r2, #0]
 80042da:	d86f      	bhi.n	80043bc <_dtoa_r+0x3bc>
 80042dc:	2c00      	cmp	r4, #0
 80042de:	d06d      	beq.n	80043bc <_dtoa_r+0x3bc>
 80042e0:	f1b8 0f00 	cmp.w	r8, #0
 80042e4:	f340 80c2 	ble.w	800446c <_dtoa_r+0x46c>
 80042e8:	4aca      	ldr	r2, [pc, #808]	@ (8004614 <_dtoa_r+0x614>)
 80042ea:	f008 010f 	and.w	r1, r8, #15
 80042ee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80042f2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80042f6:	ed92 7b00 	vldr	d7, [r2]
 80042fa:	ea4f 1128 	mov.w	r1, r8, asr #4
 80042fe:	f000 80a9 	beq.w	8004454 <_dtoa_r+0x454>
 8004302:	4ac5      	ldr	r2, [pc, #788]	@ (8004618 <_dtoa_r+0x618>)
 8004304:	ed92 6b08 	vldr	d6, [r2, #32]
 8004308:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800430c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004310:	f001 010f 	and.w	r1, r1, #15
 8004314:	2203      	movs	r2, #3
 8004316:	48c0      	ldr	r0, [pc, #768]	@ (8004618 <_dtoa_r+0x618>)
 8004318:	2900      	cmp	r1, #0
 800431a:	f040 809d 	bne.w	8004458 <_dtoa_r+0x458>
 800431e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004322:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004326:	ed8d 7b02 	vstr	d7, [sp, #8]
 800432a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800432c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004330:	2900      	cmp	r1, #0
 8004332:	f000 80c1 	beq.w	80044b8 <_dtoa_r+0x4b8>
 8004336:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800433a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800433e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004342:	f140 80b9 	bpl.w	80044b8 <_dtoa_r+0x4b8>
 8004346:	f1ba 0f00 	cmp.w	sl, #0
 800434a:	f000 80b5 	beq.w	80044b8 <_dtoa_r+0x4b8>
 800434e:	f1bb 0f00 	cmp.w	fp, #0
 8004352:	dd31      	ble.n	80043b8 <_dtoa_r+0x3b8>
 8004354:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8004358:	ee27 7b06 	vmul.f64	d7, d7, d6
 800435c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004360:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8004364:	9104      	str	r1, [sp, #16]
 8004366:	3201      	adds	r2, #1
 8004368:	465c      	mov	r4, fp
 800436a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800436e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8004372:	ee07 2a90 	vmov	s15, r2
 8004376:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800437a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800437e:	ee15 2a90 	vmov	r2, s11
 8004382:	ec51 0b15 	vmov	r0, r1, d5
 8004386:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800438a:	2c00      	cmp	r4, #0
 800438c:	f040 8098 	bne.w	80044c0 <_dtoa_r+0x4c0>
 8004390:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8004394:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004398:	ec41 0b17 	vmov	d7, r0, r1
 800439c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80043a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a4:	f300 8261 	bgt.w	800486a <_dtoa_r+0x86a>
 80043a8:	eeb1 7b47 	vneg.f64	d7, d7
 80043ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80043b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b4:	f100 80f5 	bmi.w	80045a2 <_dtoa_r+0x5a2>
 80043b8:	ed8d 8b02 	vstr	d8, [sp, #8]
 80043bc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80043be:	2a00      	cmp	r2, #0
 80043c0:	f2c0 812c 	blt.w	800461c <_dtoa_r+0x61c>
 80043c4:	f1b8 0f0e 	cmp.w	r8, #14
 80043c8:	f300 8128 	bgt.w	800461c <_dtoa_r+0x61c>
 80043cc:	4b91      	ldr	r3, [pc, #580]	@ (8004614 <_dtoa_r+0x614>)
 80043ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80043d2:	ed93 6b00 	vldr	d6, [r3]
 80043d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043d8:	2b00      	cmp	r3, #0
 80043da:	da03      	bge.n	80043e4 <_dtoa_r+0x3e4>
 80043dc:	f1ba 0f00 	cmp.w	sl, #0
 80043e0:	f340 80d2 	ble.w	8004588 <_dtoa_r+0x588>
 80043e4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80043e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80043ec:	463e      	mov	r6, r7
 80043ee:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80043f2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80043f6:	ee15 3a10 	vmov	r3, s10
 80043fa:	3330      	adds	r3, #48	@ 0x30
 80043fc:	f806 3b01 	strb.w	r3, [r6], #1
 8004400:	1bf3      	subs	r3, r6, r7
 8004402:	459a      	cmp	sl, r3
 8004404:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8004408:	eea3 7b46 	vfms.f64	d7, d3, d6
 800440c:	f040 80f8 	bne.w	8004600 <_dtoa_r+0x600>
 8004410:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004414:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800441c:	f300 80dd 	bgt.w	80045da <_dtoa_r+0x5da>
 8004420:	eeb4 7b46 	vcmp.f64	d7, d6
 8004424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004428:	d104      	bne.n	8004434 <_dtoa_r+0x434>
 800442a:	ee15 3a10 	vmov	r3, s10
 800442e:	07db      	lsls	r3, r3, #31
 8004430:	f100 80d3 	bmi.w	80045da <_dtoa_r+0x5da>
 8004434:	9901      	ldr	r1, [sp, #4]
 8004436:	4648      	mov	r0, r9
 8004438:	f000 fc78 	bl	8004d2c <_Bfree>
 800443c:	2300      	movs	r3, #0
 800443e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004440:	7033      	strb	r3, [r6, #0]
 8004442:	f108 0301 	add.w	r3, r8, #1
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 8304 	beq.w	8004a58 <_dtoa_r+0xa58>
 8004450:	601e      	str	r6, [r3, #0]
 8004452:	e301      	b.n	8004a58 <_dtoa_r+0xa58>
 8004454:	2202      	movs	r2, #2
 8004456:	e75e      	b.n	8004316 <_dtoa_r+0x316>
 8004458:	07cc      	lsls	r4, r1, #31
 800445a:	d504      	bpl.n	8004466 <_dtoa_r+0x466>
 800445c:	ed90 6b00 	vldr	d6, [r0]
 8004460:	3201      	adds	r2, #1
 8004462:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004466:	1049      	asrs	r1, r1, #1
 8004468:	3008      	adds	r0, #8
 800446a:	e755      	b.n	8004318 <_dtoa_r+0x318>
 800446c:	d022      	beq.n	80044b4 <_dtoa_r+0x4b4>
 800446e:	f1c8 0100 	rsb	r1, r8, #0
 8004472:	4a68      	ldr	r2, [pc, #416]	@ (8004614 <_dtoa_r+0x614>)
 8004474:	f001 000f 	and.w	r0, r1, #15
 8004478:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800447c:	ed92 7b00 	vldr	d7, [r2]
 8004480:	ee28 7b07 	vmul.f64	d7, d8, d7
 8004484:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004488:	4863      	ldr	r0, [pc, #396]	@ (8004618 <_dtoa_r+0x618>)
 800448a:	1109      	asrs	r1, r1, #4
 800448c:	2400      	movs	r4, #0
 800448e:	2202      	movs	r2, #2
 8004490:	b929      	cbnz	r1, 800449e <_dtoa_r+0x49e>
 8004492:	2c00      	cmp	r4, #0
 8004494:	f43f af49 	beq.w	800432a <_dtoa_r+0x32a>
 8004498:	ed8d 7b02 	vstr	d7, [sp, #8]
 800449c:	e745      	b.n	800432a <_dtoa_r+0x32a>
 800449e:	07ce      	lsls	r6, r1, #31
 80044a0:	d505      	bpl.n	80044ae <_dtoa_r+0x4ae>
 80044a2:	ed90 6b00 	vldr	d6, [r0]
 80044a6:	3201      	adds	r2, #1
 80044a8:	2401      	movs	r4, #1
 80044aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80044ae:	1049      	asrs	r1, r1, #1
 80044b0:	3008      	adds	r0, #8
 80044b2:	e7ed      	b.n	8004490 <_dtoa_r+0x490>
 80044b4:	2202      	movs	r2, #2
 80044b6:	e738      	b.n	800432a <_dtoa_r+0x32a>
 80044b8:	f8cd 8010 	str.w	r8, [sp, #16]
 80044bc:	4654      	mov	r4, sl
 80044be:	e754      	b.n	800436a <_dtoa_r+0x36a>
 80044c0:	4a54      	ldr	r2, [pc, #336]	@ (8004614 <_dtoa_r+0x614>)
 80044c2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80044c6:	ed12 4b02 	vldr	d4, [r2, #-8]
 80044ca:	9a08      	ldr	r2, [sp, #32]
 80044cc:	ec41 0b17 	vmov	d7, r0, r1
 80044d0:	443c      	add	r4, r7
 80044d2:	b34a      	cbz	r2, 8004528 <_dtoa_r+0x528>
 80044d4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80044d8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80044dc:	463e      	mov	r6, r7
 80044de:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80044e2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80044e6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80044ea:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80044ee:	ee14 2a90 	vmov	r2, s9
 80044f2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80044f6:	3230      	adds	r2, #48	@ 0x30
 80044f8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80044fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004504:	f806 2b01 	strb.w	r2, [r6], #1
 8004508:	d438      	bmi.n	800457c <_dtoa_r+0x57c>
 800450a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800450e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8004512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004516:	d462      	bmi.n	80045de <_dtoa_r+0x5de>
 8004518:	42a6      	cmp	r6, r4
 800451a:	f43f af4d 	beq.w	80043b8 <_dtoa_r+0x3b8>
 800451e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8004522:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004526:	e7e0      	b.n	80044ea <_dtoa_r+0x4ea>
 8004528:	4621      	mov	r1, r4
 800452a:	463e      	mov	r6, r7
 800452c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004530:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8004534:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004538:	ee14 2a90 	vmov	r2, s9
 800453c:	3230      	adds	r2, #48	@ 0x30
 800453e:	f806 2b01 	strb.w	r2, [r6], #1
 8004542:	42a6      	cmp	r6, r4
 8004544:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004548:	ee36 6b45 	vsub.f64	d6, d6, d5
 800454c:	d119      	bne.n	8004582 <_dtoa_r+0x582>
 800454e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8004552:	ee37 4b05 	vadd.f64	d4, d7, d5
 8004556:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800455a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800455e:	dc3e      	bgt.n	80045de <_dtoa_r+0x5de>
 8004560:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004564:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8004568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800456c:	f57f af24 	bpl.w	80043b8 <_dtoa_r+0x3b8>
 8004570:	460e      	mov	r6, r1
 8004572:	3901      	subs	r1, #1
 8004574:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004578:	2b30      	cmp	r3, #48	@ 0x30
 800457a:	d0f9      	beq.n	8004570 <_dtoa_r+0x570>
 800457c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8004580:	e758      	b.n	8004434 <_dtoa_r+0x434>
 8004582:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004586:	e7d5      	b.n	8004534 <_dtoa_r+0x534>
 8004588:	d10b      	bne.n	80045a2 <_dtoa_r+0x5a2>
 800458a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800458e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004592:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004596:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800459a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800459e:	f2c0 8161 	blt.w	8004864 <_dtoa_r+0x864>
 80045a2:	2400      	movs	r4, #0
 80045a4:	4625      	mov	r5, r4
 80045a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045a8:	43db      	mvns	r3, r3
 80045aa:	9304      	str	r3, [sp, #16]
 80045ac:	463e      	mov	r6, r7
 80045ae:	f04f 0800 	mov.w	r8, #0
 80045b2:	4621      	mov	r1, r4
 80045b4:	4648      	mov	r0, r9
 80045b6:	f000 fbb9 	bl	8004d2c <_Bfree>
 80045ba:	2d00      	cmp	r5, #0
 80045bc:	d0de      	beq.n	800457c <_dtoa_r+0x57c>
 80045be:	f1b8 0f00 	cmp.w	r8, #0
 80045c2:	d005      	beq.n	80045d0 <_dtoa_r+0x5d0>
 80045c4:	45a8      	cmp	r8, r5
 80045c6:	d003      	beq.n	80045d0 <_dtoa_r+0x5d0>
 80045c8:	4641      	mov	r1, r8
 80045ca:	4648      	mov	r0, r9
 80045cc:	f000 fbae 	bl	8004d2c <_Bfree>
 80045d0:	4629      	mov	r1, r5
 80045d2:	4648      	mov	r0, r9
 80045d4:	f000 fbaa 	bl	8004d2c <_Bfree>
 80045d8:	e7d0      	b.n	800457c <_dtoa_r+0x57c>
 80045da:	f8cd 8010 	str.w	r8, [sp, #16]
 80045de:	4633      	mov	r3, r6
 80045e0:	461e      	mov	r6, r3
 80045e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80045e6:	2a39      	cmp	r2, #57	@ 0x39
 80045e8:	d106      	bne.n	80045f8 <_dtoa_r+0x5f8>
 80045ea:	429f      	cmp	r7, r3
 80045ec:	d1f8      	bne.n	80045e0 <_dtoa_r+0x5e0>
 80045ee:	9a04      	ldr	r2, [sp, #16]
 80045f0:	3201      	adds	r2, #1
 80045f2:	9204      	str	r2, [sp, #16]
 80045f4:	2230      	movs	r2, #48	@ 0x30
 80045f6:	703a      	strb	r2, [r7, #0]
 80045f8:	781a      	ldrb	r2, [r3, #0]
 80045fa:	3201      	adds	r2, #1
 80045fc:	701a      	strb	r2, [r3, #0]
 80045fe:	e7bd      	b.n	800457c <_dtoa_r+0x57c>
 8004600:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004604:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800460c:	f47f aeef 	bne.w	80043ee <_dtoa_r+0x3ee>
 8004610:	e710      	b.n	8004434 <_dtoa_r+0x434>
 8004612:	bf00      	nop
 8004614:	08006138 	.word	0x08006138
 8004618:	08006110 	.word	0x08006110
 800461c:	9908      	ldr	r1, [sp, #32]
 800461e:	2900      	cmp	r1, #0
 8004620:	f000 80e3 	beq.w	80047ea <_dtoa_r+0x7ea>
 8004624:	9907      	ldr	r1, [sp, #28]
 8004626:	2901      	cmp	r1, #1
 8004628:	f300 80c8 	bgt.w	80047bc <_dtoa_r+0x7bc>
 800462c:	2d00      	cmp	r5, #0
 800462e:	f000 80c1 	beq.w	80047b4 <_dtoa_r+0x7b4>
 8004632:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8004636:	9e05      	ldr	r6, [sp, #20]
 8004638:	461c      	mov	r4, r3
 800463a:	9304      	str	r3, [sp, #16]
 800463c:	9b05      	ldr	r3, [sp, #20]
 800463e:	4413      	add	r3, r2
 8004640:	9305      	str	r3, [sp, #20]
 8004642:	9b06      	ldr	r3, [sp, #24]
 8004644:	2101      	movs	r1, #1
 8004646:	4413      	add	r3, r2
 8004648:	4648      	mov	r0, r9
 800464a:	9306      	str	r3, [sp, #24]
 800464c:	f000 fc22 	bl	8004e94 <__i2b>
 8004650:	9b04      	ldr	r3, [sp, #16]
 8004652:	4605      	mov	r5, r0
 8004654:	b166      	cbz	r6, 8004670 <_dtoa_r+0x670>
 8004656:	9a06      	ldr	r2, [sp, #24]
 8004658:	2a00      	cmp	r2, #0
 800465a:	dd09      	ble.n	8004670 <_dtoa_r+0x670>
 800465c:	42b2      	cmp	r2, r6
 800465e:	9905      	ldr	r1, [sp, #20]
 8004660:	bfa8      	it	ge
 8004662:	4632      	movge	r2, r6
 8004664:	1a89      	subs	r1, r1, r2
 8004666:	9105      	str	r1, [sp, #20]
 8004668:	9906      	ldr	r1, [sp, #24]
 800466a:	1ab6      	subs	r6, r6, r2
 800466c:	1a8a      	subs	r2, r1, r2
 800466e:	9206      	str	r2, [sp, #24]
 8004670:	b1fb      	cbz	r3, 80046b2 <_dtoa_r+0x6b2>
 8004672:	9a08      	ldr	r2, [sp, #32]
 8004674:	2a00      	cmp	r2, #0
 8004676:	f000 80bc 	beq.w	80047f2 <_dtoa_r+0x7f2>
 800467a:	b19c      	cbz	r4, 80046a4 <_dtoa_r+0x6a4>
 800467c:	4629      	mov	r1, r5
 800467e:	4622      	mov	r2, r4
 8004680:	4648      	mov	r0, r9
 8004682:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004684:	f000 fcc6 	bl	8005014 <__pow5mult>
 8004688:	9a01      	ldr	r2, [sp, #4]
 800468a:	4601      	mov	r1, r0
 800468c:	4605      	mov	r5, r0
 800468e:	4648      	mov	r0, r9
 8004690:	f000 fc16 	bl	8004ec0 <__multiply>
 8004694:	9901      	ldr	r1, [sp, #4]
 8004696:	9004      	str	r0, [sp, #16]
 8004698:	4648      	mov	r0, r9
 800469a:	f000 fb47 	bl	8004d2c <_Bfree>
 800469e:	9a04      	ldr	r2, [sp, #16]
 80046a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80046a2:	9201      	str	r2, [sp, #4]
 80046a4:	1b1a      	subs	r2, r3, r4
 80046a6:	d004      	beq.n	80046b2 <_dtoa_r+0x6b2>
 80046a8:	9901      	ldr	r1, [sp, #4]
 80046aa:	4648      	mov	r0, r9
 80046ac:	f000 fcb2 	bl	8005014 <__pow5mult>
 80046b0:	9001      	str	r0, [sp, #4]
 80046b2:	2101      	movs	r1, #1
 80046b4:	4648      	mov	r0, r9
 80046b6:	f000 fbed 	bl	8004e94 <__i2b>
 80046ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80046bc:	4604      	mov	r4, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 81d0 	beq.w	8004a64 <_dtoa_r+0xa64>
 80046c4:	461a      	mov	r2, r3
 80046c6:	4601      	mov	r1, r0
 80046c8:	4648      	mov	r0, r9
 80046ca:	f000 fca3 	bl	8005014 <__pow5mult>
 80046ce:	9b07      	ldr	r3, [sp, #28]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	4604      	mov	r4, r0
 80046d4:	f300 8095 	bgt.w	8004802 <_dtoa_r+0x802>
 80046d8:	9b02      	ldr	r3, [sp, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f040 808b 	bne.w	80047f6 <_dtoa_r+0x7f6>
 80046e0:	9b03      	ldr	r3, [sp, #12]
 80046e2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80046e6:	2a00      	cmp	r2, #0
 80046e8:	f040 8087 	bne.w	80047fa <_dtoa_r+0x7fa>
 80046ec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80046f0:	0d12      	lsrs	r2, r2, #20
 80046f2:	0512      	lsls	r2, r2, #20
 80046f4:	2a00      	cmp	r2, #0
 80046f6:	f000 8082 	beq.w	80047fe <_dtoa_r+0x7fe>
 80046fa:	9b05      	ldr	r3, [sp, #20]
 80046fc:	3301      	adds	r3, #1
 80046fe:	9305      	str	r3, [sp, #20]
 8004700:	9b06      	ldr	r3, [sp, #24]
 8004702:	3301      	adds	r3, #1
 8004704:	9306      	str	r3, [sp, #24]
 8004706:	2301      	movs	r3, #1
 8004708:	930b      	str	r3, [sp, #44]	@ 0x2c
 800470a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 81af 	beq.w	8004a70 <_dtoa_r+0xa70>
 8004712:	6922      	ldr	r2, [r4, #16]
 8004714:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004718:	6910      	ldr	r0, [r2, #16]
 800471a:	f000 fb6f 	bl	8004dfc <__hi0bits>
 800471e:	f1c0 0020 	rsb	r0, r0, #32
 8004722:	9b06      	ldr	r3, [sp, #24]
 8004724:	4418      	add	r0, r3
 8004726:	f010 001f 	ands.w	r0, r0, #31
 800472a:	d076      	beq.n	800481a <_dtoa_r+0x81a>
 800472c:	f1c0 0220 	rsb	r2, r0, #32
 8004730:	2a04      	cmp	r2, #4
 8004732:	dd69      	ble.n	8004808 <_dtoa_r+0x808>
 8004734:	9b05      	ldr	r3, [sp, #20]
 8004736:	f1c0 001c 	rsb	r0, r0, #28
 800473a:	4403      	add	r3, r0
 800473c:	9305      	str	r3, [sp, #20]
 800473e:	9b06      	ldr	r3, [sp, #24]
 8004740:	4406      	add	r6, r0
 8004742:	4403      	add	r3, r0
 8004744:	9306      	str	r3, [sp, #24]
 8004746:	9b05      	ldr	r3, [sp, #20]
 8004748:	2b00      	cmp	r3, #0
 800474a:	dd05      	ble.n	8004758 <_dtoa_r+0x758>
 800474c:	9901      	ldr	r1, [sp, #4]
 800474e:	461a      	mov	r2, r3
 8004750:	4648      	mov	r0, r9
 8004752:	f000 fcb9 	bl	80050c8 <__lshift>
 8004756:	9001      	str	r0, [sp, #4]
 8004758:	9b06      	ldr	r3, [sp, #24]
 800475a:	2b00      	cmp	r3, #0
 800475c:	dd05      	ble.n	800476a <_dtoa_r+0x76a>
 800475e:	4621      	mov	r1, r4
 8004760:	461a      	mov	r2, r3
 8004762:	4648      	mov	r0, r9
 8004764:	f000 fcb0 	bl	80050c8 <__lshift>
 8004768:	4604      	mov	r4, r0
 800476a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800476c:	2b00      	cmp	r3, #0
 800476e:	d056      	beq.n	800481e <_dtoa_r+0x81e>
 8004770:	9801      	ldr	r0, [sp, #4]
 8004772:	4621      	mov	r1, r4
 8004774:	f000 fd14 	bl	80051a0 <__mcmp>
 8004778:	2800      	cmp	r0, #0
 800477a:	da50      	bge.n	800481e <_dtoa_r+0x81e>
 800477c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8004780:	9304      	str	r3, [sp, #16]
 8004782:	9901      	ldr	r1, [sp, #4]
 8004784:	2300      	movs	r3, #0
 8004786:	220a      	movs	r2, #10
 8004788:	4648      	mov	r0, r9
 800478a:	f000 faf1 	bl	8004d70 <__multadd>
 800478e:	9b08      	ldr	r3, [sp, #32]
 8004790:	9001      	str	r0, [sp, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 816e 	beq.w	8004a74 <_dtoa_r+0xa74>
 8004798:	4629      	mov	r1, r5
 800479a:	2300      	movs	r3, #0
 800479c:	220a      	movs	r2, #10
 800479e:	4648      	mov	r0, r9
 80047a0:	f000 fae6 	bl	8004d70 <__multadd>
 80047a4:	f1bb 0f00 	cmp.w	fp, #0
 80047a8:	4605      	mov	r5, r0
 80047aa:	dc64      	bgt.n	8004876 <_dtoa_r+0x876>
 80047ac:	9b07      	ldr	r3, [sp, #28]
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	dc3e      	bgt.n	8004830 <_dtoa_r+0x830>
 80047b2:	e060      	b.n	8004876 <_dtoa_r+0x876>
 80047b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80047b6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80047ba:	e73c      	b.n	8004636 <_dtoa_r+0x636>
 80047bc:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 80047c0:	42a3      	cmp	r3, r4
 80047c2:	bfbf      	itttt	lt
 80047c4:	1ae2      	sublt	r2, r4, r3
 80047c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80047c8:	189b      	addlt	r3, r3, r2
 80047ca:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80047cc:	bfae      	itee	ge
 80047ce:	1b1c      	subge	r4, r3, r4
 80047d0:	4623      	movlt	r3, r4
 80047d2:	2400      	movlt	r4, #0
 80047d4:	f1ba 0f00 	cmp.w	sl, #0
 80047d8:	bfb5      	itete	lt
 80047da:	9a05      	ldrlt	r2, [sp, #20]
 80047dc:	9e05      	ldrge	r6, [sp, #20]
 80047de:	eba2 060a 	sublt.w	r6, r2, sl
 80047e2:	4652      	movge	r2, sl
 80047e4:	bfb8      	it	lt
 80047e6:	2200      	movlt	r2, #0
 80047e8:	e727      	b.n	800463a <_dtoa_r+0x63a>
 80047ea:	9e05      	ldr	r6, [sp, #20]
 80047ec:	9d08      	ldr	r5, [sp, #32]
 80047ee:	461c      	mov	r4, r3
 80047f0:	e730      	b.n	8004654 <_dtoa_r+0x654>
 80047f2:	461a      	mov	r2, r3
 80047f4:	e758      	b.n	80046a8 <_dtoa_r+0x6a8>
 80047f6:	2300      	movs	r3, #0
 80047f8:	e786      	b.n	8004708 <_dtoa_r+0x708>
 80047fa:	9b02      	ldr	r3, [sp, #8]
 80047fc:	e784      	b.n	8004708 <_dtoa_r+0x708>
 80047fe:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004800:	e783      	b.n	800470a <_dtoa_r+0x70a>
 8004802:	2300      	movs	r3, #0
 8004804:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004806:	e784      	b.n	8004712 <_dtoa_r+0x712>
 8004808:	d09d      	beq.n	8004746 <_dtoa_r+0x746>
 800480a:	9b05      	ldr	r3, [sp, #20]
 800480c:	321c      	adds	r2, #28
 800480e:	4413      	add	r3, r2
 8004810:	9305      	str	r3, [sp, #20]
 8004812:	9b06      	ldr	r3, [sp, #24]
 8004814:	4416      	add	r6, r2
 8004816:	4413      	add	r3, r2
 8004818:	e794      	b.n	8004744 <_dtoa_r+0x744>
 800481a:	4602      	mov	r2, r0
 800481c:	e7f5      	b.n	800480a <_dtoa_r+0x80a>
 800481e:	f1ba 0f00 	cmp.w	sl, #0
 8004822:	f8cd 8010 	str.w	r8, [sp, #16]
 8004826:	46d3      	mov	fp, sl
 8004828:	dc21      	bgt.n	800486e <_dtoa_r+0x86e>
 800482a:	9b07      	ldr	r3, [sp, #28]
 800482c:	2b02      	cmp	r3, #2
 800482e:	dd1e      	ble.n	800486e <_dtoa_r+0x86e>
 8004830:	f1bb 0f00 	cmp.w	fp, #0
 8004834:	f47f aeb7 	bne.w	80045a6 <_dtoa_r+0x5a6>
 8004838:	4621      	mov	r1, r4
 800483a:	465b      	mov	r3, fp
 800483c:	2205      	movs	r2, #5
 800483e:	4648      	mov	r0, r9
 8004840:	f000 fa96 	bl	8004d70 <__multadd>
 8004844:	4601      	mov	r1, r0
 8004846:	4604      	mov	r4, r0
 8004848:	9801      	ldr	r0, [sp, #4]
 800484a:	f000 fca9 	bl	80051a0 <__mcmp>
 800484e:	2800      	cmp	r0, #0
 8004850:	f77f aea9 	ble.w	80045a6 <_dtoa_r+0x5a6>
 8004854:	463e      	mov	r6, r7
 8004856:	2331      	movs	r3, #49	@ 0x31
 8004858:	f806 3b01 	strb.w	r3, [r6], #1
 800485c:	9b04      	ldr	r3, [sp, #16]
 800485e:	3301      	adds	r3, #1
 8004860:	9304      	str	r3, [sp, #16]
 8004862:	e6a4      	b.n	80045ae <_dtoa_r+0x5ae>
 8004864:	f8cd 8010 	str.w	r8, [sp, #16]
 8004868:	4654      	mov	r4, sl
 800486a:	4625      	mov	r5, r4
 800486c:	e7f2      	b.n	8004854 <_dtoa_r+0x854>
 800486e:	9b08      	ldr	r3, [sp, #32]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 8103 	beq.w	8004a7c <_dtoa_r+0xa7c>
 8004876:	2e00      	cmp	r6, #0
 8004878:	dd05      	ble.n	8004886 <_dtoa_r+0x886>
 800487a:	4629      	mov	r1, r5
 800487c:	4632      	mov	r2, r6
 800487e:	4648      	mov	r0, r9
 8004880:	f000 fc22 	bl	80050c8 <__lshift>
 8004884:	4605      	mov	r5, r0
 8004886:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004888:	2b00      	cmp	r3, #0
 800488a:	d058      	beq.n	800493e <_dtoa_r+0x93e>
 800488c:	6869      	ldr	r1, [r5, #4]
 800488e:	4648      	mov	r0, r9
 8004890:	f000 fa0c 	bl	8004cac <_Balloc>
 8004894:	4606      	mov	r6, r0
 8004896:	b928      	cbnz	r0, 80048a4 <_dtoa_r+0x8a4>
 8004898:	4b82      	ldr	r3, [pc, #520]	@ (8004aa4 <_dtoa_r+0xaa4>)
 800489a:	4602      	mov	r2, r0
 800489c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80048a0:	f7ff bbc7 	b.w	8004032 <_dtoa_r+0x32>
 80048a4:	692a      	ldr	r2, [r5, #16]
 80048a6:	3202      	adds	r2, #2
 80048a8:	0092      	lsls	r2, r2, #2
 80048aa:	f105 010c 	add.w	r1, r5, #12
 80048ae:	300c      	adds	r0, #12
 80048b0:	f000 ffac 	bl	800580c <memcpy>
 80048b4:	2201      	movs	r2, #1
 80048b6:	4631      	mov	r1, r6
 80048b8:	4648      	mov	r0, r9
 80048ba:	f000 fc05 	bl	80050c8 <__lshift>
 80048be:	1c7b      	adds	r3, r7, #1
 80048c0:	9305      	str	r3, [sp, #20]
 80048c2:	eb07 030b 	add.w	r3, r7, fp
 80048c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80048c8:	9b02      	ldr	r3, [sp, #8]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	46a8      	mov	r8, r5
 80048d0:	9308      	str	r3, [sp, #32]
 80048d2:	4605      	mov	r5, r0
 80048d4:	9b05      	ldr	r3, [sp, #20]
 80048d6:	9801      	ldr	r0, [sp, #4]
 80048d8:	4621      	mov	r1, r4
 80048da:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80048de:	f7ff fb06 	bl	8003eee <quorem>
 80048e2:	4641      	mov	r1, r8
 80048e4:	9002      	str	r0, [sp, #8]
 80048e6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80048ea:	9801      	ldr	r0, [sp, #4]
 80048ec:	f000 fc58 	bl	80051a0 <__mcmp>
 80048f0:	462a      	mov	r2, r5
 80048f2:	9006      	str	r0, [sp, #24]
 80048f4:	4621      	mov	r1, r4
 80048f6:	4648      	mov	r0, r9
 80048f8:	f000 fc6e 	bl	80051d8 <__mdiff>
 80048fc:	68c2      	ldr	r2, [r0, #12]
 80048fe:	4606      	mov	r6, r0
 8004900:	b9fa      	cbnz	r2, 8004942 <_dtoa_r+0x942>
 8004902:	4601      	mov	r1, r0
 8004904:	9801      	ldr	r0, [sp, #4]
 8004906:	f000 fc4b 	bl	80051a0 <__mcmp>
 800490a:	4602      	mov	r2, r0
 800490c:	4631      	mov	r1, r6
 800490e:	4648      	mov	r0, r9
 8004910:	920a      	str	r2, [sp, #40]	@ 0x28
 8004912:	f000 fa0b 	bl	8004d2c <_Bfree>
 8004916:	9b07      	ldr	r3, [sp, #28]
 8004918:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800491a:	9e05      	ldr	r6, [sp, #20]
 800491c:	ea43 0102 	orr.w	r1, r3, r2
 8004920:	9b08      	ldr	r3, [sp, #32]
 8004922:	4319      	orrs	r1, r3
 8004924:	d10f      	bne.n	8004946 <_dtoa_r+0x946>
 8004926:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800492a:	d028      	beq.n	800497e <_dtoa_r+0x97e>
 800492c:	9b06      	ldr	r3, [sp, #24]
 800492e:	2b00      	cmp	r3, #0
 8004930:	dd02      	ble.n	8004938 <_dtoa_r+0x938>
 8004932:	9b02      	ldr	r3, [sp, #8]
 8004934:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8004938:	f88b a000 	strb.w	sl, [fp]
 800493c:	e639      	b.n	80045b2 <_dtoa_r+0x5b2>
 800493e:	4628      	mov	r0, r5
 8004940:	e7bd      	b.n	80048be <_dtoa_r+0x8be>
 8004942:	2201      	movs	r2, #1
 8004944:	e7e2      	b.n	800490c <_dtoa_r+0x90c>
 8004946:	9b06      	ldr	r3, [sp, #24]
 8004948:	2b00      	cmp	r3, #0
 800494a:	db04      	blt.n	8004956 <_dtoa_r+0x956>
 800494c:	9907      	ldr	r1, [sp, #28]
 800494e:	430b      	orrs	r3, r1
 8004950:	9908      	ldr	r1, [sp, #32]
 8004952:	430b      	orrs	r3, r1
 8004954:	d120      	bne.n	8004998 <_dtoa_r+0x998>
 8004956:	2a00      	cmp	r2, #0
 8004958:	ddee      	ble.n	8004938 <_dtoa_r+0x938>
 800495a:	9901      	ldr	r1, [sp, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	4648      	mov	r0, r9
 8004960:	f000 fbb2 	bl	80050c8 <__lshift>
 8004964:	4621      	mov	r1, r4
 8004966:	9001      	str	r0, [sp, #4]
 8004968:	f000 fc1a 	bl	80051a0 <__mcmp>
 800496c:	2800      	cmp	r0, #0
 800496e:	dc03      	bgt.n	8004978 <_dtoa_r+0x978>
 8004970:	d1e2      	bne.n	8004938 <_dtoa_r+0x938>
 8004972:	f01a 0f01 	tst.w	sl, #1
 8004976:	d0df      	beq.n	8004938 <_dtoa_r+0x938>
 8004978:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800497c:	d1d9      	bne.n	8004932 <_dtoa_r+0x932>
 800497e:	2339      	movs	r3, #57	@ 0x39
 8004980:	f88b 3000 	strb.w	r3, [fp]
 8004984:	4633      	mov	r3, r6
 8004986:	461e      	mov	r6, r3
 8004988:	3b01      	subs	r3, #1
 800498a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800498e:	2a39      	cmp	r2, #57	@ 0x39
 8004990:	d053      	beq.n	8004a3a <_dtoa_r+0xa3a>
 8004992:	3201      	adds	r2, #1
 8004994:	701a      	strb	r2, [r3, #0]
 8004996:	e60c      	b.n	80045b2 <_dtoa_r+0x5b2>
 8004998:	2a00      	cmp	r2, #0
 800499a:	dd07      	ble.n	80049ac <_dtoa_r+0x9ac>
 800499c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80049a0:	d0ed      	beq.n	800497e <_dtoa_r+0x97e>
 80049a2:	f10a 0301 	add.w	r3, sl, #1
 80049a6:	f88b 3000 	strb.w	r3, [fp]
 80049aa:	e602      	b.n	80045b2 <_dtoa_r+0x5b2>
 80049ac:	9b05      	ldr	r3, [sp, #20]
 80049ae:	9a05      	ldr	r2, [sp, #20]
 80049b0:	f803 ac01 	strb.w	sl, [r3, #-1]
 80049b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d029      	beq.n	8004a0e <_dtoa_r+0xa0e>
 80049ba:	9901      	ldr	r1, [sp, #4]
 80049bc:	2300      	movs	r3, #0
 80049be:	220a      	movs	r2, #10
 80049c0:	4648      	mov	r0, r9
 80049c2:	f000 f9d5 	bl	8004d70 <__multadd>
 80049c6:	45a8      	cmp	r8, r5
 80049c8:	9001      	str	r0, [sp, #4]
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	f04f 020a 	mov.w	r2, #10
 80049d2:	4641      	mov	r1, r8
 80049d4:	4648      	mov	r0, r9
 80049d6:	d107      	bne.n	80049e8 <_dtoa_r+0x9e8>
 80049d8:	f000 f9ca 	bl	8004d70 <__multadd>
 80049dc:	4680      	mov	r8, r0
 80049de:	4605      	mov	r5, r0
 80049e0:	9b05      	ldr	r3, [sp, #20]
 80049e2:	3301      	adds	r3, #1
 80049e4:	9305      	str	r3, [sp, #20]
 80049e6:	e775      	b.n	80048d4 <_dtoa_r+0x8d4>
 80049e8:	f000 f9c2 	bl	8004d70 <__multadd>
 80049ec:	4629      	mov	r1, r5
 80049ee:	4680      	mov	r8, r0
 80049f0:	2300      	movs	r3, #0
 80049f2:	220a      	movs	r2, #10
 80049f4:	4648      	mov	r0, r9
 80049f6:	f000 f9bb 	bl	8004d70 <__multadd>
 80049fa:	4605      	mov	r5, r0
 80049fc:	e7f0      	b.n	80049e0 <_dtoa_r+0x9e0>
 80049fe:	f1bb 0f00 	cmp.w	fp, #0
 8004a02:	bfcc      	ite	gt
 8004a04:	465e      	movgt	r6, fp
 8004a06:	2601      	movle	r6, #1
 8004a08:	443e      	add	r6, r7
 8004a0a:	f04f 0800 	mov.w	r8, #0
 8004a0e:	9901      	ldr	r1, [sp, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	4648      	mov	r0, r9
 8004a14:	f000 fb58 	bl	80050c8 <__lshift>
 8004a18:	4621      	mov	r1, r4
 8004a1a:	9001      	str	r0, [sp, #4]
 8004a1c:	f000 fbc0 	bl	80051a0 <__mcmp>
 8004a20:	2800      	cmp	r0, #0
 8004a22:	dcaf      	bgt.n	8004984 <_dtoa_r+0x984>
 8004a24:	d102      	bne.n	8004a2c <_dtoa_r+0xa2c>
 8004a26:	f01a 0f01 	tst.w	sl, #1
 8004a2a:	d1ab      	bne.n	8004984 <_dtoa_r+0x984>
 8004a2c:	4633      	mov	r3, r6
 8004a2e:	461e      	mov	r6, r3
 8004a30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a34:	2a30      	cmp	r2, #48	@ 0x30
 8004a36:	d0fa      	beq.n	8004a2e <_dtoa_r+0xa2e>
 8004a38:	e5bb      	b.n	80045b2 <_dtoa_r+0x5b2>
 8004a3a:	429f      	cmp	r7, r3
 8004a3c:	d1a3      	bne.n	8004986 <_dtoa_r+0x986>
 8004a3e:	9b04      	ldr	r3, [sp, #16]
 8004a40:	3301      	adds	r3, #1
 8004a42:	9304      	str	r3, [sp, #16]
 8004a44:	2331      	movs	r3, #49	@ 0x31
 8004a46:	703b      	strb	r3, [r7, #0]
 8004a48:	e5b3      	b.n	80045b2 <_dtoa_r+0x5b2>
 8004a4a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004a4c:	4f16      	ldr	r7, [pc, #88]	@ (8004aa8 <_dtoa_r+0xaa8>)
 8004a4e:	b11b      	cbz	r3, 8004a58 <_dtoa_r+0xa58>
 8004a50:	f107 0308 	add.w	r3, r7, #8
 8004a54:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	4638      	mov	r0, r7
 8004a5a:	b011      	add	sp, #68	@ 0x44
 8004a5c:	ecbd 8b02 	vpop	{d8}
 8004a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a64:	9b07      	ldr	r3, [sp, #28]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	f77f ae36 	ble.w	80046d8 <_dtoa_r+0x6d8>
 8004a6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a70:	2001      	movs	r0, #1
 8004a72:	e656      	b.n	8004722 <_dtoa_r+0x722>
 8004a74:	f1bb 0f00 	cmp.w	fp, #0
 8004a78:	f77f aed7 	ble.w	800482a <_dtoa_r+0x82a>
 8004a7c:	463e      	mov	r6, r7
 8004a7e:	9801      	ldr	r0, [sp, #4]
 8004a80:	4621      	mov	r1, r4
 8004a82:	f7ff fa34 	bl	8003eee <quorem>
 8004a86:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8004a8a:	f806 ab01 	strb.w	sl, [r6], #1
 8004a8e:	1bf2      	subs	r2, r6, r7
 8004a90:	4593      	cmp	fp, r2
 8004a92:	ddb4      	ble.n	80049fe <_dtoa_r+0x9fe>
 8004a94:	9901      	ldr	r1, [sp, #4]
 8004a96:	2300      	movs	r3, #0
 8004a98:	220a      	movs	r2, #10
 8004a9a:	4648      	mov	r0, r9
 8004a9c:	f000 f968 	bl	8004d70 <__multadd>
 8004aa0:	9001      	str	r0, [sp, #4]
 8004aa2:	e7ec      	b.n	8004a7e <_dtoa_r+0xa7e>
 8004aa4:	08006094 	.word	0x08006094
 8004aa8:	08006018 	.word	0x08006018

08004aac <_free_r>:
 8004aac:	b538      	push	{r3, r4, r5, lr}
 8004aae:	4605      	mov	r5, r0
 8004ab0:	2900      	cmp	r1, #0
 8004ab2:	d041      	beq.n	8004b38 <_free_r+0x8c>
 8004ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ab8:	1f0c      	subs	r4, r1, #4
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	bfb8      	it	lt
 8004abe:	18e4      	addlt	r4, r4, r3
 8004ac0:	f000 f8e8 	bl	8004c94 <__malloc_lock>
 8004ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b3c <_free_r+0x90>)
 8004ac6:	6813      	ldr	r3, [r2, #0]
 8004ac8:	b933      	cbnz	r3, 8004ad8 <_free_r+0x2c>
 8004aca:	6063      	str	r3, [r4, #4]
 8004acc:	6014      	str	r4, [r2, #0]
 8004ace:	4628      	mov	r0, r5
 8004ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ad4:	f000 b8e4 	b.w	8004ca0 <__malloc_unlock>
 8004ad8:	42a3      	cmp	r3, r4
 8004ada:	d908      	bls.n	8004aee <_free_r+0x42>
 8004adc:	6820      	ldr	r0, [r4, #0]
 8004ade:	1821      	adds	r1, r4, r0
 8004ae0:	428b      	cmp	r3, r1
 8004ae2:	bf01      	itttt	eq
 8004ae4:	6819      	ldreq	r1, [r3, #0]
 8004ae6:	685b      	ldreq	r3, [r3, #4]
 8004ae8:	1809      	addeq	r1, r1, r0
 8004aea:	6021      	streq	r1, [r4, #0]
 8004aec:	e7ed      	b.n	8004aca <_free_r+0x1e>
 8004aee:	461a      	mov	r2, r3
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	b10b      	cbz	r3, 8004af8 <_free_r+0x4c>
 8004af4:	42a3      	cmp	r3, r4
 8004af6:	d9fa      	bls.n	8004aee <_free_r+0x42>
 8004af8:	6811      	ldr	r1, [r2, #0]
 8004afa:	1850      	adds	r0, r2, r1
 8004afc:	42a0      	cmp	r0, r4
 8004afe:	d10b      	bne.n	8004b18 <_free_r+0x6c>
 8004b00:	6820      	ldr	r0, [r4, #0]
 8004b02:	4401      	add	r1, r0
 8004b04:	1850      	adds	r0, r2, r1
 8004b06:	4283      	cmp	r3, r0
 8004b08:	6011      	str	r1, [r2, #0]
 8004b0a:	d1e0      	bne.n	8004ace <_free_r+0x22>
 8004b0c:	6818      	ldr	r0, [r3, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	6053      	str	r3, [r2, #4]
 8004b12:	4408      	add	r0, r1
 8004b14:	6010      	str	r0, [r2, #0]
 8004b16:	e7da      	b.n	8004ace <_free_r+0x22>
 8004b18:	d902      	bls.n	8004b20 <_free_r+0x74>
 8004b1a:	230c      	movs	r3, #12
 8004b1c:	602b      	str	r3, [r5, #0]
 8004b1e:	e7d6      	b.n	8004ace <_free_r+0x22>
 8004b20:	6820      	ldr	r0, [r4, #0]
 8004b22:	1821      	adds	r1, r4, r0
 8004b24:	428b      	cmp	r3, r1
 8004b26:	bf04      	itt	eq
 8004b28:	6819      	ldreq	r1, [r3, #0]
 8004b2a:	685b      	ldreq	r3, [r3, #4]
 8004b2c:	6063      	str	r3, [r4, #4]
 8004b2e:	bf04      	itt	eq
 8004b30:	1809      	addeq	r1, r1, r0
 8004b32:	6021      	streq	r1, [r4, #0]
 8004b34:	6054      	str	r4, [r2, #4]
 8004b36:	e7ca      	b.n	8004ace <_free_r+0x22>
 8004b38:	bd38      	pop	{r3, r4, r5, pc}
 8004b3a:	bf00      	nop
 8004b3c:	200004a8 	.word	0x200004a8

08004b40 <malloc>:
 8004b40:	4b02      	ldr	r3, [pc, #8]	@ (8004b4c <malloc+0xc>)
 8004b42:	4601      	mov	r1, r0
 8004b44:	6818      	ldr	r0, [r3, #0]
 8004b46:	f000 b825 	b.w	8004b94 <_malloc_r>
 8004b4a:	bf00      	nop
 8004b4c:	20000018 	.word	0x20000018

08004b50 <sbrk_aligned>:
 8004b50:	b570      	push	{r4, r5, r6, lr}
 8004b52:	4e0f      	ldr	r6, [pc, #60]	@ (8004b90 <sbrk_aligned+0x40>)
 8004b54:	460c      	mov	r4, r1
 8004b56:	6831      	ldr	r1, [r6, #0]
 8004b58:	4605      	mov	r5, r0
 8004b5a:	b911      	cbnz	r1, 8004b62 <sbrk_aligned+0x12>
 8004b5c:	f000 fe46 	bl	80057ec <_sbrk_r>
 8004b60:	6030      	str	r0, [r6, #0]
 8004b62:	4621      	mov	r1, r4
 8004b64:	4628      	mov	r0, r5
 8004b66:	f000 fe41 	bl	80057ec <_sbrk_r>
 8004b6a:	1c43      	adds	r3, r0, #1
 8004b6c:	d103      	bne.n	8004b76 <sbrk_aligned+0x26>
 8004b6e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004b72:	4620      	mov	r0, r4
 8004b74:	bd70      	pop	{r4, r5, r6, pc}
 8004b76:	1cc4      	adds	r4, r0, #3
 8004b78:	f024 0403 	bic.w	r4, r4, #3
 8004b7c:	42a0      	cmp	r0, r4
 8004b7e:	d0f8      	beq.n	8004b72 <sbrk_aligned+0x22>
 8004b80:	1a21      	subs	r1, r4, r0
 8004b82:	4628      	mov	r0, r5
 8004b84:	f000 fe32 	bl	80057ec <_sbrk_r>
 8004b88:	3001      	adds	r0, #1
 8004b8a:	d1f2      	bne.n	8004b72 <sbrk_aligned+0x22>
 8004b8c:	e7ef      	b.n	8004b6e <sbrk_aligned+0x1e>
 8004b8e:	bf00      	nop
 8004b90:	200004a4 	.word	0x200004a4

08004b94 <_malloc_r>:
 8004b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b98:	1ccd      	adds	r5, r1, #3
 8004b9a:	f025 0503 	bic.w	r5, r5, #3
 8004b9e:	3508      	adds	r5, #8
 8004ba0:	2d0c      	cmp	r5, #12
 8004ba2:	bf38      	it	cc
 8004ba4:	250c      	movcc	r5, #12
 8004ba6:	2d00      	cmp	r5, #0
 8004ba8:	4606      	mov	r6, r0
 8004baa:	db01      	blt.n	8004bb0 <_malloc_r+0x1c>
 8004bac:	42a9      	cmp	r1, r5
 8004bae:	d904      	bls.n	8004bba <_malloc_r+0x26>
 8004bb0:	230c      	movs	r3, #12
 8004bb2:	6033      	str	r3, [r6, #0]
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c90 <_malloc_r+0xfc>
 8004bbe:	f000 f869 	bl	8004c94 <__malloc_lock>
 8004bc2:	f8d8 3000 	ldr.w	r3, [r8]
 8004bc6:	461c      	mov	r4, r3
 8004bc8:	bb44      	cbnz	r4, 8004c1c <_malloc_r+0x88>
 8004bca:	4629      	mov	r1, r5
 8004bcc:	4630      	mov	r0, r6
 8004bce:	f7ff ffbf 	bl	8004b50 <sbrk_aligned>
 8004bd2:	1c43      	adds	r3, r0, #1
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	d158      	bne.n	8004c8a <_malloc_r+0xf6>
 8004bd8:	f8d8 4000 	ldr.w	r4, [r8]
 8004bdc:	4627      	mov	r7, r4
 8004bde:	2f00      	cmp	r7, #0
 8004be0:	d143      	bne.n	8004c6a <_malloc_r+0xd6>
 8004be2:	2c00      	cmp	r4, #0
 8004be4:	d04b      	beq.n	8004c7e <_malloc_r+0xea>
 8004be6:	6823      	ldr	r3, [r4, #0]
 8004be8:	4639      	mov	r1, r7
 8004bea:	4630      	mov	r0, r6
 8004bec:	eb04 0903 	add.w	r9, r4, r3
 8004bf0:	f000 fdfc 	bl	80057ec <_sbrk_r>
 8004bf4:	4581      	cmp	r9, r0
 8004bf6:	d142      	bne.n	8004c7e <_malloc_r+0xea>
 8004bf8:	6821      	ldr	r1, [r4, #0]
 8004bfa:	1a6d      	subs	r5, r5, r1
 8004bfc:	4629      	mov	r1, r5
 8004bfe:	4630      	mov	r0, r6
 8004c00:	f7ff ffa6 	bl	8004b50 <sbrk_aligned>
 8004c04:	3001      	adds	r0, #1
 8004c06:	d03a      	beq.n	8004c7e <_malloc_r+0xea>
 8004c08:	6823      	ldr	r3, [r4, #0]
 8004c0a:	442b      	add	r3, r5
 8004c0c:	6023      	str	r3, [r4, #0]
 8004c0e:	f8d8 3000 	ldr.w	r3, [r8]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	bb62      	cbnz	r2, 8004c70 <_malloc_r+0xdc>
 8004c16:	f8c8 7000 	str.w	r7, [r8]
 8004c1a:	e00f      	b.n	8004c3c <_malloc_r+0xa8>
 8004c1c:	6822      	ldr	r2, [r4, #0]
 8004c1e:	1b52      	subs	r2, r2, r5
 8004c20:	d420      	bmi.n	8004c64 <_malloc_r+0xd0>
 8004c22:	2a0b      	cmp	r2, #11
 8004c24:	d917      	bls.n	8004c56 <_malloc_r+0xc2>
 8004c26:	1961      	adds	r1, r4, r5
 8004c28:	42a3      	cmp	r3, r4
 8004c2a:	6025      	str	r5, [r4, #0]
 8004c2c:	bf18      	it	ne
 8004c2e:	6059      	strne	r1, [r3, #4]
 8004c30:	6863      	ldr	r3, [r4, #4]
 8004c32:	bf08      	it	eq
 8004c34:	f8c8 1000 	streq.w	r1, [r8]
 8004c38:	5162      	str	r2, [r4, r5]
 8004c3a:	604b      	str	r3, [r1, #4]
 8004c3c:	4630      	mov	r0, r6
 8004c3e:	f000 f82f 	bl	8004ca0 <__malloc_unlock>
 8004c42:	f104 000b 	add.w	r0, r4, #11
 8004c46:	1d23      	adds	r3, r4, #4
 8004c48:	f020 0007 	bic.w	r0, r0, #7
 8004c4c:	1ac2      	subs	r2, r0, r3
 8004c4e:	bf1c      	itt	ne
 8004c50:	1a1b      	subne	r3, r3, r0
 8004c52:	50a3      	strne	r3, [r4, r2]
 8004c54:	e7af      	b.n	8004bb6 <_malloc_r+0x22>
 8004c56:	6862      	ldr	r2, [r4, #4]
 8004c58:	42a3      	cmp	r3, r4
 8004c5a:	bf0c      	ite	eq
 8004c5c:	f8c8 2000 	streq.w	r2, [r8]
 8004c60:	605a      	strne	r2, [r3, #4]
 8004c62:	e7eb      	b.n	8004c3c <_malloc_r+0xa8>
 8004c64:	4623      	mov	r3, r4
 8004c66:	6864      	ldr	r4, [r4, #4]
 8004c68:	e7ae      	b.n	8004bc8 <_malloc_r+0x34>
 8004c6a:	463c      	mov	r4, r7
 8004c6c:	687f      	ldr	r7, [r7, #4]
 8004c6e:	e7b6      	b.n	8004bde <_malloc_r+0x4a>
 8004c70:	461a      	mov	r2, r3
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	42a3      	cmp	r3, r4
 8004c76:	d1fb      	bne.n	8004c70 <_malloc_r+0xdc>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	6053      	str	r3, [r2, #4]
 8004c7c:	e7de      	b.n	8004c3c <_malloc_r+0xa8>
 8004c7e:	230c      	movs	r3, #12
 8004c80:	6033      	str	r3, [r6, #0]
 8004c82:	4630      	mov	r0, r6
 8004c84:	f000 f80c 	bl	8004ca0 <__malloc_unlock>
 8004c88:	e794      	b.n	8004bb4 <_malloc_r+0x20>
 8004c8a:	6005      	str	r5, [r0, #0]
 8004c8c:	e7d6      	b.n	8004c3c <_malloc_r+0xa8>
 8004c8e:	bf00      	nop
 8004c90:	200004a8 	.word	0x200004a8

08004c94 <__malloc_lock>:
 8004c94:	4801      	ldr	r0, [pc, #4]	@ (8004c9c <__malloc_lock+0x8>)
 8004c96:	f7ff b928 	b.w	8003eea <__retarget_lock_acquire_recursive>
 8004c9a:	bf00      	nop
 8004c9c:	200004a0 	.word	0x200004a0

08004ca0 <__malloc_unlock>:
 8004ca0:	4801      	ldr	r0, [pc, #4]	@ (8004ca8 <__malloc_unlock+0x8>)
 8004ca2:	f7ff b923 	b.w	8003eec <__retarget_lock_release_recursive>
 8004ca6:	bf00      	nop
 8004ca8:	200004a0 	.word	0x200004a0

08004cac <_Balloc>:
 8004cac:	b570      	push	{r4, r5, r6, lr}
 8004cae:	69c6      	ldr	r6, [r0, #28]
 8004cb0:	4604      	mov	r4, r0
 8004cb2:	460d      	mov	r5, r1
 8004cb4:	b976      	cbnz	r6, 8004cd4 <_Balloc+0x28>
 8004cb6:	2010      	movs	r0, #16
 8004cb8:	f7ff ff42 	bl	8004b40 <malloc>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	61e0      	str	r0, [r4, #28]
 8004cc0:	b920      	cbnz	r0, 8004ccc <_Balloc+0x20>
 8004cc2:	4b18      	ldr	r3, [pc, #96]	@ (8004d24 <_Balloc+0x78>)
 8004cc4:	4818      	ldr	r0, [pc, #96]	@ (8004d28 <_Balloc+0x7c>)
 8004cc6:	216b      	movs	r1, #107	@ 0x6b
 8004cc8:	f000 fdae 	bl	8005828 <__assert_func>
 8004ccc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004cd0:	6006      	str	r6, [r0, #0]
 8004cd2:	60c6      	str	r6, [r0, #12]
 8004cd4:	69e6      	ldr	r6, [r4, #28]
 8004cd6:	68f3      	ldr	r3, [r6, #12]
 8004cd8:	b183      	cbz	r3, 8004cfc <_Balloc+0x50>
 8004cda:	69e3      	ldr	r3, [r4, #28]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004ce2:	b9b8      	cbnz	r0, 8004d14 <_Balloc+0x68>
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	fa01 f605 	lsl.w	r6, r1, r5
 8004cea:	1d72      	adds	r2, r6, #5
 8004cec:	0092      	lsls	r2, r2, #2
 8004cee:	4620      	mov	r0, r4
 8004cf0:	f000 fdb8 	bl	8005864 <_calloc_r>
 8004cf4:	b160      	cbz	r0, 8004d10 <_Balloc+0x64>
 8004cf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004cfa:	e00e      	b.n	8004d1a <_Balloc+0x6e>
 8004cfc:	2221      	movs	r2, #33	@ 0x21
 8004cfe:	2104      	movs	r1, #4
 8004d00:	4620      	mov	r0, r4
 8004d02:	f000 fdaf 	bl	8005864 <_calloc_r>
 8004d06:	69e3      	ldr	r3, [r4, #28]
 8004d08:	60f0      	str	r0, [r6, #12]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1e4      	bne.n	8004cda <_Balloc+0x2e>
 8004d10:	2000      	movs	r0, #0
 8004d12:	bd70      	pop	{r4, r5, r6, pc}
 8004d14:	6802      	ldr	r2, [r0, #0]
 8004d16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004d20:	e7f7      	b.n	8004d12 <_Balloc+0x66>
 8004d22:	bf00      	nop
 8004d24:	08006025 	.word	0x08006025
 8004d28:	080060a5 	.word	0x080060a5

08004d2c <_Bfree>:
 8004d2c:	b570      	push	{r4, r5, r6, lr}
 8004d2e:	69c6      	ldr	r6, [r0, #28]
 8004d30:	4605      	mov	r5, r0
 8004d32:	460c      	mov	r4, r1
 8004d34:	b976      	cbnz	r6, 8004d54 <_Bfree+0x28>
 8004d36:	2010      	movs	r0, #16
 8004d38:	f7ff ff02 	bl	8004b40 <malloc>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	61e8      	str	r0, [r5, #28]
 8004d40:	b920      	cbnz	r0, 8004d4c <_Bfree+0x20>
 8004d42:	4b09      	ldr	r3, [pc, #36]	@ (8004d68 <_Bfree+0x3c>)
 8004d44:	4809      	ldr	r0, [pc, #36]	@ (8004d6c <_Bfree+0x40>)
 8004d46:	218f      	movs	r1, #143	@ 0x8f
 8004d48:	f000 fd6e 	bl	8005828 <__assert_func>
 8004d4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d50:	6006      	str	r6, [r0, #0]
 8004d52:	60c6      	str	r6, [r0, #12]
 8004d54:	b13c      	cbz	r4, 8004d66 <_Bfree+0x3a>
 8004d56:	69eb      	ldr	r3, [r5, #28]
 8004d58:	6862      	ldr	r2, [r4, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d60:	6021      	str	r1, [r4, #0]
 8004d62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004d66:	bd70      	pop	{r4, r5, r6, pc}
 8004d68:	08006025 	.word	0x08006025
 8004d6c:	080060a5 	.word	0x080060a5

08004d70 <__multadd>:
 8004d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d74:	690d      	ldr	r5, [r1, #16]
 8004d76:	4607      	mov	r7, r0
 8004d78:	460c      	mov	r4, r1
 8004d7a:	461e      	mov	r6, r3
 8004d7c:	f101 0c14 	add.w	ip, r1, #20
 8004d80:	2000      	movs	r0, #0
 8004d82:	f8dc 3000 	ldr.w	r3, [ip]
 8004d86:	b299      	uxth	r1, r3
 8004d88:	fb02 6101 	mla	r1, r2, r1, r6
 8004d8c:	0c1e      	lsrs	r6, r3, #16
 8004d8e:	0c0b      	lsrs	r3, r1, #16
 8004d90:	fb02 3306 	mla	r3, r2, r6, r3
 8004d94:	b289      	uxth	r1, r1
 8004d96:	3001      	adds	r0, #1
 8004d98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004d9c:	4285      	cmp	r5, r0
 8004d9e:	f84c 1b04 	str.w	r1, [ip], #4
 8004da2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004da6:	dcec      	bgt.n	8004d82 <__multadd+0x12>
 8004da8:	b30e      	cbz	r6, 8004dee <__multadd+0x7e>
 8004daa:	68a3      	ldr	r3, [r4, #8]
 8004dac:	42ab      	cmp	r3, r5
 8004dae:	dc19      	bgt.n	8004de4 <__multadd+0x74>
 8004db0:	6861      	ldr	r1, [r4, #4]
 8004db2:	4638      	mov	r0, r7
 8004db4:	3101      	adds	r1, #1
 8004db6:	f7ff ff79 	bl	8004cac <_Balloc>
 8004dba:	4680      	mov	r8, r0
 8004dbc:	b928      	cbnz	r0, 8004dca <__multadd+0x5a>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8004df4 <__multadd+0x84>)
 8004dc2:	480d      	ldr	r0, [pc, #52]	@ (8004df8 <__multadd+0x88>)
 8004dc4:	21ba      	movs	r1, #186	@ 0xba
 8004dc6:	f000 fd2f 	bl	8005828 <__assert_func>
 8004dca:	6922      	ldr	r2, [r4, #16]
 8004dcc:	3202      	adds	r2, #2
 8004dce:	f104 010c 	add.w	r1, r4, #12
 8004dd2:	0092      	lsls	r2, r2, #2
 8004dd4:	300c      	adds	r0, #12
 8004dd6:	f000 fd19 	bl	800580c <memcpy>
 8004dda:	4621      	mov	r1, r4
 8004ddc:	4638      	mov	r0, r7
 8004dde:	f7ff ffa5 	bl	8004d2c <_Bfree>
 8004de2:	4644      	mov	r4, r8
 8004de4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004de8:	3501      	adds	r5, #1
 8004dea:	615e      	str	r6, [r3, #20]
 8004dec:	6125      	str	r5, [r4, #16]
 8004dee:	4620      	mov	r0, r4
 8004df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004df4:	08006094 	.word	0x08006094
 8004df8:	080060a5 	.word	0x080060a5

08004dfc <__hi0bits>:
 8004dfc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004e00:	4603      	mov	r3, r0
 8004e02:	bf36      	itet	cc
 8004e04:	0403      	lslcc	r3, r0, #16
 8004e06:	2000      	movcs	r0, #0
 8004e08:	2010      	movcc	r0, #16
 8004e0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e0e:	bf3c      	itt	cc
 8004e10:	021b      	lslcc	r3, r3, #8
 8004e12:	3008      	addcc	r0, #8
 8004e14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e18:	bf3c      	itt	cc
 8004e1a:	011b      	lslcc	r3, r3, #4
 8004e1c:	3004      	addcc	r0, #4
 8004e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e22:	bf3c      	itt	cc
 8004e24:	009b      	lslcc	r3, r3, #2
 8004e26:	3002      	addcc	r0, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	db05      	blt.n	8004e38 <__hi0bits+0x3c>
 8004e2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004e30:	f100 0001 	add.w	r0, r0, #1
 8004e34:	bf08      	it	eq
 8004e36:	2020      	moveq	r0, #32
 8004e38:	4770      	bx	lr

08004e3a <__lo0bits>:
 8004e3a:	6803      	ldr	r3, [r0, #0]
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	f013 0007 	ands.w	r0, r3, #7
 8004e42:	d00b      	beq.n	8004e5c <__lo0bits+0x22>
 8004e44:	07d9      	lsls	r1, r3, #31
 8004e46:	d421      	bmi.n	8004e8c <__lo0bits+0x52>
 8004e48:	0798      	lsls	r0, r3, #30
 8004e4a:	bf49      	itett	mi
 8004e4c:	085b      	lsrmi	r3, r3, #1
 8004e4e:	089b      	lsrpl	r3, r3, #2
 8004e50:	2001      	movmi	r0, #1
 8004e52:	6013      	strmi	r3, [r2, #0]
 8004e54:	bf5c      	itt	pl
 8004e56:	6013      	strpl	r3, [r2, #0]
 8004e58:	2002      	movpl	r0, #2
 8004e5a:	4770      	bx	lr
 8004e5c:	b299      	uxth	r1, r3
 8004e5e:	b909      	cbnz	r1, 8004e64 <__lo0bits+0x2a>
 8004e60:	0c1b      	lsrs	r3, r3, #16
 8004e62:	2010      	movs	r0, #16
 8004e64:	b2d9      	uxtb	r1, r3
 8004e66:	b909      	cbnz	r1, 8004e6c <__lo0bits+0x32>
 8004e68:	3008      	adds	r0, #8
 8004e6a:	0a1b      	lsrs	r3, r3, #8
 8004e6c:	0719      	lsls	r1, r3, #28
 8004e6e:	bf04      	itt	eq
 8004e70:	091b      	lsreq	r3, r3, #4
 8004e72:	3004      	addeq	r0, #4
 8004e74:	0799      	lsls	r1, r3, #30
 8004e76:	bf04      	itt	eq
 8004e78:	089b      	lsreq	r3, r3, #2
 8004e7a:	3002      	addeq	r0, #2
 8004e7c:	07d9      	lsls	r1, r3, #31
 8004e7e:	d403      	bmi.n	8004e88 <__lo0bits+0x4e>
 8004e80:	085b      	lsrs	r3, r3, #1
 8004e82:	f100 0001 	add.w	r0, r0, #1
 8004e86:	d003      	beq.n	8004e90 <__lo0bits+0x56>
 8004e88:	6013      	str	r3, [r2, #0]
 8004e8a:	4770      	bx	lr
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	4770      	bx	lr
 8004e90:	2020      	movs	r0, #32
 8004e92:	4770      	bx	lr

08004e94 <__i2b>:
 8004e94:	b510      	push	{r4, lr}
 8004e96:	460c      	mov	r4, r1
 8004e98:	2101      	movs	r1, #1
 8004e9a:	f7ff ff07 	bl	8004cac <_Balloc>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	b928      	cbnz	r0, 8004eae <__i2b+0x1a>
 8004ea2:	4b05      	ldr	r3, [pc, #20]	@ (8004eb8 <__i2b+0x24>)
 8004ea4:	4805      	ldr	r0, [pc, #20]	@ (8004ebc <__i2b+0x28>)
 8004ea6:	f240 1145 	movw	r1, #325	@ 0x145
 8004eaa:	f000 fcbd 	bl	8005828 <__assert_func>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	6144      	str	r4, [r0, #20]
 8004eb2:	6103      	str	r3, [r0, #16]
 8004eb4:	bd10      	pop	{r4, pc}
 8004eb6:	bf00      	nop
 8004eb8:	08006094 	.word	0x08006094
 8004ebc:	080060a5 	.word	0x080060a5

08004ec0 <__multiply>:
 8004ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec4:	4614      	mov	r4, r2
 8004ec6:	690a      	ldr	r2, [r1, #16]
 8004ec8:	6923      	ldr	r3, [r4, #16]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	bfa8      	it	ge
 8004ece:	4623      	movge	r3, r4
 8004ed0:	460f      	mov	r7, r1
 8004ed2:	bfa4      	itt	ge
 8004ed4:	460c      	movge	r4, r1
 8004ed6:	461f      	movge	r7, r3
 8004ed8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004edc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004ee0:	68a3      	ldr	r3, [r4, #8]
 8004ee2:	6861      	ldr	r1, [r4, #4]
 8004ee4:	eb0a 0609 	add.w	r6, sl, r9
 8004ee8:	42b3      	cmp	r3, r6
 8004eea:	b085      	sub	sp, #20
 8004eec:	bfb8      	it	lt
 8004eee:	3101      	addlt	r1, #1
 8004ef0:	f7ff fedc 	bl	8004cac <_Balloc>
 8004ef4:	b930      	cbnz	r0, 8004f04 <__multiply+0x44>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	4b44      	ldr	r3, [pc, #272]	@ (800500c <__multiply+0x14c>)
 8004efa:	4845      	ldr	r0, [pc, #276]	@ (8005010 <__multiply+0x150>)
 8004efc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004f00:	f000 fc92 	bl	8005828 <__assert_func>
 8004f04:	f100 0514 	add.w	r5, r0, #20
 8004f08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004f0c:	462b      	mov	r3, r5
 8004f0e:	2200      	movs	r2, #0
 8004f10:	4543      	cmp	r3, r8
 8004f12:	d321      	bcc.n	8004f58 <__multiply+0x98>
 8004f14:	f107 0114 	add.w	r1, r7, #20
 8004f18:	f104 0214 	add.w	r2, r4, #20
 8004f1c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004f20:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004f24:	9302      	str	r3, [sp, #8]
 8004f26:	1b13      	subs	r3, r2, r4
 8004f28:	3b15      	subs	r3, #21
 8004f2a:	f023 0303 	bic.w	r3, r3, #3
 8004f2e:	3304      	adds	r3, #4
 8004f30:	f104 0715 	add.w	r7, r4, #21
 8004f34:	42ba      	cmp	r2, r7
 8004f36:	bf38      	it	cc
 8004f38:	2304      	movcc	r3, #4
 8004f3a:	9301      	str	r3, [sp, #4]
 8004f3c:	9b02      	ldr	r3, [sp, #8]
 8004f3e:	9103      	str	r1, [sp, #12]
 8004f40:	428b      	cmp	r3, r1
 8004f42:	d80c      	bhi.n	8004f5e <__multiply+0x9e>
 8004f44:	2e00      	cmp	r6, #0
 8004f46:	dd03      	ble.n	8004f50 <__multiply+0x90>
 8004f48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d05b      	beq.n	8005008 <__multiply+0x148>
 8004f50:	6106      	str	r6, [r0, #16]
 8004f52:	b005      	add	sp, #20
 8004f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f58:	f843 2b04 	str.w	r2, [r3], #4
 8004f5c:	e7d8      	b.n	8004f10 <__multiply+0x50>
 8004f5e:	f8b1 a000 	ldrh.w	sl, [r1]
 8004f62:	f1ba 0f00 	cmp.w	sl, #0
 8004f66:	d024      	beq.n	8004fb2 <__multiply+0xf2>
 8004f68:	f104 0e14 	add.w	lr, r4, #20
 8004f6c:	46a9      	mov	r9, r5
 8004f6e:	f04f 0c00 	mov.w	ip, #0
 8004f72:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004f76:	f8d9 3000 	ldr.w	r3, [r9]
 8004f7a:	fa1f fb87 	uxth.w	fp, r7
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	fb0a 330b 	mla	r3, sl, fp, r3
 8004f84:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8004f88:	f8d9 7000 	ldr.w	r7, [r9]
 8004f8c:	4463      	add	r3, ip
 8004f8e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004f92:	fb0a c70b 	mla	r7, sl, fp, ip
 8004f96:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004fa0:	4572      	cmp	r2, lr
 8004fa2:	f849 3b04 	str.w	r3, [r9], #4
 8004fa6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004faa:	d8e2      	bhi.n	8004f72 <__multiply+0xb2>
 8004fac:	9b01      	ldr	r3, [sp, #4]
 8004fae:	f845 c003 	str.w	ip, [r5, r3]
 8004fb2:	9b03      	ldr	r3, [sp, #12]
 8004fb4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004fb8:	3104      	adds	r1, #4
 8004fba:	f1b9 0f00 	cmp.w	r9, #0
 8004fbe:	d021      	beq.n	8005004 <__multiply+0x144>
 8004fc0:	682b      	ldr	r3, [r5, #0]
 8004fc2:	f104 0c14 	add.w	ip, r4, #20
 8004fc6:	46ae      	mov	lr, r5
 8004fc8:	f04f 0a00 	mov.w	sl, #0
 8004fcc:	f8bc b000 	ldrh.w	fp, [ip]
 8004fd0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004fd4:	fb09 770b 	mla	r7, r9, fp, r7
 8004fd8:	4457      	add	r7, sl
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004fe0:	f84e 3b04 	str.w	r3, [lr], #4
 8004fe4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004fe8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004fec:	f8be 3000 	ldrh.w	r3, [lr]
 8004ff0:	fb09 330a 	mla	r3, r9, sl, r3
 8004ff4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004ff8:	4562      	cmp	r2, ip
 8004ffa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004ffe:	d8e5      	bhi.n	8004fcc <__multiply+0x10c>
 8005000:	9f01      	ldr	r7, [sp, #4]
 8005002:	51eb      	str	r3, [r5, r7]
 8005004:	3504      	adds	r5, #4
 8005006:	e799      	b.n	8004f3c <__multiply+0x7c>
 8005008:	3e01      	subs	r6, #1
 800500a:	e79b      	b.n	8004f44 <__multiply+0x84>
 800500c:	08006094 	.word	0x08006094
 8005010:	080060a5 	.word	0x080060a5

08005014 <__pow5mult>:
 8005014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005018:	4615      	mov	r5, r2
 800501a:	f012 0203 	ands.w	r2, r2, #3
 800501e:	4607      	mov	r7, r0
 8005020:	460e      	mov	r6, r1
 8005022:	d007      	beq.n	8005034 <__pow5mult+0x20>
 8005024:	4c25      	ldr	r4, [pc, #148]	@ (80050bc <__pow5mult+0xa8>)
 8005026:	3a01      	subs	r2, #1
 8005028:	2300      	movs	r3, #0
 800502a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800502e:	f7ff fe9f 	bl	8004d70 <__multadd>
 8005032:	4606      	mov	r6, r0
 8005034:	10ad      	asrs	r5, r5, #2
 8005036:	d03d      	beq.n	80050b4 <__pow5mult+0xa0>
 8005038:	69fc      	ldr	r4, [r7, #28]
 800503a:	b97c      	cbnz	r4, 800505c <__pow5mult+0x48>
 800503c:	2010      	movs	r0, #16
 800503e:	f7ff fd7f 	bl	8004b40 <malloc>
 8005042:	4602      	mov	r2, r0
 8005044:	61f8      	str	r0, [r7, #28]
 8005046:	b928      	cbnz	r0, 8005054 <__pow5mult+0x40>
 8005048:	4b1d      	ldr	r3, [pc, #116]	@ (80050c0 <__pow5mult+0xac>)
 800504a:	481e      	ldr	r0, [pc, #120]	@ (80050c4 <__pow5mult+0xb0>)
 800504c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005050:	f000 fbea 	bl	8005828 <__assert_func>
 8005054:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005058:	6004      	str	r4, [r0, #0]
 800505a:	60c4      	str	r4, [r0, #12]
 800505c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005060:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005064:	b94c      	cbnz	r4, 800507a <__pow5mult+0x66>
 8005066:	f240 2171 	movw	r1, #625	@ 0x271
 800506a:	4638      	mov	r0, r7
 800506c:	f7ff ff12 	bl	8004e94 <__i2b>
 8005070:	2300      	movs	r3, #0
 8005072:	f8c8 0008 	str.w	r0, [r8, #8]
 8005076:	4604      	mov	r4, r0
 8005078:	6003      	str	r3, [r0, #0]
 800507a:	f04f 0900 	mov.w	r9, #0
 800507e:	07eb      	lsls	r3, r5, #31
 8005080:	d50a      	bpl.n	8005098 <__pow5mult+0x84>
 8005082:	4631      	mov	r1, r6
 8005084:	4622      	mov	r2, r4
 8005086:	4638      	mov	r0, r7
 8005088:	f7ff ff1a 	bl	8004ec0 <__multiply>
 800508c:	4631      	mov	r1, r6
 800508e:	4680      	mov	r8, r0
 8005090:	4638      	mov	r0, r7
 8005092:	f7ff fe4b 	bl	8004d2c <_Bfree>
 8005096:	4646      	mov	r6, r8
 8005098:	106d      	asrs	r5, r5, #1
 800509a:	d00b      	beq.n	80050b4 <__pow5mult+0xa0>
 800509c:	6820      	ldr	r0, [r4, #0]
 800509e:	b938      	cbnz	r0, 80050b0 <__pow5mult+0x9c>
 80050a0:	4622      	mov	r2, r4
 80050a2:	4621      	mov	r1, r4
 80050a4:	4638      	mov	r0, r7
 80050a6:	f7ff ff0b 	bl	8004ec0 <__multiply>
 80050aa:	6020      	str	r0, [r4, #0]
 80050ac:	f8c0 9000 	str.w	r9, [r0]
 80050b0:	4604      	mov	r4, r0
 80050b2:	e7e4      	b.n	800507e <__pow5mult+0x6a>
 80050b4:	4630      	mov	r0, r6
 80050b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050ba:	bf00      	nop
 80050bc:	08006100 	.word	0x08006100
 80050c0:	08006025 	.word	0x08006025
 80050c4:	080060a5 	.word	0x080060a5

080050c8 <__lshift>:
 80050c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050cc:	460c      	mov	r4, r1
 80050ce:	6849      	ldr	r1, [r1, #4]
 80050d0:	6923      	ldr	r3, [r4, #16]
 80050d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80050d6:	68a3      	ldr	r3, [r4, #8]
 80050d8:	4607      	mov	r7, r0
 80050da:	4691      	mov	r9, r2
 80050dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80050e0:	f108 0601 	add.w	r6, r8, #1
 80050e4:	42b3      	cmp	r3, r6
 80050e6:	db0b      	blt.n	8005100 <__lshift+0x38>
 80050e8:	4638      	mov	r0, r7
 80050ea:	f7ff fddf 	bl	8004cac <_Balloc>
 80050ee:	4605      	mov	r5, r0
 80050f0:	b948      	cbnz	r0, 8005106 <__lshift+0x3e>
 80050f2:	4602      	mov	r2, r0
 80050f4:	4b28      	ldr	r3, [pc, #160]	@ (8005198 <__lshift+0xd0>)
 80050f6:	4829      	ldr	r0, [pc, #164]	@ (800519c <__lshift+0xd4>)
 80050f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80050fc:	f000 fb94 	bl	8005828 <__assert_func>
 8005100:	3101      	adds	r1, #1
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	e7ee      	b.n	80050e4 <__lshift+0x1c>
 8005106:	2300      	movs	r3, #0
 8005108:	f100 0114 	add.w	r1, r0, #20
 800510c:	f100 0210 	add.w	r2, r0, #16
 8005110:	4618      	mov	r0, r3
 8005112:	4553      	cmp	r3, sl
 8005114:	db33      	blt.n	800517e <__lshift+0xb6>
 8005116:	6920      	ldr	r0, [r4, #16]
 8005118:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800511c:	f104 0314 	add.w	r3, r4, #20
 8005120:	f019 091f 	ands.w	r9, r9, #31
 8005124:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005128:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800512c:	d02b      	beq.n	8005186 <__lshift+0xbe>
 800512e:	f1c9 0e20 	rsb	lr, r9, #32
 8005132:	468a      	mov	sl, r1
 8005134:	2200      	movs	r2, #0
 8005136:	6818      	ldr	r0, [r3, #0]
 8005138:	fa00 f009 	lsl.w	r0, r0, r9
 800513c:	4310      	orrs	r0, r2
 800513e:	f84a 0b04 	str.w	r0, [sl], #4
 8005142:	f853 2b04 	ldr.w	r2, [r3], #4
 8005146:	459c      	cmp	ip, r3
 8005148:	fa22 f20e 	lsr.w	r2, r2, lr
 800514c:	d8f3      	bhi.n	8005136 <__lshift+0x6e>
 800514e:	ebac 0304 	sub.w	r3, ip, r4
 8005152:	3b15      	subs	r3, #21
 8005154:	f023 0303 	bic.w	r3, r3, #3
 8005158:	3304      	adds	r3, #4
 800515a:	f104 0015 	add.w	r0, r4, #21
 800515e:	4584      	cmp	ip, r0
 8005160:	bf38      	it	cc
 8005162:	2304      	movcc	r3, #4
 8005164:	50ca      	str	r2, [r1, r3]
 8005166:	b10a      	cbz	r2, 800516c <__lshift+0xa4>
 8005168:	f108 0602 	add.w	r6, r8, #2
 800516c:	3e01      	subs	r6, #1
 800516e:	4638      	mov	r0, r7
 8005170:	612e      	str	r6, [r5, #16]
 8005172:	4621      	mov	r1, r4
 8005174:	f7ff fdda 	bl	8004d2c <_Bfree>
 8005178:	4628      	mov	r0, r5
 800517a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800517e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005182:	3301      	adds	r3, #1
 8005184:	e7c5      	b.n	8005112 <__lshift+0x4a>
 8005186:	3904      	subs	r1, #4
 8005188:	f853 2b04 	ldr.w	r2, [r3], #4
 800518c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005190:	459c      	cmp	ip, r3
 8005192:	d8f9      	bhi.n	8005188 <__lshift+0xc0>
 8005194:	e7ea      	b.n	800516c <__lshift+0xa4>
 8005196:	bf00      	nop
 8005198:	08006094 	.word	0x08006094
 800519c:	080060a5 	.word	0x080060a5

080051a0 <__mcmp>:
 80051a0:	690a      	ldr	r2, [r1, #16]
 80051a2:	4603      	mov	r3, r0
 80051a4:	6900      	ldr	r0, [r0, #16]
 80051a6:	1a80      	subs	r0, r0, r2
 80051a8:	b530      	push	{r4, r5, lr}
 80051aa:	d10e      	bne.n	80051ca <__mcmp+0x2a>
 80051ac:	3314      	adds	r3, #20
 80051ae:	3114      	adds	r1, #20
 80051b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80051b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80051b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80051bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80051c0:	4295      	cmp	r5, r2
 80051c2:	d003      	beq.n	80051cc <__mcmp+0x2c>
 80051c4:	d205      	bcs.n	80051d2 <__mcmp+0x32>
 80051c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051ca:	bd30      	pop	{r4, r5, pc}
 80051cc:	42a3      	cmp	r3, r4
 80051ce:	d3f3      	bcc.n	80051b8 <__mcmp+0x18>
 80051d0:	e7fb      	b.n	80051ca <__mcmp+0x2a>
 80051d2:	2001      	movs	r0, #1
 80051d4:	e7f9      	b.n	80051ca <__mcmp+0x2a>
	...

080051d8 <__mdiff>:
 80051d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051dc:	4689      	mov	r9, r1
 80051de:	4606      	mov	r6, r0
 80051e0:	4611      	mov	r1, r2
 80051e2:	4648      	mov	r0, r9
 80051e4:	4614      	mov	r4, r2
 80051e6:	f7ff ffdb 	bl	80051a0 <__mcmp>
 80051ea:	1e05      	subs	r5, r0, #0
 80051ec:	d112      	bne.n	8005214 <__mdiff+0x3c>
 80051ee:	4629      	mov	r1, r5
 80051f0:	4630      	mov	r0, r6
 80051f2:	f7ff fd5b 	bl	8004cac <_Balloc>
 80051f6:	4602      	mov	r2, r0
 80051f8:	b928      	cbnz	r0, 8005206 <__mdiff+0x2e>
 80051fa:	4b3f      	ldr	r3, [pc, #252]	@ (80052f8 <__mdiff+0x120>)
 80051fc:	f240 2137 	movw	r1, #567	@ 0x237
 8005200:	483e      	ldr	r0, [pc, #248]	@ (80052fc <__mdiff+0x124>)
 8005202:	f000 fb11 	bl	8005828 <__assert_func>
 8005206:	2301      	movs	r3, #1
 8005208:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800520c:	4610      	mov	r0, r2
 800520e:	b003      	add	sp, #12
 8005210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005214:	bfbc      	itt	lt
 8005216:	464b      	movlt	r3, r9
 8005218:	46a1      	movlt	r9, r4
 800521a:	4630      	mov	r0, r6
 800521c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005220:	bfba      	itte	lt
 8005222:	461c      	movlt	r4, r3
 8005224:	2501      	movlt	r5, #1
 8005226:	2500      	movge	r5, #0
 8005228:	f7ff fd40 	bl	8004cac <_Balloc>
 800522c:	4602      	mov	r2, r0
 800522e:	b918      	cbnz	r0, 8005238 <__mdiff+0x60>
 8005230:	4b31      	ldr	r3, [pc, #196]	@ (80052f8 <__mdiff+0x120>)
 8005232:	f240 2145 	movw	r1, #581	@ 0x245
 8005236:	e7e3      	b.n	8005200 <__mdiff+0x28>
 8005238:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800523c:	6926      	ldr	r6, [r4, #16]
 800523e:	60c5      	str	r5, [r0, #12]
 8005240:	f109 0310 	add.w	r3, r9, #16
 8005244:	f109 0514 	add.w	r5, r9, #20
 8005248:	f104 0e14 	add.w	lr, r4, #20
 800524c:	f100 0b14 	add.w	fp, r0, #20
 8005250:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005254:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005258:	9301      	str	r3, [sp, #4]
 800525a:	46d9      	mov	r9, fp
 800525c:	f04f 0c00 	mov.w	ip, #0
 8005260:	9b01      	ldr	r3, [sp, #4]
 8005262:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005266:	f853 af04 	ldr.w	sl, [r3, #4]!
 800526a:	9301      	str	r3, [sp, #4]
 800526c:	fa1f f38a 	uxth.w	r3, sl
 8005270:	4619      	mov	r1, r3
 8005272:	b283      	uxth	r3, r0
 8005274:	1acb      	subs	r3, r1, r3
 8005276:	0c00      	lsrs	r0, r0, #16
 8005278:	4463      	add	r3, ip
 800527a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800527e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005282:	b29b      	uxth	r3, r3
 8005284:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005288:	4576      	cmp	r6, lr
 800528a:	f849 3b04 	str.w	r3, [r9], #4
 800528e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005292:	d8e5      	bhi.n	8005260 <__mdiff+0x88>
 8005294:	1b33      	subs	r3, r6, r4
 8005296:	3b15      	subs	r3, #21
 8005298:	f023 0303 	bic.w	r3, r3, #3
 800529c:	3415      	adds	r4, #21
 800529e:	3304      	adds	r3, #4
 80052a0:	42a6      	cmp	r6, r4
 80052a2:	bf38      	it	cc
 80052a4:	2304      	movcc	r3, #4
 80052a6:	441d      	add	r5, r3
 80052a8:	445b      	add	r3, fp
 80052aa:	461e      	mov	r6, r3
 80052ac:	462c      	mov	r4, r5
 80052ae:	4544      	cmp	r4, r8
 80052b0:	d30e      	bcc.n	80052d0 <__mdiff+0xf8>
 80052b2:	f108 0103 	add.w	r1, r8, #3
 80052b6:	1b49      	subs	r1, r1, r5
 80052b8:	f021 0103 	bic.w	r1, r1, #3
 80052bc:	3d03      	subs	r5, #3
 80052be:	45a8      	cmp	r8, r5
 80052c0:	bf38      	it	cc
 80052c2:	2100      	movcc	r1, #0
 80052c4:	440b      	add	r3, r1
 80052c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80052ca:	b191      	cbz	r1, 80052f2 <__mdiff+0x11a>
 80052cc:	6117      	str	r7, [r2, #16]
 80052ce:	e79d      	b.n	800520c <__mdiff+0x34>
 80052d0:	f854 1b04 	ldr.w	r1, [r4], #4
 80052d4:	46e6      	mov	lr, ip
 80052d6:	0c08      	lsrs	r0, r1, #16
 80052d8:	fa1c fc81 	uxtah	ip, ip, r1
 80052dc:	4471      	add	r1, lr
 80052de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80052e2:	b289      	uxth	r1, r1
 80052e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80052e8:	f846 1b04 	str.w	r1, [r6], #4
 80052ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80052f0:	e7dd      	b.n	80052ae <__mdiff+0xd6>
 80052f2:	3f01      	subs	r7, #1
 80052f4:	e7e7      	b.n	80052c6 <__mdiff+0xee>
 80052f6:	bf00      	nop
 80052f8:	08006094 	.word	0x08006094
 80052fc:	080060a5 	.word	0x080060a5

08005300 <__d2b>:
 8005300:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005304:	460f      	mov	r7, r1
 8005306:	2101      	movs	r1, #1
 8005308:	ec59 8b10 	vmov	r8, r9, d0
 800530c:	4616      	mov	r6, r2
 800530e:	f7ff fccd 	bl	8004cac <_Balloc>
 8005312:	4604      	mov	r4, r0
 8005314:	b930      	cbnz	r0, 8005324 <__d2b+0x24>
 8005316:	4602      	mov	r2, r0
 8005318:	4b23      	ldr	r3, [pc, #140]	@ (80053a8 <__d2b+0xa8>)
 800531a:	4824      	ldr	r0, [pc, #144]	@ (80053ac <__d2b+0xac>)
 800531c:	f240 310f 	movw	r1, #783	@ 0x30f
 8005320:	f000 fa82 	bl	8005828 <__assert_func>
 8005324:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005328:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800532c:	b10d      	cbz	r5, 8005332 <__d2b+0x32>
 800532e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005332:	9301      	str	r3, [sp, #4]
 8005334:	f1b8 0300 	subs.w	r3, r8, #0
 8005338:	d023      	beq.n	8005382 <__d2b+0x82>
 800533a:	4668      	mov	r0, sp
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	f7ff fd7c 	bl	8004e3a <__lo0bits>
 8005342:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005346:	b1d0      	cbz	r0, 800537e <__d2b+0x7e>
 8005348:	f1c0 0320 	rsb	r3, r0, #32
 800534c:	fa02 f303 	lsl.w	r3, r2, r3
 8005350:	430b      	orrs	r3, r1
 8005352:	40c2      	lsrs	r2, r0
 8005354:	6163      	str	r3, [r4, #20]
 8005356:	9201      	str	r2, [sp, #4]
 8005358:	9b01      	ldr	r3, [sp, #4]
 800535a:	61a3      	str	r3, [r4, #24]
 800535c:	2b00      	cmp	r3, #0
 800535e:	bf0c      	ite	eq
 8005360:	2201      	moveq	r2, #1
 8005362:	2202      	movne	r2, #2
 8005364:	6122      	str	r2, [r4, #16]
 8005366:	b1a5      	cbz	r5, 8005392 <__d2b+0x92>
 8005368:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800536c:	4405      	add	r5, r0
 800536e:	603d      	str	r5, [r7, #0]
 8005370:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005374:	6030      	str	r0, [r6, #0]
 8005376:	4620      	mov	r0, r4
 8005378:	b003      	add	sp, #12
 800537a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800537e:	6161      	str	r1, [r4, #20]
 8005380:	e7ea      	b.n	8005358 <__d2b+0x58>
 8005382:	a801      	add	r0, sp, #4
 8005384:	f7ff fd59 	bl	8004e3a <__lo0bits>
 8005388:	9b01      	ldr	r3, [sp, #4]
 800538a:	6163      	str	r3, [r4, #20]
 800538c:	3020      	adds	r0, #32
 800538e:	2201      	movs	r2, #1
 8005390:	e7e8      	b.n	8005364 <__d2b+0x64>
 8005392:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005396:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800539a:	6038      	str	r0, [r7, #0]
 800539c:	6918      	ldr	r0, [r3, #16]
 800539e:	f7ff fd2d 	bl	8004dfc <__hi0bits>
 80053a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80053a6:	e7e5      	b.n	8005374 <__d2b+0x74>
 80053a8:	08006094 	.word	0x08006094
 80053ac:	080060a5 	.word	0x080060a5

080053b0 <__ssputs_r>:
 80053b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053b4:	688e      	ldr	r6, [r1, #8]
 80053b6:	461f      	mov	r7, r3
 80053b8:	42be      	cmp	r6, r7
 80053ba:	680b      	ldr	r3, [r1, #0]
 80053bc:	4682      	mov	sl, r0
 80053be:	460c      	mov	r4, r1
 80053c0:	4690      	mov	r8, r2
 80053c2:	d82d      	bhi.n	8005420 <__ssputs_r+0x70>
 80053c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80053c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80053cc:	d026      	beq.n	800541c <__ssputs_r+0x6c>
 80053ce:	6965      	ldr	r5, [r4, #20]
 80053d0:	6909      	ldr	r1, [r1, #16]
 80053d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053d6:	eba3 0901 	sub.w	r9, r3, r1
 80053da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80053de:	1c7b      	adds	r3, r7, #1
 80053e0:	444b      	add	r3, r9
 80053e2:	106d      	asrs	r5, r5, #1
 80053e4:	429d      	cmp	r5, r3
 80053e6:	bf38      	it	cc
 80053e8:	461d      	movcc	r5, r3
 80053ea:	0553      	lsls	r3, r2, #21
 80053ec:	d527      	bpl.n	800543e <__ssputs_r+0x8e>
 80053ee:	4629      	mov	r1, r5
 80053f0:	f7ff fbd0 	bl	8004b94 <_malloc_r>
 80053f4:	4606      	mov	r6, r0
 80053f6:	b360      	cbz	r0, 8005452 <__ssputs_r+0xa2>
 80053f8:	6921      	ldr	r1, [r4, #16]
 80053fa:	464a      	mov	r2, r9
 80053fc:	f000 fa06 	bl	800580c <memcpy>
 8005400:	89a3      	ldrh	r3, [r4, #12]
 8005402:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800540a:	81a3      	strh	r3, [r4, #12]
 800540c:	6126      	str	r6, [r4, #16]
 800540e:	6165      	str	r5, [r4, #20]
 8005410:	444e      	add	r6, r9
 8005412:	eba5 0509 	sub.w	r5, r5, r9
 8005416:	6026      	str	r6, [r4, #0]
 8005418:	60a5      	str	r5, [r4, #8]
 800541a:	463e      	mov	r6, r7
 800541c:	42be      	cmp	r6, r7
 800541e:	d900      	bls.n	8005422 <__ssputs_r+0x72>
 8005420:	463e      	mov	r6, r7
 8005422:	6820      	ldr	r0, [r4, #0]
 8005424:	4632      	mov	r2, r6
 8005426:	4641      	mov	r1, r8
 8005428:	f000 f9c6 	bl	80057b8 <memmove>
 800542c:	68a3      	ldr	r3, [r4, #8]
 800542e:	1b9b      	subs	r3, r3, r6
 8005430:	60a3      	str	r3, [r4, #8]
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	4433      	add	r3, r6
 8005436:	6023      	str	r3, [r4, #0]
 8005438:	2000      	movs	r0, #0
 800543a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800543e:	462a      	mov	r2, r5
 8005440:	f000 fa36 	bl	80058b0 <_realloc_r>
 8005444:	4606      	mov	r6, r0
 8005446:	2800      	cmp	r0, #0
 8005448:	d1e0      	bne.n	800540c <__ssputs_r+0x5c>
 800544a:	6921      	ldr	r1, [r4, #16]
 800544c:	4650      	mov	r0, sl
 800544e:	f7ff fb2d 	bl	8004aac <_free_r>
 8005452:	230c      	movs	r3, #12
 8005454:	f8ca 3000 	str.w	r3, [sl]
 8005458:	89a3      	ldrh	r3, [r4, #12]
 800545a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800545e:	81a3      	strh	r3, [r4, #12]
 8005460:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005464:	e7e9      	b.n	800543a <__ssputs_r+0x8a>
	...

08005468 <_svfiprintf_r>:
 8005468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800546c:	4698      	mov	r8, r3
 800546e:	898b      	ldrh	r3, [r1, #12]
 8005470:	061b      	lsls	r3, r3, #24
 8005472:	b09d      	sub	sp, #116	@ 0x74
 8005474:	4607      	mov	r7, r0
 8005476:	460d      	mov	r5, r1
 8005478:	4614      	mov	r4, r2
 800547a:	d510      	bpl.n	800549e <_svfiprintf_r+0x36>
 800547c:	690b      	ldr	r3, [r1, #16]
 800547e:	b973      	cbnz	r3, 800549e <_svfiprintf_r+0x36>
 8005480:	2140      	movs	r1, #64	@ 0x40
 8005482:	f7ff fb87 	bl	8004b94 <_malloc_r>
 8005486:	6028      	str	r0, [r5, #0]
 8005488:	6128      	str	r0, [r5, #16]
 800548a:	b930      	cbnz	r0, 800549a <_svfiprintf_r+0x32>
 800548c:	230c      	movs	r3, #12
 800548e:	603b      	str	r3, [r7, #0]
 8005490:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005494:	b01d      	add	sp, #116	@ 0x74
 8005496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800549a:	2340      	movs	r3, #64	@ 0x40
 800549c:	616b      	str	r3, [r5, #20]
 800549e:	2300      	movs	r3, #0
 80054a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80054a2:	2320      	movs	r3, #32
 80054a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80054a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80054ac:	2330      	movs	r3, #48	@ 0x30
 80054ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800564c <_svfiprintf_r+0x1e4>
 80054b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80054b6:	f04f 0901 	mov.w	r9, #1
 80054ba:	4623      	mov	r3, r4
 80054bc:	469a      	mov	sl, r3
 80054be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054c2:	b10a      	cbz	r2, 80054c8 <_svfiprintf_r+0x60>
 80054c4:	2a25      	cmp	r2, #37	@ 0x25
 80054c6:	d1f9      	bne.n	80054bc <_svfiprintf_r+0x54>
 80054c8:	ebba 0b04 	subs.w	fp, sl, r4
 80054cc:	d00b      	beq.n	80054e6 <_svfiprintf_r+0x7e>
 80054ce:	465b      	mov	r3, fp
 80054d0:	4622      	mov	r2, r4
 80054d2:	4629      	mov	r1, r5
 80054d4:	4638      	mov	r0, r7
 80054d6:	f7ff ff6b 	bl	80053b0 <__ssputs_r>
 80054da:	3001      	adds	r0, #1
 80054dc:	f000 80a7 	beq.w	800562e <_svfiprintf_r+0x1c6>
 80054e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054e2:	445a      	add	r2, fp
 80054e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80054e6:	f89a 3000 	ldrb.w	r3, [sl]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 809f 	beq.w	800562e <_svfiprintf_r+0x1c6>
 80054f0:	2300      	movs	r3, #0
 80054f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80054f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054fa:	f10a 0a01 	add.w	sl, sl, #1
 80054fe:	9304      	str	r3, [sp, #16]
 8005500:	9307      	str	r3, [sp, #28]
 8005502:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005506:	931a      	str	r3, [sp, #104]	@ 0x68
 8005508:	4654      	mov	r4, sl
 800550a:	2205      	movs	r2, #5
 800550c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005510:	484e      	ldr	r0, [pc, #312]	@ (800564c <_svfiprintf_r+0x1e4>)
 8005512:	f7fa fe95 	bl	8000240 <memchr>
 8005516:	9a04      	ldr	r2, [sp, #16]
 8005518:	b9d8      	cbnz	r0, 8005552 <_svfiprintf_r+0xea>
 800551a:	06d0      	lsls	r0, r2, #27
 800551c:	bf44      	itt	mi
 800551e:	2320      	movmi	r3, #32
 8005520:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005524:	0711      	lsls	r1, r2, #28
 8005526:	bf44      	itt	mi
 8005528:	232b      	movmi	r3, #43	@ 0x2b
 800552a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800552e:	f89a 3000 	ldrb.w	r3, [sl]
 8005532:	2b2a      	cmp	r3, #42	@ 0x2a
 8005534:	d015      	beq.n	8005562 <_svfiprintf_r+0xfa>
 8005536:	9a07      	ldr	r2, [sp, #28]
 8005538:	4654      	mov	r4, sl
 800553a:	2000      	movs	r0, #0
 800553c:	f04f 0c0a 	mov.w	ip, #10
 8005540:	4621      	mov	r1, r4
 8005542:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005546:	3b30      	subs	r3, #48	@ 0x30
 8005548:	2b09      	cmp	r3, #9
 800554a:	d94b      	bls.n	80055e4 <_svfiprintf_r+0x17c>
 800554c:	b1b0      	cbz	r0, 800557c <_svfiprintf_r+0x114>
 800554e:	9207      	str	r2, [sp, #28]
 8005550:	e014      	b.n	800557c <_svfiprintf_r+0x114>
 8005552:	eba0 0308 	sub.w	r3, r0, r8
 8005556:	fa09 f303 	lsl.w	r3, r9, r3
 800555a:	4313      	orrs	r3, r2
 800555c:	9304      	str	r3, [sp, #16]
 800555e:	46a2      	mov	sl, r4
 8005560:	e7d2      	b.n	8005508 <_svfiprintf_r+0xa0>
 8005562:	9b03      	ldr	r3, [sp, #12]
 8005564:	1d19      	adds	r1, r3, #4
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	9103      	str	r1, [sp, #12]
 800556a:	2b00      	cmp	r3, #0
 800556c:	bfbb      	ittet	lt
 800556e:	425b      	neglt	r3, r3
 8005570:	f042 0202 	orrlt.w	r2, r2, #2
 8005574:	9307      	strge	r3, [sp, #28]
 8005576:	9307      	strlt	r3, [sp, #28]
 8005578:	bfb8      	it	lt
 800557a:	9204      	strlt	r2, [sp, #16]
 800557c:	7823      	ldrb	r3, [r4, #0]
 800557e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005580:	d10a      	bne.n	8005598 <_svfiprintf_r+0x130>
 8005582:	7863      	ldrb	r3, [r4, #1]
 8005584:	2b2a      	cmp	r3, #42	@ 0x2a
 8005586:	d132      	bne.n	80055ee <_svfiprintf_r+0x186>
 8005588:	9b03      	ldr	r3, [sp, #12]
 800558a:	1d1a      	adds	r2, r3, #4
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	9203      	str	r2, [sp, #12]
 8005590:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005594:	3402      	adds	r4, #2
 8005596:	9305      	str	r3, [sp, #20]
 8005598:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800565c <_svfiprintf_r+0x1f4>
 800559c:	7821      	ldrb	r1, [r4, #0]
 800559e:	2203      	movs	r2, #3
 80055a0:	4650      	mov	r0, sl
 80055a2:	f7fa fe4d 	bl	8000240 <memchr>
 80055a6:	b138      	cbz	r0, 80055b8 <_svfiprintf_r+0x150>
 80055a8:	9b04      	ldr	r3, [sp, #16]
 80055aa:	eba0 000a 	sub.w	r0, r0, sl
 80055ae:	2240      	movs	r2, #64	@ 0x40
 80055b0:	4082      	lsls	r2, r0
 80055b2:	4313      	orrs	r3, r2
 80055b4:	3401      	adds	r4, #1
 80055b6:	9304      	str	r3, [sp, #16]
 80055b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055bc:	4824      	ldr	r0, [pc, #144]	@ (8005650 <_svfiprintf_r+0x1e8>)
 80055be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80055c2:	2206      	movs	r2, #6
 80055c4:	f7fa fe3c 	bl	8000240 <memchr>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	d036      	beq.n	800563a <_svfiprintf_r+0x1d2>
 80055cc:	4b21      	ldr	r3, [pc, #132]	@ (8005654 <_svfiprintf_r+0x1ec>)
 80055ce:	bb1b      	cbnz	r3, 8005618 <_svfiprintf_r+0x1b0>
 80055d0:	9b03      	ldr	r3, [sp, #12]
 80055d2:	3307      	adds	r3, #7
 80055d4:	f023 0307 	bic.w	r3, r3, #7
 80055d8:	3308      	adds	r3, #8
 80055da:	9303      	str	r3, [sp, #12]
 80055dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055de:	4433      	add	r3, r6
 80055e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80055e2:	e76a      	b.n	80054ba <_svfiprintf_r+0x52>
 80055e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80055e8:	460c      	mov	r4, r1
 80055ea:	2001      	movs	r0, #1
 80055ec:	e7a8      	b.n	8005540 <_svfiprintf_r+0xd8>
 80055ee:	2300      	movs	r3, #0
 80055f0:	3401      	adds	r4, #1
 80055f2:	9305      	str	r3, [sp, #20]
 80055f4:	4619      	mov	r1, r3
 80055f6:	f04f 0c0a 	mov.w	ip, #10
 80055fa:	4620      	mov	r0, r4
 80055fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005600:	3a30      	subs	r2, #48	@ 0x30
 8005602:	2a09      	cmp	r2, #9
 8005604:	d903      	bls.n	800560e <_svfiprintf_r+0x1a6>
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0c6      	beq.n	8005598 <_svfiprintf_r+0x130>
 800560a:	9105      	str	r1, [sp, #20]
 800560c:	e7c4      	b.n	8005598 <_svfiprintf_r+0x130>
 800560e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005612:	4604      	mov	r4, r0
 8005614:	2301      	movs	r3, #1
 8005616:	e7f0      	b.n	80055fa <_svfiprintf_r+0x192>
 8005618:	ab03      	add	r3, sp, #12
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	462a      	mov	r2, r5
 800561e:	4b0e      	ldr	r3, [pc, #56]	@ (8005658 <_svfiprintf_r+0x1f0>)
 8005620:	a904      	add	r1, sp, #16
 8005622:	4638      	mov	r0, r7
 8005624:	f7fd ff1c 	bl	8003460 <_printf_float>
 8005628:	1c42      	adds	r2, r0, #1
 800562a:	4606      	mov	r6, r0
 800562c:	d1d6      	bne.n	80055dc <_svfiprintf_r+0x174>
 800562e:	89ab      	ldrh	r3, [r5, #12]
 8005630:	065b      	lsls	r3, r3, #25
 8005632:	f53f af2d 	bmi.w	8005490 <_svfiprintf_r+0x28>
 8005636:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005638:	e72c      	b.n	8005494 <_svfiprintf_r+0x2c>
 800563a:	ab03      	add	r3, sp, #12
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	462a      	mov	r2, r5
 8005640:	4b05      	ldr	r3, [pc, #20]	@ (8005658 <_svfiprintf_r+0x1f0>)
 8005642:	a904      	add	r1, sp, #16
 8005644:	4638      	mov	r0, r7
 8005646:	f7fe f993 	bl	8003970 <_printf_i>
 800564a:	e7ed      	b.n	8005628 <_svfiprintf_r+0x1c0>
 800564c:	08006200 	.word	0x08006200
 8005650:	0800620a 	.word	0x0800620a
 8005654:	08003461 	.word	0x08003461
 8005658:	080053b1 	.word	0x080053b1
 800565c:	08006206 	.word	0x08006206

08005660 <__sflush_r>:
 8005660:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005668:	0716      	lsls	r6, r2, #28
 800566a:	4605      	mov	r5, r0
 800566c:	460c      	mov	r4, r1
 800566e:	d454      	bmi.n	800571a <__sflush_r+0xba>
 8005670:	684b      	ldr	r3, [r1, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	dc02      	bgt.n	800567c <__sflush_r+0x1c>
 8005676:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005678:	2b00      	cmp	r3, #0
 800567a:	dd48      	ble.n	800570e <__sflush_r+0xae>
 800567c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800567e:	2e00      	cmp	r6, #0
 8005680:	d045      	beq.n	800570e <__sflush_r+0xae>
 8005682:	2300      	movs	r3, #0
 8005684:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005688:	682f      	ldr	r7, [r5, #0]
 800568a:	6a21      	ldr	r1, [r4, #32]
 800568c:	602b      	str	r3, [r5, #0]
 800568e:	d030      	beq.n	80056f2 <__sflush_r+0x92>
 8005690:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005692:	89a3      	ldrh	r3, [r4, #12]
 8005694:	0759      	lsls	r1, r3, #29
 8005696:	d505      	bpl.n	80056a4 <__sflush_r+0x44>
 8005698:	6863      	ldr	r3, [r4, #4]
 800569a:	1ad2      	subs	r2, r2, r3
 800569c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800569e:	b10b      	cbz	r3, 80056a4 <__sflush_r+0x44>
 80056a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80056a2:	1ad2      	subs	r2, r2, r3
 80056a4:	2300      	movs	r3, #0
 80056a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80056a8:	6a21      	ldr	r1, [r4, #32]
 80056aa:	4628      	mov	r0, r5
 80056ac:	47b0      	blx	r6
 80056ae:	1c43      	adds	r3, r0, #1
 80056b0:	89a3      	ldrh	r3, [r4, #12]
 80056b2:	d106      	bne.n	80056c2 <__sflush_r+0x62>
 80056b4:	6829      	ldr	r1, [r5, #0]
 80056b6:	291d      	cmp	r1, #29
 80056b8:	d82b      	bhi.n	8005712 <__sflush_r+0xb2>
 80056ba:	4a2a      	ldr	r2, [pc, #168]	@ (8005764 <__sflush_r+0x104>)
 80056bc:	410a      	asrs	r2, r1
 80056be:	07d6      	lsls	r6, r2, #31
 80056c0:	d427      	bmi.n	8005712 <__sflush_r+0xb2>
 80056c2:	2200      	movs	r2, #0
 80056c4:	6062      	str	r2, [r4, #4]
 80056c6:	04d9      	lsls	r1, r3, #19
 80056c8:	6922      	ldr	r2, [r4, #16]
 80056ca:	6022      	str	r2, [r4, #0]
 80056cc:	d504      	bpl.n	80056d8 <__sflush_r+0x78>
 80056ce:	1c42      	adds	r2, r0, #1
 80056d0:	d101      	bne.n	80056d6 <__sflush_r+0x76>
 80056d2:	682b      	ldr	r3, [r5, #0]
 80056d4:	b903      	cbnz	r3, 80056d8 <__sflush_r+0x78>
 80056d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80056d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056da:	602f      	str	r7, [r5, #0]
 80056dc:	b1b9      	cbz	r1, 800570e <__sflush_r+0xae>
 80056de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80056e2:	4299      	cmp	r1, r3
 80056e4:	d002      	beq.n	80056ec <__sflush_r+0x8c>
 80056e6:	4628      	mov	r0, r5
 80056e8:	f7ff f9e0 	bl	8004aac <_free_r>
 80056ec:	2300      	movs	r3, #0
 80056ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80056f0:	e00d      	b.n	800570e <__sflush_r+0xae>
 80056f2:	2301      	movs	r3, #1
 80056f4:	4628      	mov	r0, r5
 80056f6:	47b0      	blx	r6
 80056f8:	4602      	mov	r2, r0
 80056fa:	1c50      	adds	r0, r2, #1
 80056fc:	d1c9      	bne.n	8005692 <__sflush_r+0x32>
 80056fe:	682b      	ldr	r3, [r5, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0c6      	beq.n	8005692 <__sflush_r+0x32>
 8005704:	2b1d      	cmp	r3, #29
 8005706:	d001      	beq.n	800570c <__sflush_r+0xac>
 8005708:	2b16      	cmp	r3, #22
 800570a:	d11e      	bne.n	800574a <__sflush_r+0xea>
 800570c:	602f      	str	r7, [r5, #0]
 800570e:	2000      	movs	r0, #0
 8005710:	e022      	b.n	8005758 <__sflush_r+0xf8>
 8005712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005716:	b21b      	sxth	r3, r3
 8005718:	e01b      	b.n	8005752 <__sflush_r+0xf2>
 800571a:	690f      	ldr	r7, [r1, #16]
 800571c:	2f00      	cmp	r7, #0
 800571e:	d0f6      	beq.n	800570e <__sflush_r+0xae>
 8005720:	0793      	lsls	r3, r2, #30
 8005722:	680e      	ldr	r6, [r1, #0]
 8005724:	bf08      	it	eq
 8005726:	694b      	ldreq	r3, [r1, #20]
 8005728:	600f      	str	r7, [r1, #0]
 800572a:	bf18      	it	ne
 800572c:	2300      	movne	r3, #0
 800572e:	eba6 0807 	sub.w	r8, r6, r7
 8005732:	608b      	str	r3, [r1, #8]
 8005734:	f1b8 0f00 	cmp.w	r8, #0
 8005738:	dde9      	ble.n	800570e <__sflush_r+0xae>
 800573a:	6a21      	ldr	r1, [r4, #32]
 800573c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800573e:	4643      	mov	r3, r8
 8005740:	463a      	mov	r2, r7
 8005742:	4628      	mov	r0, r5
 8005744:	47b0      	blx	r6
 8005746:	2800      	cmp	r0, #0
 8005748:	dc08      	bgt.n	800575c <__sflush_r+0xfc>
 800574a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800574e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005752:	81a3      	strh	r3, [r4, #12]
 8005754:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800575c:	4407      	add	r7, r0
 800575e:	eba8 0800 	sub.w	r8, r8, r0
 8005762:	e7e7      	b.n	8005734 <__sflush_r+0xd4>
 8005764:	dfbffffe 	.word	0xdfbffffe

08005768 <_fflush_r>:
 8005768:	b538      	push	{r3, r4, r5, lr}
 800576a:	690b      	ldr	r3, [r1, #16]
 800576c:	4605      	mov	r5, r0
 800576e:	460c      	mov	r4, r1
 8005770:	b913      	cbnz	r3, 8005778 <_fflush_r+0x10>
 8005772:	2500      	movs	r5, #0
 8005774:	4628      	mov	r0, r5
 8005776:	bd38      	pop	{r3, r4, r5, pc}
 8005778:	b118      	cbz	r0, 8005782 <_fflush_r+0x1a>
 800577a:	6a03      	ldr	r3, [r0, #32]
 800577c:	b90b      	cbnz	r3, 8005782 <_fflush_r+0x1a>
 800577e:	f7fe faa3 	bl	8003cc8 <__sinit>
 8005782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0f3      	beq.n	8005772 <_fflush_r+0xa>
 800578a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800578c:	07d0      	lsls	r0, r2, #31
 800578e:	d404      	bmi.n	800579a <_fflush_r+0x32>
 8005790:	0599      	lsls	r1, r3, #22
 8005792:	d402      	bmi.n	800579a <_fflush_r+0x32>
 8005794:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005796:	f7fe fba8 	bl	8003eea <__retarget_lock_acquire_recursive>
 800579a:	4628      	mov	r0, r5
 800579c:	4621      	mov	r1, r4
 800579e:	f7ff ff5f 	bl	8005660 <__sflush_r>
 80057a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057a4:	07da      	lsls	r2, r3, #31
 80057a6:	4605      	mov	r5, r0
 80057a8:	d4e4      	bmi.n	8005774 <_fflush_r+0xc>
 80057aa:	89a3      	ldrh	r3, [r4, #12]
 80057ac:	059b      	lsls	r3, r3, #22
 80057ae:	d4e1      	bmi.n	8005774 <_fflush_r+0xc>
 80057b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057b2:	f7fe fb9b 	bl	8003eec <__retarget_lock_release_recursive>
 80057b6:	e7dd      	b.n	8005774 <_fflush_r+0xc>

080057b8 <memmove>:
 80057b8:	4288      	cmp	r0, r1
 80057ba:	b510      	push	{r4, lr}
 80057bc:	eb01 0402 	add.w	r4, r1, r2
 80057c0:	d902      	bls.n	80057c8 <memmove+0x10>
 80057c2:	4284      	cmp	r4, r0
 80057c4:	4623      	mov	r3, r4
 80057c6:	d807      	bhi.n	80057d8 <memmove+0x20>
 80057c8:	1e43      	subs	r3, r0, #1
 80057ca:	42a1      	cmp	r1, r4
 80057cc:	d008      	beq.n	80057e0 <memmove+0x28>
 80057ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057d6:	e7f8      	b.n	80057ca <memmove+0x12>
 80057d8:	4402      	add	r2, r0
 80057da:	4601      	mov	r1, r0
 80057dc:	428a      	cmp	r2, r1
 80057de:	d100      	bne.n	80057e2 <memmove+0x2a>
 80057e0:	bd10      	pop	{r4, pc}
 80057e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057ea:	e7f7      	b.n	80057dc <memmove+0x24>

080057ec <_sbrk_r>:
 80057ec:	b538      	push	{r3, r4, r5, lr}
 80057ee:	4d06      	ldr	r5, [pc, #24]	@ (8005808 <_sbrk_r+0x1c>)
 80057f0:	2300      	movs	r3, #0
 80057f2:	4604      	mov	r4, r0
 80057f4:	4608      	mov	r0, r1
 80057f6:	602b      	str	r3, [r5, #0]
 80057f8:	f000 fb8c 	bl	8005f14 <_sbrk>
 80057fc:	1c43      	adds	r3, r0, #1
 80057fe:	d102      	bne.n	8005806 <_sbrk_r+0x1a>
 8005800:	682b      	ldr	r3, [r5, #0]
 8005802:	b103      	cbz	r3, 8005806 <_sbrk_r+0x1a>
 8005804:	6023      	str	r3, [r4, #0]
 8005806:	bd38      	pop	{r3, r4, r5, pc}
 8005808:	2000049c 	.word	0x2000049c

0800580c <memcpy>:
 800580c:	440a      	add	r2, r1
 800580e:	4291      	cmp	r1, r2
 8005810:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005814:	d100      	bne.n	8005818 <memcpy+0xc>
 8005816:	4770      	bx	lr
 8005818:	b510      	push	{r4, lr}
 800581a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800581e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005822:	4291      	cmp	r1, r2
 8005824:	d1f9      	bne.n	800581a <memcpy+0xe>
 8005826:	bd10      	pop	{r4, pc}

08005828 <__assert_func>:
 8005828:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800582a:	4614      	mov	r4, r2
 800582c:	461a      	mov	r2, r3
 800582e:	4b09      	ldr	r3, [pc, #36]	@ (8005854 <__assert_func+0x2c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4605      	mov	r5, r0
 8005834:	68d8      	ldr	r0, [r3, #12]
 8005836:	b954      	cbnz	r4, 800584e <__assert_func+0x26>
 8005838:	4b07      	ldr	r3, [pc, #28]	@ (8005858 <__assert_func+0x30>)
 800583a:	461c      	mov	r4, r3
 800583c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005840:	9100      	str	r1, [sp, #0]
 8005842:	462b      	mov	r3, r5
 8005844:	4905      	ldr	r1, [pc, #20]	@ (800585c <__assert_func+0x34>)
 8005846:	f000 f86f 	bl	8005928 <fiprintf>
 800584a:	f000 f87f 	bl	800594c <abort>
 800584e:	4b04      	ldr	r3, [pc, #16]	@ (8005860 <__assert_func+0x38>)
 8005850:	e7f4      	b.n	800583c <__assert_func+0x14>
 8005852:	bf00      	nop
 8005854:	20000018 	.word	0x20000018
 8005858:	08006256 	.word	0x08006256
 800585c:	08006228 	.word	0x08006228
 8005860:	0800621b 	.word	0x0800621b

08005864 <_calloc_r>:
 8005864:	b570      	push	{r4, r5, r6, lr}
 8005866:	fba1 5402 	umull	r5, r4, r1, r2
 800586a:	b93c      	cbnz	r4, 800587c <_calloc_r+0x18>
 800586c:	4629      	mov	r1, r5
 800586e:	f7ff f991 	bl	8004b94 <_malloc_r>
 8005872:	4606      	mov	r6, r0
 8005874:	b928      	cbnz	r0, 8005882 <_calloc_r+0x1e>
 8005876:	2600      	movs	r6, #0
 8005878:	4630      	mov	r0, r6
 800587a:	bd70      	pop	{r4, r5, r6, pc}
 800587c:	220c      	movs	r2, #12
 800587e:	6002      	str	r2, [r0, #0]
 8005880:	e7f9      	b.n	8005876 <_calloc_r+0x12>
 8005882:	462a      	mov	r2, r5
 8005884:	4621      	mov	r1, r4
 8005886:	f7fe fab8 	bl	8003dfa <memset>
 800588a:	e7f5      	b.n	8005878 <_calloc_r+0x14>

0800588c <__ascii_mbtowc>:
 800588c:	b082      	sub	sp, #8
 800588e:	b901      	cbnz	r1, 8005892 <__ascii_mbtowc+0x6>
 8005890:	a901      	add	r1, sp, #4
 8005892:	b142      	cbz	r2, 80058a6 <__ascii_mbtowc+0x1a>
 8005894:	b14b      	cbz	r3, 80058aa <__ascii_mbtowc+0x1e>
 8005896:	7813      	ldrb	r3, [r2, #0]
 8005898:	600b      	str	r3, [r1, #0]
 800589a:	7812      	ldrb	r2, [r2, #0]
 800589c:	1e10      	subs	r0, r2, #0
 800589e:	bf18      	it	ne
 80058a0:	2001      	movne	r0, #1
 80058a2:	b002      	add	sp, #8
 80058a4:	4770      	bx	lr
 80058a6:	4610      	mov	r0, r2
 80058a8:	e7fb      	b.n	80058a2 <__ascii_mbtowc+0x16>
 80058aa:	f06f 0001 	mvn.w	r0, #1
 80058ae:	e7f8      	b.n	80058a2 <__ascii_mbtowc+0x16>

080058b0 <_realloc_r>:
 80058b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058b4:	4680      	mov	r8, r0
 80058b6:	4615      	mov	r5, r2
 80058b8:	460c      	mov	r4, r1
 80058ba:	b921      	cbnz	r1, 80058c6 <_realloc_r+0x16>
 80058bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058c0:	4611      	mov	r1, r2
 80058c2:	f7ff b967 	b.w	8004b94 <_malloc_r>
 80058c6:	b92a      	cbnz	r2, 80058d4 <_realloc_r+0x24>
 80058c8:	f7ff f8f0 	bl	8004aac <_free_r>
 80058cc:	2400      	movs	r4, #0
 80058ce:	4620      	mov	r0, r4
 80058d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058d4:	f000 f841 	bl	800595a <_malloc_usable_size_r>
 80058d8:	4285      	cmp	r5, r0
 80058da:	4606      	mov	r6, r0
 80058dc:	d802      	bhi.n	80058e4 <_realloc_r+0x34>
 80058de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80058e2:	d8f4      	bhi.n	80058ce <_realloc_r+0x1e>
 80058e4:	4629      	mov	r1, r5
 80058e6:	4640      	mov	r0, r8
 80058e8:	f7ff f954 	bl	8004b94 <_malloc_r>
 80058ec:	4607      	mov	r7, r0
 80058ee:	2800      	cmp	r0, #0
 80058f0:	d0ec      	beq.n	80058cc <_realloc_r+0x1c>
 80058f2:	42b5      	cmp	r5, r6
 80058f4:	462a      	mov	r2, r5
 80058f6:	4621      	mov	r1, r4
 80058f8:	bf28      	it	cs
 80058fa:	4632      	movcs	r2, r6
 80058fc:	f7ff ff86 	bl	800580c <memcpy>
 8005900:	4621      	mov	r1, r4
 8005902:	4640      	mov	r0, r8
 8005904:	f7ff f8d2 	bl	8004aac <_free_r>
 8005908:	463c      	mov	r4, r7
 800590a:	e7e0      	b.n	80058ce <_realloc_r+0x1e>

0800590c <__ascii_wctomb>:
 800590c:	4603      	mov	r3, r0
 800590e:	4608      	mov	r0, r1
 8005910:	b141      	cbz	r1, 8005924 <__ascii_wctomb+0x18>
 8005912:	2aff      	cmp	r2, #255	@ 0xff
 8005914:	d904      	bls.n	8005920 <__ascii_wctomb+0x14>
 8005916:	228a      	movs	r2, #138	@ 0x8a
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800591e:	4770      	bx	lr
 8005920:	700a      	strb	r2, [r1, #0]
 8005922:	2001      	movs	r0, #1
 8005924:	4770      	bx	lr
	...

08005928 <fiprintf>:
 8005928:	b40e      	push	{r1, r2, r3}
 800592a:	b503      	push	{r0, r1, lr}
 800592c:	4601      	mov	r1, r0
 800592e:	ab03      	add	r3, sp, #12
 8005930:	4805      	ldr	r0, [pc, #20]	@ (8005948 <fiprintf+0x20>)
 8005932:	f853 2b04 	ldr.w	r2, [r3], #4
 8005936:	6800      	ldr	r0, [r0, #0]
 8005938:	9301      	str	r3, [sp, #4]
 800593a:	f000 f83f 	bl	80059bc <_vfiprintf_r>
 800593e:	b002      	add	sp, #8
 8005940:	f85d eb04 	ldr.w	lr, [sp], #4
 8005944:	b003      	add	sp, #12
 8005946:	4770      	bx	lr
 8005948:	20000018 	.word	0x20000018

0800594c <abort>:
 800594c:	b508      	push	{r3, lr}
 800594e:	2006      	movs	r0, #6
 8005950:	f000 fa08 	bl	8005d64 <raise>
 8005954:	2001      	movs	r0, #1
 8005956:	f000 faf3 	bl	8005f40 <_exit>

0800595a <_malloc_usable_size_r>:
 800595a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800595e:	1f18      	subs	r0, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	bfbc      	itt	lt
 8005964:	580b      	ldrlt	r3, [r1, r0]
 8005966:	18c0      	addlt	r0, r0, r3
 8005968:	4770      	bx	lr

0800596a <__sfputc_r>:
 800596a:	6893      	ldr	r3, [r2, #8]
 800596c:	3b01      	subs	r3, #1
 800596e:	2b00      	cmp	r3, #0
 8005970:	b410      	push	{r4}
 8005972:	6093      	str	r3, [r2, #8]
 8005974:	da08      	bge.n	8005988 <__sfputc_r+0x1e>
 8005976:	6994      	ldr	r4, [r2, #24]
 8005978:	42a3      	cmp	r3, r4
 800597a:	db01      	blt.n	8005980 <__sfputc_r+0x16>
 800597c:	290a      	cmp	r1, #10
 800597e:	d103      	bne.n	8005988 <__sfputc_r+0x1e>
 8005980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005984:	f000 b932 	b.w	8005bec <__swbuf_r>
 8005988:	6813      	ldr	r3, [r2, #0]
 800598a:	1c58      	adds	r0, r3, #1
 800598c:	6010      	str	r0, [r2, #0]
 800598e:	7019      	strb	r1, [r3, #0]
 8005990:	4608      	mov	r0, r1
 8005992:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005996:	4770      	bx	lr

08005998 <__sfputs_r>:
 8005998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599a:	4606      	mov	r6, r0
 800599c:	460f      	mov	r7, r1
 800599e:	4614      	mov	r4, r2
 80059a0:	18d5      	adds	r5, r2, r3
 80059a2:	42ac      	cmp	r4, r5
 80059a4:	d101      	bne.n	80059aa <__sfputs_r+0x12>
 80059a6:	2000      	movs	r0, #0
 80059a8:	e007      	b.n	80059ba <__sfputs_r+0x22>
 80059aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059ae:	463a      	mov	r2, r7
 80059b0:	4630      	mov	r0, r6
 80059b2:	f7ff ffda 	bl	800596a <__sfputc_r>
 80059b6:	1c43      	adds	r3, r0, #1
 80059b8:	d1f3      	bne.n	80059a2 <__sfputs_r+0xa>
 80059ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080059bc <_vfiprintf_r>:
 80059bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c0:	460d      	mov	r5, r1
 80059c2:	b09d      	sub	sp, #116	@ 0x74
 80059c4:	4614      	mov	r4, r2
 80059c6:	4698      	mov	r8, r3
 80059c8:	4606      	mov	r6, r0
 80059ca:	b118      	cbz	r0, 80059d4 <_vfiprintf_r+0x18>
 80059cc:	6a03      	ldr	r3, [r0, #32]
 80059ce:	b90b      	cbnz	r3, 80059d4 <_vfiprintf_r+0x18>
 80059d0:	f7fe f97a 	bl	8003cc8 <__sinit>
 80059d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059d6:	07d9      	lsls	r1, r3, #31
 80059d8:	d405      	bmi.n	80059e6 <_vfiprintf_r+0x2a>
 80059da:	89ab      	ldrh	r3, [r5, #12]
 80059dc:	059a      	lsls	r2, r3, #22
 80059de:	d402      	bmi.n	80059e6 <_vfiprintf_r+0x2a>
 80059e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059e2:	f7fe fa82 	bl	8003eea <__retarget_lock_acquire_recursive>
 80059e6:	89ab      	ldrh	r3, [r5, #12]
 80059e8:	071b      	lsls	r3, r3, #28
 80059ea:	d501      	bpl.n	80059f0 <_vfiprintf_r+0x34>
 80059ec:	692b      	ldr	r3, [r5, #16]
 80059ee:	b99b      	cbnz	r3, 8005a18 <_vfiprintf_r+0x5c>
 80059f0:	4629      	mov	r1, r5
 80059f2:	4630      	mov	r0, r6
 80059f4:	f000 f938 	bl	8005c68 <__swsetup_r>
 80059f8:	b170      	cbz	r0, 8005a18 <_vfiprintf_r+0x5c>
 80059fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059fc:	07dc      	lsls	r4, r3, #31
 80059fe:	d504      	bpl.n	8005a0a <_vfiprintf_r+0x4e>
 8005a00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a04:	b01d      	add	sp, #116	@ 0x74
 8005a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a0a:	89ab      	ldrh	r3, [r5, #12]
 8005a0c:	0598      	lsls	r0, r3, #22
 8005a0e:	d4f7      	bmi.n	8005a00 <_vfiprintf_r+0x44>
 8005a10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a12:	f7fe fa6b 	bl	8003eec <__retarget_lock_release_recursive>
 8005a16:	e7f3      	b.n	8005a00 <_vfiprintf_r+0x44>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a1c:	2320      	movs	r3, #32
 8005a1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a22:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a26:	2330      	movs	r3, #48	@ 0x30
 8005a28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005bd8 <_vfiprintf_r+0x21c>
 8005a2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a30:	f04f 0901 	mov.w	r9, #1
 8005a34:	4623      	mov	r3, r4
 8005a36:	469a      	mov	sl, r3
 8005a38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a3c:	b10a      	cbz	r2, 8005a42 <_vfiprintf_r+0x86>
 8005a3e:	2a25      	cmp	r2, #37	@ 0x25
 8005a40:	d1f9      	bne.n	8005a36 <_vfiprintf_r+0x7a>
 8005a42:	ebba 0b04 	subs.w	fp, sl, r4
 8005a46:	d00b      	beq.n	8005a60 <_vfiprintf_r+0xa4>
 8005a48:	465b      	mov	r3, fp
 8005a4a:	4622      	mov	r2, r4
 8005a4c:	4629      	mov	r1, r5
 8005a4e:	4630      	mov	r0, r6
 8005a50:	f7ff ffa2 	bl	8005998 <__sfputs_r>
 8005a54:	3001      	adds	r0, #1
 8005a56:	f000 80a7 	beq.w	8005ba8 <_vfiprintf_r+0x1ec>
 8005a5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a5c:	445a      	add	r2, fp
 8005a5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a60:	f89a 3000 	ldrb.w	r3, [sl]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 809f 	beq.w	8005ba8 <_vfiprintf_r+0x1ec>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a74:	f10a 0a01 	add.w	sl, sl, #1
 8005a78:	9304      	str	r3, [sp, #16]
 8005a7a:	9307      	str	r3, [sp, #28]
 8005a7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a80:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a82:	4654      	mov	r4, sl
 8005a84:	2205      	movs	r2, #5
 8005a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a8a:	4853      	ldr	r0, [pc, #332]	@ (8005bd8 <_vfiprintf_r+0x21c>)
 8005a8c:	f7fa fbd8 	bl	8000240 <memchr>
 8005a90:	9a04      	ldr	r2, [sp, #16]
 8005a92:	b9d8      	cbnz	r0, 8005acc <_vfiprintf_r+0x110>
 8005a94:	06d1      	lsls	r1, r2, #27
 8005a96:	bf44      	itt	mi
 8005a98:	2320      	movmi	r3, #32
 8005a9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a9e:	0713      	lsls	r3, r2, #28
 8005aa0:	bf44      	itt	mi
 8005aa2:	232b      	movmi	r3, #43	@ 0x2b
 8005aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005aa8:	f89a 3000 	ldrb.w	r3, [sl]
 8005aac:	2b2a      	cmp	r3, #42	@ 0x2a
 8005aae:	d015      	beq.n	8005adc <_vfiprintf_r+0x120>
 8005ab0:	9a07      	ldr	r2, [sp, #28]
 8005ab2:	4654      	mov	r4, sl
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	f04f 0c0a 	mov.w	ip, #10
 8005aba:	4621      	mov	r1, r4
 8005abc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ac0:	3b30      	subs	r3, #48	@ 0x30
 8005ac2:	2b09      	cmp	r3, #9
 8005ac4:	d94b      	bls.n	8005b5e <_vfiprintf_r+0x1a2>
 8005ac6:	b1b0      	cbz	r0, 8005af6 <_vfiprintf_r+0x13a>
 8005ac8:	9207      	str	r2, [sp, #28]
 8005aca:	e014      	b.n	8005af6 <_vfiprintf_r+0x13a>
 8005acc:	eba0 0308 	sub.w	r3, r0, r8
 8005ad0:	fa09 f303 	lsl.w	r3, r9, r3
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	9304      	str	r3, [sp, #16]
 8005ad8:	46a2      	mov	sl, r4
 8005ada:	e7d2      	b.n	8005a82 <_vfiprintf_r+0xc6>
 8005adc:	9b03      	ldr	r3, [sp, #12]
 8005ade:	1d19      	adds	r1, r3, #4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	9103      	str	r1, [sp, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	bfbb      	ittet	lt
 8005ae8:	425b      	neglt	r3, r3
 8005aea:	f042 0202 	orrlt.w	r2, r2, #2
 8005aee:	9307      	strge	r3, [sp, #28]
 8005af0:	9307      	strlt	r3, [sp, #28]
 8005af2:	bfb8      	it	lt
 8005af4:	9204      	strlt	r2, [sp, #16]
 8005af6:	7823      	ldrb	r3, [r4, #0]
 8005af8:	2b2e      	cmp	r3, #46	@ 0x2e
 8005afa:	d10a      	bne.n	8005b12 <_vfiprintf_r+0x156>
 8005afc:	7863      	ldrb	r3, [r4, #1]
 8005afe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b00:	d132      	bne.n	8005b68 <_vfiprintf_r+0x1ac>
 8005b02:	9b03      	ldr	r3, [sp, #12]
 8005b04:	1d1a      	adds	r2, r3, #4
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	9203      	str	r2, [sp, #12]
 8005b0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b0e:	3402      	adds	r4, #2
 8005b10:	9305      	str	r3, [sp, #20]
 8005b12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005be8 <_vfiprintf_r+0x22c>
 8005b16:	7821      	ldrb	r1, [r4, #0]
 8005b18:	2203      	movs	r2, #3
 8005b1a:	4650      	mov	r0, sl
 8005b1c:	f7fa fb90 	bl	8000240 <memchr>
 8005b20:	b138      	cbz	r0, 8005b32 <_vfiprintf_r+0x176>
 8005b22:	9b04      	ldr	r3, [sp, #16]
 8005b24:	eba0 000a 	sub.w	r0, r0, sl
 8005b28:	2240      	movs	r2, #64	@ 0x40
 8005b2a:	4082      	lsls	r2, r0
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	3401      	adds	r4, #1
 8005b30:	9304      	str	r3, [sp, #16]
 8005b32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b36:	4829      	ldr	r0, [pc, #164]	@ (8005bdc <_vfiprintf_r+0x220>)
 8005b38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b3c:	2206      	movs	r2, #6
 8005b3e:	f7fa fb7f 	bl	8000240 <memchr>
 8005b42:	2800      	cmp	r0, #0
 8005b44:	d03f      	beq.n	8005bc6 <_vfiprintf_r+0x20a>
 8005b46:	4b26      	ldr	r3, [pc, #152]	@ (8005be0 <_vfiprintf_r+0x224>)
 8005b48:	bb1b      	cbnz	r3, 8005b92 <_vfiprintf_r+0x1d6>
 8005b4a:	9b03      	ldr	r3, [sp, #12]
 8005b4c:	3307      	adds	r3, #7
 8005b4e:	f023 0307 	bic.w	r3, r3, #7
 8005b52:	3308      	adds	r3, #8
 8005b54:	9303      	str	r3, [sp, #12]
 8005b56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b58:	443b      	add	r3, r7
 8005b5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b5c:	e76a      	b.n	8005a34 <_vfiprintf_r+0x78>
 8005b5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b62:	460c      	mov	r4, r1
 8005b64:	2001      	movs	r0, #1
 8005b66:	e7a8      	b.n	8005aba <_vfiprintf_r+0xfe>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	3401      	adds	r4, #1
 8005b6c:	9305      	str	r3, [sp, #20]
 8005b6e:	4619      	mov	r1, r3
 8005b70:	f04f 0c0a 	mov.w	ip, #10
 8005b74:	4620      	mov	r0, r4
 8005b76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b7a:	3a30      	subs	r2, #48	@ 0x30
 8005b7c:	2a09      	cmp	r2, #9
 8005b7e:	d903      	bls.n	8005b88 <_vfiprintf_r+0x1cc>
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d0c6      	beq.n	8005b12 <_vfiprintf_r+0x156>
 8005b84:	9105      	str	r1, [sp, #20]
 8005b86:	e7c4      	b.n	8005b12 <_vfiprintf_r+0x156>
 8005b88:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b8c:	4604      	mov	r4, r0
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e7f0      	b.n	8005b74 <_vfiprintf_r+0x1b8>
 8005b92:	ab03      	add	r3, sp, #12
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	462a      	mov	r2, r5
 8005b98:	4b12      	ldr	r3, [pc, #72]	@ (8005be4 <_vfiprintf_r+0x228>)
 8005b9a:	a904      	add	r1, sp, #16
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	f7fd fc5f 	bl	8003460 <_printf_float>
 8005ba2:	4607      	mov	r7, r0
 8005ba4:	1c78      	adds	r0, r7, #1
 8005ba6:	d1d6      	bne.n	8005b56 <_vfiprintf_r+0x19a>
 8005ba8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005baa:	07d9      	lsls	r1, r3, #31
 8005bac:	d405      	bmi.n	8005bba <_vfiprintf_r+0x1fe>
 8005bae:	89ab      	ldrh	r3, [r5, #12]
 8005bb0:	059a      	lsls	r2, r3, #22
 8005bb2:	d402      	bmi.n	8005bba <_vfiprintf_r+0x1fe>
 8005bb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005bb6:	f7fe f999 	bl	8003eec <__retarget_lock_release_recursive>
 8005bba:	89ab      	ldrh	r3, [r5, #12]
 8005bbc:	065b      	lsls	r3, r3, #25
 8005bbe:	f53f af1f 	bmi.w	8005a00 <_vfiprintf_r+0x44>
 8005bc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005bc4:	e71e      	b.n	8005a04 <_vfiprintf_r+0x48>
 8005bc6:	ab03      	add	r3, sp, #12
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	462a      	mov	r2, r5
 8005bcc:	4b05      	ldr	r3, [pc, #20]	@ (8005be4 <_vfiprintf_r+0x228>)
 8005bce:	a904      	add	r1, sp, #16
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	f7fd fecd 	bl	8003970 <_printf_i>
 8005bd6:	e7e4      	b.n	8005ba2 <_vfiprintf_r+0x1e6>
 8005bd8:	08006200 	.word	0x08006200
 8005bdc:	0800620a 	.word	0x0800620a
 8005be0:	08003461 	.word	0x08003461
 8005be4:	08005999 	.word	0x08005999
 8005be8:	08006206 	.word	0x08006206

08005bec <__swbuf_r>:
 8005bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bee:	460e      	mov	r6, r1
 8005bf0:	4614      	mov	r4, r2
 8005bf2:	4605      	mov	r5, r0
 8005bf4:	b118      	cbz	r0, 8005bfe <__swbuf_r+0x12>
 8005bf6:	6a03      	ldr	r3, [r0, #32]
 8005bf8:	b90b      	cbnz	r3, 8005bfe <__swbuf_r+0x12>
 8005bfa:	f7fe f865 	bl	8003cc8 <__sinit>
 8005bfe:	69a3      	ldr	r3, [r4, #24]
 8005c00:	60a3      	str	r3, [r4, #8]
 8005c02:	89a3      	ldrh	r3, [r4, #12]
 8005c04:	071a      	lsls	r2, r3, #28
 8005c06:	d501      	bpl.n	8005c0c <__swbuf_r+0x20>
 8005c08:	6923      	ldr	r3, [r4, #16]
 8005c0a:	b943      	cbnz	r3, 8005c1e <__swbuf_r+0x32>
 8005c0c:	4621      	mov	r1, r4
 8005c0e:	4628      	mov	r0, r5
 8005c10:	f000 f82a 	bl	8005c68 <__swsetup_r>
 8005c14:	b118      	cbz	r0, 8005c1e <__swbuf_r+0x32>
 8005c16:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005c1a:	4638      	mov	r0, r7
 8005c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c1e:	6823      	ldr	r3, [r4, #0]
 8005c20:	6922      	ldr	r2, [r4, #16]
 8005c22:	1a98      	subs	r0, r3, r2
 8005c24:	6963      	ldr	r3, [r4, #20]
 8005c26:	b2f6      	uxtb	r6, r6
 8005c28:	4283      	cmp	r3, r0
 8005c2a:	4637      	mov	r7, r6
 8005c2c:	dc05      	bgt.n	8005c3a <__swbuf_r+0x4e>
 8005c2e:	4621      	mov	r1, r4
 8005c30:	4628      	mov	r0, r5
 8005c32:	f7ff fd99 	bl	8005768 <_fflush_r>
 8005c36:	2800      	cmp	r0, #0
 8005c38:	d1ed      	bne.n	8005c16 <__swbuf_r+0x2a>
 8005c3a:	68a3      	ldr	r3, [r4, #8]
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	60a3      	str	r3, [r4, #8]
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	6022      	str	r2, [r4, #0]
 8005c46:	701e      	strb	r6, [r3, #0]
 8005c48:	6962      	ldr	r2, [r4, #20]
 8005c4a:	1c43      	adds	r3, r0, #1
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d004      	beq.n	8005c5a <__swbuf_r+0x6e>
 8005c50:	89a3      	ldrh	r3, [r4, #12]
 8005c52:	07db      	lsls	r3, r3, #31
 8005c54:	d5e1      	bpl.n	8005c1a <__swbuf_r+0x2e>
 8005c56:	2e0a      	cmp	r6, #10
 8005c58:	d1df      	bne.n	8005c1a <__swbuf_r+0x2e>
 8005c5a:	4621      	mov	r1, r4
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	f7ff fd83 	bl	8005768 <_fflush_r>
 8005c62:	2800      	cmp	r0, #0
 8005c64:	d0d9      	beq.n	8005c1a <__swbuf_r+0x2e>
 8005c66:	e7d6      	b.n	8005c16 <__swbuf_r+0x2a>

08005c68 <__swsetup_r>:
 8005c68:	b538      	push	{r3, r4, r5, lr}
 8005c6a:	4b29      	ldr	r3, [pc, #164]	@ (8005d10 <__swsetup_r+0xa8>)
 8005c6c:	4605      	mov	r5, r0
 8005c6e:	6818      	ldr	r0, [r3, #0]
 8005c70:	460c      	mov	r4, r1
 8005c72:	b118      	cbz	r0, 8005c7c <__swsetup_r+0x14>
 8005c74:	6a03      	ldr	r3, [r0, #32]
 8005c76:	b90b      	cbnz	r3, 8005c7c <__swsetup_r+0x14>
 8005c78:	f7fe f826 	bl	8003cc8 <__sinit>
 8005c7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c80:	0719      	lsls	r1, r3, #28
 8005c82:	d422      	bmi.n	8005cca <__swsetup_r+0x62>
 8005c84:	06da      	lsls	r2, r3, #27
 8005c86:	d407      	bmi.n	8005c98 <__swsetup_r+0x30>
 8005c88:	2209      	movs	r2, #9
 8005c8a:	602a      	str	r2, [r5, #0]
 8005c8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c90:	81a3      	strh	r3, [r4, #12]
 8005c92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c96:	e033      	b.n	8005d00 <__swsetup_r+0x98>
 8005c98:	0758      	lsls	r0, r3, #29
 8005c9a:	d512      	bpl.n	8005cc2 <__swsetup_r+0x5a>
 8005c9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c9e:	b141      	cbz	r1, 8005cb2 <__swsetup_r+0x4a>
 8005ca0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ca4:	4299      	cmp	r1, r3
 8005ca6:	d002      	beq.n	8005cae <__swsetup_r+0x46>
 8005ca8:	4628      	mov	r0, r5
 8005caa:	f7fe feff 	bl	8004aac <_free_r>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8005cb2:	89a3      	ldrh	r3, [r4, #12]
 8005cb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005cb8:	81a3      	strh	r3, [r4, #12]
 8005cba:	2300      	movs	r3, #0
 8005cbc:	6063      	str	r3, [r4, #4]
 8005cbe:	6923      	ldr	r3, [r4, #16]
 8005cc0:	6023      	str	r3, [r4, #0]
 8005cc2:	89a3      	ldrh	r3, [r4, #12]
 8005cc4:	f043 0308 	orr.w	r3, r3, #8
 8005cc8:	81a3      	strh	r3, [r4, #12]
 8005cca:	6923      	ldr	r3, [r4, #16]
 8005ccc:	b94b      	cbnz	r3, 8005ce2 <__swsetup_r+0x7a>
 8005cce:	89a3      	ldrh	r3, [r4, #12]
 8005cd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005cd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cd8:	d003      	beq.n	8005ce2 <__swsetup_r+0x7a>
 8005cda:	4621      	mov	r1, r4
 8005cdc:	4628      	mov	r0, r5
 8005cde:	f000 f883 	bl	8005de8 <__smakebuf_r>
 8005ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ce6:	f013 0201 	ands.w	r2, r3, #1
 8005cea:	d00a      	beq.n	8005d02 <__swsetup_r+0x9a>
 8005cec:	2200      	movs	r2, #0
 8005cee:	60a2      	str	r2, [r4, #8]
 8005cf0:	6962      	ldr	r2, [r4, #20]
 8005cf2:	4252      	negs	r2, r2
 8005cf4:	61a2      	str	r2, [r4, #24]
 8005cf6:	6922      	ldr	r2, [r4, #16]
 8005cf8:	b942      	cbnz	r2, 8005d0c <__swsetup_r+0xa4>
 8005cfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005cfe:	d1c5      	bne.n	8005c8c <__swsetup_r+0x24>
 8005d00:	bd38      	pop	{r3, r4, r5, pc}
 8005d02:	0799      	lsls	r1, r3, #30
 8005d04:	bf58      	it	pl
 8005d06:	6962      	ldrpl	r2, [r4, #20]
 8005d08:	60a2      	str	r2, [r4, #8]
 8005d0a:	e7f4      	b.n	8005cf6 <__swsetup_r+0x8e>
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	e7f7      	b.n	8005d00 <__swsetup_r+0x98>
 8005d10:	20000018 	.word	0x20000018

08005d14 <_raise_r>:
 8005d14:	291f      	cmp	r1, #31
 8005d16:	b538      	push	{r3, r4, r5, lr}
 8005d18:	4605      	mov	r5, r0
 8005d1a:	460c      	mov	r4, r1
 8005d1c:	d904      	bls.n	8005d28 <_raise_r+0x14>
 8005d1e:	2316      	movs	r3, #22
 8005d20:	6003      	str	r3, [r0, #0]
 8005d22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
 8005d28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005d2a:	b112      	cbz	r2, 8005d32 <_raise_r+0x1e>
 8005d2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005d30:	b94b      	cbnz	r3, 8005d46 <_raise_r+0x32>
 8005d32:	4628      	mov	r0, r5
 8005d34:	f000 f830 	bl	8005d98 <_getpid_r>
 8005d38:	4622      	mov	r2, r4
 8005d3a:	4601      	mov	r1, r0
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d42:	f000 b817 	b.w	8005d74 <_kill_r>
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d00a      	beq.n	8005d60 <_raise_r+0x4c>
 8005d4a:	1c59      	adds	r1, r3, #1
 8005d4c:	d103      	bne.n	8005d56 <_raise_r+0x42>
 8005d4e:	2316      	movs	r3, #22
 8005d50:	6003      	str	r3, [r0, #0]
 8005d52:	2001      	movs	r0, #1
 8005d54:	e7e7      	b.n	8005d26 <_raise_r+0x12>
 8005d56:	2100      	movs	r1, #0
 8005d58:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	4798      	blx	r3
 8005d60:	2000      	movs	r0, #0
 8005d62:	e7e0      	b.n	8005d26 <_raise_r+0x12>

08005d64 <raise>:
 8005d64:	4b02      	ldr	r3, [pc, #8]	@ (8005d70 <raise+0xc>)
 8005d66:	4601      	mov	r1, r0
 8005d68:	6818      	ldr	r0, [r3, #0]
 8005d6a:	f7ff bfd3 	b.w	8005d14 <_raise_r>
 8005d6e:	bf00      	nop
 8005d70:	20000018 	.word	0x20000018

08005d74 <_kill_r>:
 8005d74:	b538      	push	{r3, r4, r5, lr}
 8005d76:	4d07      	ldr	r5, [pc, #28]	@ (8005d94 <_kill_r+0x20>)
 8005d78:	2300      	movs	r3, #0
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	4608      	mov	r0, r1
 8005d7e:	4611      	mov	r1, r2
 8005d80:	602b      	str	r3, [r5, #0]
 8005d82:	f000 f8af 	bl	8005ee4 <_kill>
 8005d86:	1c43      	adds	r3, r0, #1
 8005d88:	d102      	bne.n	8005d90 <_kill_r+0x1c>
 8005d8a:	682b      	ldr	r3, [r5, #0]
 8005d8c:	b103      	cbz	r3, 8005d90 <_kill_r+0x1c>
 8005d8e:	6023      	str	r3, [r4, #0]
 8005d90:	bd38      	pop	{r3, r4, r5, pc}
 8005d92:	bf00      	nop
 8005d94:	2000049c 	.word	0x2000049c

08005d98 <_getpid_r>:
 8005d98:	f000 b894 	b.w	8005ec4 <_getpid>

08005d9c <__swhatbuf_r>:
 8005d9c:	b570      	push	{r4, r5, r6, lr}
 8005d9e:	460c      	mov	r4, r1
 8005da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005da4:	2900      	cmp	r1, #0
 8005da6:	b096      	sub	sp, #88	@ 0x58
 8005da8:	4615      	mov	r5, r2
 8005daa:	461e      	mov	r6, r3
 8005dac:	da0d      	bge.n	8005dca <__swhatbuf_r+0x2e>
 8005dae:	89a3      	ldrh	r3, [r4, #12]
 8005db0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005db4:	f04f 0100 	mov.w	r1, #0
 8005db8:	bf14      	ite	ne
 8005dba:	2340      	movne	r3, #64	@ 0x40
 8005dbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	6031      	str	r1, [r6, #0]
 8005dc4:	602b      	str	r3, [r5, #0]
 8005dc6:	b016      	add	sp, #88	@ 0x58
 8005dc8:	bd70      	pop	{r4, r5, r6, pc}
 8005dca:	466a      	mov	r2, sp
 8005dcc:	f000 f848 	bl	8005e60 <_fstat_r>
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	dbec      	blt.n	8005dae <__swhatbuf_r+0x12>
 8005dd4:	9901      	ldr	r1, [sp, #4]
 8005dd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005dda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005dde:	4259      	negs	r1, r3
 8005de0:	4159      	adcs	r1, r3
 8005de2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005de6:	e7eb      	b.n	8005dc0 <__swhatbuf_r+0x24>

08005de8 <__smakebuf_r>:
 8005de8:	898b      	ldrh	r3, [r1, #12]
 8005dea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dec:	079d      	lsls	r5, r3, #30
 8005dee:	4606      	mov	r6, r0
 8005df0:	460c      	mov	r4, r1
 8005df2:	d507      	bpl.n	8005e04 <__smakebuf_r+0x1c>
 8005df4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	6123      	str	r3, [r4, #16]
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	6163      	str	r3, [r4, #20]
 8005e00:	b003      	add	sp, #12
 8005e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e04:	ab01      	add	r3, sp, #4
 8005e06:	466a      	mov	r2, sp
 8005e08:	f7ff ffc8 	bl	8005d9c <__swhatbuf_r>
 8005e0c:	9f00      	ldr	r7, [sp, #0]
 8005e0e:	4605      	mov	r5, r0
 8005e10:	4639      	mov	r1, r7
 8005e12:	4630      	mov	r0, r6
 8005e14:	f7fe febe 	bl	8004b94 <_malloc_r>
 8005e18:	b948      	cbnz	r0, 8005e2e <__smakebuf_r+0x46>
 8005e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e1e:	059a      	lsls	r2, r3, #22
 8005e20:	d4ee      	bmi.n	8005e00 <__smakebuf_r+0x18>
 8005e22:	f023 0303 	bic.w	r3, r3, #3
 8005e26:	f043 0302 	orr.w	r3, r3, #2
 8005e2a:	81a3      	strh	r3, [r4, #12]
 8005e2c:	e7e2      	b.n	8005df4 <__smakebuf_r+0xc>
 8005e2e:	89a3      	ldrh	r3, [r4, #12]
 8005e30:	6020      	str	r0, [r4, #0]
 8005e32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e36:	81a3      	strh	r3, [r4, #12]
 8005e38:	9b01      	ldr	r3, [sp, #4]
 8005e3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005e3e:	b15b      	cbz	r3, 8005e58 <__smakebuf_r+0x70>
 8005e40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e44:	4630      	mov	r0, r6
 8005e46:	f000 f81d 	bl	8005e84 <_isatty_r>
 8005e4a:	b128      	cbz	r0, 8005e58 <__smakebuf_r+0x70>
 8005e4c:	89a3      	ldrh	r3, [r4, #12]
 8005e4e:	f023 0303 	bic.w	r3, r3, #3
 8005e52:	f043 0301 	orr.w	r3, r3, #1
 8005e56:	81a3      	strh	r3, [r4, #12]
 8005e58:	89a3      	ldrh	r3, [r4, #12]
 8005e5a:	431d      	orrs	r5, r3
 8005e5c:	81a5      	strh	r5, [r4, #12]
 8005e5e:	e7cf      	b.n	8005e00 <__smakebuf_r+0x18>

08005e60 <_fstat_r>:
 8005e60:	b538      	push	{r3, r4, r5, lr}
 8005e62:	4d07      	ldr	r5, [pc, #28]	@ (8005e80 <_fstat_r+0x20>)
 8005e64:	2300      	movs	r3, #0
 8005e66:	4604      	mov	r4, r0
 8005e68:	4608      	mov	r0, r1
 8005e6a:	4611      	mov	r1, r2
 8005e6c:	602b      	str	r3, [r5, #0]
 8005e6e:	f000 f821 	bl	8005eb4 <_fstat>
 8005e72:	1c43      	adds	r3, r0, #1
 8005e74:	d102      	bne.n	8005e7c <_fstat_r+0x1c>
 8005e76:	682b      	ldr	r3, [r5, #0]
 8005e78:	b103      	cbz	r3, 8005e7c <_fstat_r+0x1c>
 8005e7a:	6023      	str	r3, [r4, #0]
 8005e7c:	bd38      	pop	{r3, r4, r5, pc}
 8005e7e:	bf00      	nop
 8005e80:	2000049c 	.word	0x2000049c

08005e84 <_isatty_r>:
 8005e84:	b538      	push	{r3, r4, r5, lr}
 8005e86:	4d06      	ldr	r5, [pc, #24]	@ (8005ea0 <_isatty_r+0x1c>)
 8005e88:	2300      	movs	r3, #0
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	4608      	mov	r0, r1
 8005e8e:	602b      	str	r3, [r5, #0]
 8005e90:	f000 f820 	bl	8005ed4 <_isatty>
 8005e94:	1c43      	adds	r3, r0, #1
 8005e96:	d102      	bne.n	8005e9e <_isatty_r+0x1a>
 8005e98:	682b      	ldr	r3, [r5, #0]
 8005e9a:	b103      	cbz	r3, 8005e9e <_isatty_r+0x1a>
 8005e9c:	6023      	str	r3, [r4, #0]
 8005e9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ea0:	2000049c 	.word	0x2000049c

08005ea4 <_close>:
 8005ea4:	4b02      	ldr	r3, [pc, #8]	@ (8005eb0 <_close+0xc>)
 8005ea6:	2258      	movs	r2, #88	@ 0x58
 8005ea8:	601a      	str	r2, [r3, #0]
 8005eaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005eae:	4770      	bx	lr
 8005eb0:	2000049c 	.word	0x2000049c

08005eb4 <_fstat>:
 8005eb4:	4b02      	ldr	r3, [pc, #8]	@ (8005ec0 <_fstat+0xc>)
 8005eb6:	2258      	movs	r2, #88	@ 0x58
 8005eb8:	601a      	str	r2, [r3, #0]
 8005eba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ebe:	4770      	bx	lr
 8005ec0:	2000049c 	.word	0x2000049c

08005ec4 <_getpid>:
 8005ec4:	4b02      	ldr	r3, [pc, #8]	@ (8005ed0 <_getpid+0xc>)
 8005ec6:	2258      	movs	r2, #88	@ 0x58
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ece:	4770      	bx	lr
 8005ed0:	2000049c 	.word	0x2000049c

08005ed4 <_isatty>:
 8005ed4:	4b02      	ldr	r3, [pc, #8]	@ (8005ee0 <_isatty+0xc>)
 8005ed6:	2258      	movs	r2, #88	@ 0x58
 8005ed8:	601a      	str	r2, [r3, #0]
 8005eda:	2000      	movs	r0, #0
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	2000049c 	.word	0x2000049c

08005ee4 <_kill>:
 8005ee4:	4b02      	ldr	r3, [pc, #8]	@ (8005ef0 <_kill+0xc>)
 8005ee6:	2258      	movs	r2, #88	@ 0x58
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005eee:	4770      	bx	lr
 8005ef0:	2000049c 	.word	0x2000049c

08005ef4 <_lseek>:
 8005ef4:	4b02      	ldr	r3, [pc, #8]	@ (8005f00 <_lseek+0xc>)
 8005ef6:	2258      	movs	r2, #88	@ 0x58
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005efe:	4770      	bx	lr
 8005f00:	2000049c 	.word	0x2000049c

08005f04 <_read>:
 8005f04:	4b02      	ldr	r3, [pc, #8]	@ (8005f10 <_read+0xc>)
 8005f06:	2258      	movs	r2, #88	@ 0x58
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f0e:	4770      	bx	lr
 8005f10:	2000049c 	.word	0x2000049c

08005f14 <_sbrk>:
 8005f14:	4a04      	ldr	r2, [pc, #16]	@ (8005f28 <_sbrk+0x14>)
 8005f16:	6811      	ldr	r1, [r2, #0]
 8005f18:	4603      	mov	r3, r0
 8005f1a:	b909      	cbnz	r1, 8005f20 <_sbrk+0xc>
 8005f1c:	4903      	ldr	r1, [pc, #12]	@ (8005f2c <_sbrk+0x18>)
 8005f1e:	6011      	str	r1, [r2, #0]
 8005f20:	6810      	ldr	r0, [r2, #0]
 8005f22:	4403      	add	r3, r0
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	4770      	bx	lr
 8005f28:	200004ac 	.word	0x200004ac
 8005f2c:	200004b0 	.word	0x200004b0

08005f30 <_write>:
 8005f30:	4b02      	ldr	r3, [pc, #8]	@ (8005f3c <_write+0xc>)
 8005f32:	2258      	movs	r2, #88	@ 0x58
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f3a:	4770      	bx	lr
 8005f3c:	2000049c 	.word	0x2000049c

08005f40 <_exit>:
 8005f40:	e7fe      	b.n	8005f40 <_exit>
	...

08005f44 <_init>:
 8005f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f46:	bf00      	nop
 8005f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f4a:	bc08      	pop	{r3}
 8005f4c:	469e      	mov	lr, r3
 8005f4e:	4770      	bx	lr

08005f50 <_fini>:
 8005f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f52:	bf00      	nop
 8005f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f56:	bc08      	pop	{r3}
 8005f58:	469e      	mov	lr, r3
 8005f5a:	4770      	bx	lr
